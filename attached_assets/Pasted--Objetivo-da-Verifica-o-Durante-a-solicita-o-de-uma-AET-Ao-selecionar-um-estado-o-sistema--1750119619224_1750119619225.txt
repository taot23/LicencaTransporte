✅ Objetivo da Verificação
Durante a solicitação de uma AET:

Ao selecionar um estado, o sistema:

Checa se já existe alguma licença vigente e emitida relacionada àquela placa (cavalo e da linha de frente carretas) para o mesmo estado

Se existir e o vencimento for superior a 30 dias, o estado:

⚠️ Aparece em amarelo (atenção)

❌ É bloqueado para seleção

📅 Mostra a data de vencimento da licença vigente

🧩 Estrutura Base para Consulta
Consulta no backend:

sql
Copiar
Editar
SELECT *
FROM licencas_emitidas
WHERE estado = :estadoSelecionado
AND status = 'Emitida'
AND data_validade > CURRENT_DATE
AND (
  placa_unidade_tratora = :placa OR
  placa_primeira_carreta = :placa OR
  placa_segunda_carreta = :placa OR
  placa_dolly = :placa OR
  placa_prancha = :placa OR
  placa_reboque = :placa
)
ORDER BY data_validade DESC
LIMIT 1;
🔄 Passo a Passo: Verificação Inteligente
🧠 1. Captura das Placas
No formulário de solicitação, tenha os campos:

ts
Copiar
Editar
const placas = {
  cavalo: "ABC1D23",
  primeiraCarreta: "DEF2E45",
  segundaCarreta: "GHI3F67",
  dolly: "JKL4G89",
  prancha: null,
  reboque: null
};
🌍 2. Ao Selecionar um Estado
A cada estado adicionado, chame:

ts
Copiar
Editar
async function verificarEstadoComLicencaVigente(estado, placas) {
  const res = await fetch('/api/licencas-vigentes', {
    method: 'POST',
    body: JSON.stringify({ estado, placas })
  });

  const licenca = await res.json();

  if (licenca && diasRestantes(licenca.data_validade) > 30) {
    marcarEstadoComoBloqueado(estado, licenca);
  }
}
🛑 3. Marcar Estado como Bloqueado
ts
Copiar
Editar
function marcarEstadoComoBloqueado(estado, licenca) {
  setEstadosBloqueados((prev) => ({
    ...prev,
    [estado]: {
      numero: licenca.numero_licenca,
      validade: licenca.data_validade
    }
  }));
}
🖼️ 4. Renderização visual no select de estados
jsx
Copiar
Editar
<CheckboxList>
  {estados.map((estado) => {
    const bloqueado = estadosBloqueados[estado];
    return (
      <div key={estado} className={`p-2 rounded border ${
        bloqueado ? 'border-yellow-400 bg-yellow-100 cursor-not-allowed' : ''
      }`}>
        <label>
          <input
            type="checkbox"
            disabled={!!bloqueado}
            value={estado}
          />
          {estado}
          {bloqueado && (
            <div className="text-sm text-yellow-600 mt-1">
              Licença vigente até {formatarData(bloqueado.validade)}<br />
              Nº {bloqueado.numero}
            </div>
          )}
        </label>
      </div>
    );
  })}
</CheckboxList>
✅ Exemplo visual final:
plaintext
Copiar
Editar
☑ SP
   (Licença vigente até 12/08/2025 — Nº AET-014587)
   [ Estado desabilitado com fundo amarelo ]
🧠 Benefícios dessa abordagem
✅ Evita duplicidade de licenças ativas para o mesmo estado

✅ Dá transparência ao usuário sobre o motivo do bloqueio

✅ Melhora a usabilidade com alertas visuais claros

✅ Pronto para ser reutilizado para qualquer tipo de composição