#!/bin/bash

# Script de deployment para produ√ß√£o - Sistema AET
# Vers√£o: 17/06/2025 - Sistema de Valida√ß√£o Inteligente Completo

set -e  # Parar em caso de erro

echo "üöÄ DEPLOYMENT SISTEMA AET - VALIDA√á√ÉO INTELIGENTE"
echo "================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs coloridos
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se est√° rodando como root
if [[ $EUID -eq 0 ]]; then
   log_error "Este script n√£o deve ser executado como root"
   exit 1
fi

# Verificar depend√™ncias
check_dependencies() {
    log_info "Verificando depend√™ncias..."
    
    command -v node >/dev/null 2>&1 || { log_error "Node.js n√£o encontrado. Instale Node.js 18+"; exit 1; }
    command -v npm >/dev/null 2>&1 || { log_error "npm n√£o encontrado"; exit 1; }
    command -v pm2 >/dev/null 2>&1 || { log_error "PM2 n√£o encontrado. Execute: npm install -g pm2"; exit 1; }
    command -v psql >/dev/null 2>&1 || { log_error "PostgreSQL n√£o encontrado"; exit 1; }
    
    log_info "‚úÖ Todas as depend√™ncias encontradas"
}

# Backup do banco de dados
backup_database() {
    log_info "Fazendo backup do banco de dados..."
    
    if [ -z "$DATABASE_URL" ]; then
        log_warn "DATABASE_URL n√£o definida, pulando backup"
        return
    fi
    
    BACKUP_DIR="./backups"
    mkdir -p $BACKUP_DIR
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_FILE="$BACKUP_DIR/aet_backup_$TIMESTAMP.sql"
    
    # Extrair detalhes da DATABASE_URL
    DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*\/\([^?]*\).*/\1/p')
    
    if [ ! -z "$DB_NAME" ]; then
        pg_dump $DATABASE_URL > $BACKUP_FILE 2>/dev/null || {
            log_warn "N√£o foi poss√≠vel fazer backup autom√°tico"
        }
        
        if [ -f "$BACKUP_FILE" ]; then
            log_info "‚úÖ Backup salvo em: $BACKUP_FILE"
        fi
    fi
}

# Parar aplica√ß√£o atual
stop_current_app() {
    log_info "Parando aplica√ß√£o atual..."
    
    pm2 stop aet-system 2>/dev/null || log_warn "Aplica√ß√£o n√£o estava rodando"
    pm2 delete aet-system 2>/dev/null || true
    
    log_info "‚úÖ Aplica√ß√£o parada"
}

# Instalar depend√™ncias
install_dependencies() {
    log_info "Instalando depend√™ncias..."
    
    # Limpar cache npm
    npm cache clean --force
    
    # Instalar depend√™ncias de produ√ß√£o
    npm ci --only=production
    
    log_info "‚úÖ Depend√™ncias instaladas"
}

# Aplicar migra√ß√µes
apply_migrations() {
    log_info "Aplicando migra√ß√µes do banco..."
    
    if [ -f "package.json" ] && grep -q "db:push" package.json; then
        npm run db:push || {
            log_error "Falha ao aplicar migra√ß√µes"
            exit 1
        }
        log_info "‚úÖ Migra√ß√µes aplicadas"
    else
        log_warn "Script de migra√ß√£o n√£o encontrado"
    fi
}

# Configurar diret√≥rios
setup_directories() {
    log_info "Configurando diret√≥rios..."
    
    # Diret√≥rio de uploads
    UPLOAD_DIR="${UPLOAD_DIR:-/var/uploads}"
    
    if [ ! -d "$UPLOAD_DIR" ]; then
        sudo mkdir -p "$UPLOAD_DIR/vehicles" "$UPLOAD_DIR/transporter" || {
            log_warn "N√£o foi poss√≠vel criar $UPLOAD_DIR, usando ./uploads"
            UPLOAD_DIR="./uploads"
            mkdir -p "$UPLOAD_DIR/vehicles" "$UPLOAD_DIR/transporter"
        }
    fi
    
    # Configurar permiss√µes
    if [[ "$UPLOAD_DIR" == "/var/uploads" ]]; then
        sudo chown -R $USER:$USER $UPLOAD_DIR 2>/dev/null || true
    fi
    chmod -R 755 $UPLOAD_DIR 2>/dev/null || true
    
    # Diret√≥rio de logs
    sudo mkdir -p /var/log/pm2 2>/dev/null || {
        log_warn "N√£o foi poss√≠vel criar /var/log/pm2"
    }
    
    log_info "‚úÖ Diret√≥rios configurados (uploads: $UPLOAD_DIR)"
}

# Verificar arquivo de produ√ß√£o
check_production_server() {
    log_info "Verificando servidor de produ√ß√£o..."
    
    if [ ! -f "server/production-server.js" ]; then
        log_error "Arquivo server/production-server.js n√£o encontrado"
        exit 1
    fi
    
    if [ ! -f "ecosystem.config.js" ]; then
        log_error "Arquivo ecosystem.config.js n√£o encontrado"
        exit 1
    fi
    
    log_info "‚úÖ Arquivos de produ√ß√£o encontrados"
}

# Iniciar aplica√ß√£o
start_application() {
    log_info "Iniciando aplica√ß√£o..."
    
    # Definir ambiente
    export NODE_ENV=production
    
    # Iniciar com PM2
    pm2 start ecosystem.config.js --env production || {
        log_error "Falha ao iniciar aplica√ß√£o"
        exit 1
    }
    
    # Salvar configura√ß√£o PM2
    pm2 save
    
    # Configurar inicializa√ß√£o autom√°tica
    pm2 startup || true
    
    log_info "‚úÖ Aplica√ß√£o iniciada"
}

# Verificar sa√∫de da aplica√ß√£o
health_check() {
    log_info "Verificando sa√∫de da aplica√ß√£o..."
    
    sleep 5  # Aguardar inicializa√ß√£o
    
    # Verificar se processo est√° rodando
    if ! pm2 list | grep -q "aet-system.*online"; then
        log_error "Aplica√ß√£o n√£o est√° online"
        pm2 logs aet-system --lines 20
        exit 1
    fi
    
    # Verificar conectividade HTTP
    PORT=${PORT:-5000}
    for i in {1..10}; do
        if curl -s "http://localhost:$PORT/api/user" >/dev/null 2>&1; then
            log_info "‚úÖ Aplica√ß√£o respondendo na porta $PORT"
            break
        fi
        
        if [ $i -eq 10 ]; then
            log_error "Aplica√ß√£o n√£o responde ap√≥s 10 tentativas"
            pm2 logs aet-system --lines 20
            exit 1
        fi
        
        log_info "Tentativa $i/10 - aguardando aplica√ß√£o..."
        sleep 3
    done
}

# Mostrar status final
show_status() {
    log_info "Status final do deployment:"
    echo ""
    pm2 status
    echo ""
    
    log_info "Comandos √∫teis:"
    echo "  üìä Status: pm2 status"
    echo "  üìã Logs: pm2 logs aet-system"
    echo "  üîÑ Restart: pm2 restart aet-system"
    echo "  üõë Stop: pm2 stop aet-system"
    echo ""
    
    log_info "üéâ DEPLOYMENT CONCLU√çDO COM SUCESSO!"
    echo ""
    echo "Sistema AET com Valida√ß√£o Inteligente est√° rodando:"
    echo "- Valida√ß√£o para todos os 27 estados + DNIT/ANTT/PRF"
    echo "- Bloqueio autom√°tico de estados com licen√ßas >60 dias"
    echo "- Interface original mantida com valida√ß√£o em tempo real"
    echo "- Dados reais da tabela licencas_emitidas"
}

# Fun√ß√£o principal
main() {
    log_info "Iniciando deployment em: $(pwd)"
    
    check_dependencies
    backup_database
    stop_current_app
    install_dependencies
    apply_migrations
    setup_directories
    check_production_server
    start_application
    health_check
    show_status
}

# Executar fun√ß√£o principal
main "$@"