/**
 * Script de valida√ß√£o e corre√ß√£o r√°pida para servidor de produ√ß√£o
 * Vers√£o simplificada que foca apenas na valida√ß√£o essencial
 */

import { Pool } from 'pg';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Usar DATABASE_URL fornecida via linha de comando ou vari√°vel de ambiente
const databaseUrl = process.env.DATABASE_URL || 'postgresql://aetuser:nvs123@localhost:5432/aetlicensesystem';

const pool = new Pool({
  connectionString: databaseUrl,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function testarValidacao() {
  console.log('üß™ TESTE R√ÅPIDO DE VALIDA√á√ÉO DO SISTEMA');
  console.log('=====================================');

  try {
    // 1. Testar conex√£o com banco
    console.log('üìä Testando conex√£o com banco de dados...');
    const { rows: testConnection } = await pool.query('SELECT NOW() as current_time');
    console.log(`‚úÖ Conex√£o OK - Hora do servidor: ${testConnection[0].current_time}`);

    // 2. Verificar usu√°rios no sistema
    console.log('\nüë• Verificando usu√°rios...');
    const { rows: users } = await pool.query(`
      SELECT email, role, full_name, 
             CASE WHEN password IS NOT NULL AND length(password) > 0 THEN 'configurada' ELSE 'ausente' END as senha_status
      FROM users 
      ORDER BY 
        CASE role 
          WHEN 'admin' THEN 1
          WHEN 'manager' THEN 2
          WHEN 'supervisor' THEN 3
          WHEN 'financial' THEN 4
          WHEN 'operational' THEN 5
          WHEN 'user' THEN 6
        END
    `);

    console.log(`üìã ${users.length} usu√°rios encontrados:`);
    users.forEach(user => {
      console.log(`   ${user.email} (${user.role}) - Senha: ${user.senha_status}`);
    });

    // 3. Verificar vari√°veis de ambiente cr√≠ticas
    console.log('\nüåç Verificando configura√ß√£o do ambiente...');
    const envVars = [
      { name: 'NODE_ENV', value: process.env.NODE_ENV },
      { name: 'DATABASE_URL', value: process.env.DATABASE_URL ? 'configurado' : 'ausente' },
      { name: 'SESSION_SECRET', value: process.env.SESSION_SECRET ? 'configurado' : 'ausente' }
    ];

    envVars.forEach(env => {
      const status = env.value ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${env.name}: ${env.value || 'n√£o configurado'}`);
    });

    // 4. Resumo da valida√ß√£o
    console.log('\nüìã RESUMO DA VALIDA√á√ÉO:');
    
    const adminUsers = users.filter(u => u.role === 'admin');
    const usersWithPassword = users.filter(u => u.senha_status === 'configurada');
    
    console.log(`   ‚Ä¢ Administradores: ${adminUsers.length}`);
    console.log(`   ‚Ä¢ Usu√°rios com senha: ${usersWithPassword.length}/${users.length}`);
    console.log(`   ‚Ä¢ Banco de dados: ${testConnection.length > 0 ? 'funcionando' : 'erro'}`);
    console.log(`   ‚Ä¢ Vari√°veis de ambiente: ${envVars.filter(e => e.value && e.value !== 'ausente').length}/${envVars.length} configuradas`);

    // 5. Recomenda√ß√µes
    console.log('\nüí° RECOMENDA√á√ïES:');
    
    if (adminUsers.length === 0) {
      console.log('   ‚ö†Ô∏è  Nenhum administrador encontrado - verifique os roles dos usu√°rios');
    }
    
    if (!process.env.SESSION_SECRET) {
      console.log('   ‚ö†Ô∏è  SESSION_SECRET n√£o configurado - pode causar problemas de autentica√ß√£o');
    }
    
    const usersWithoutPassword = users.filter(u => u.senha_status === 'ausente');
    if (usersWithoutPassword.length > 0) {
      console.log(`   ‚ö†Ô∏è  ${usersWithoutPassword.length} usu√°rio(s) sem senha configurada`);
    }

    console.log('\n‚úÖ VALIDA√á√ÉO CONCLU√çDA!');
    console.log('Para logs detalhados, use: pm2 logs aet-license-system');

  } catch (error) {
    console.error('\n‚ùå ERRO NA VALIDA√á√ÉO:', error.message);
    
    if (error.message.includes('connect')) {
      console.log('üí° Problema de conex√£o - verifique DATABASE_URL no arquivo .env');
    } else if (error.message.includes('permission')) {
      console.log('üí° Problema de permiss√£o - verifique as credenciais do banco');
    }
    
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Executar se chamado diretamente
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);

if (process.argv[1] === __filename) {
  testarValidacao().catch(console.error);
}

export { testarValidacao };