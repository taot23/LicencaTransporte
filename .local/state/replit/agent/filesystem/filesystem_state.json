{"file_contents":{"client/src/pages/admin/admin-licenses.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useWebSocketContext } from \"@/hooks/use-websocket-context\";\nimport { AdminLayout } from \"@/components/layout/admin-layout\";\nimport { getQueryFn, apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { getLicenseTypeLabel, getCargoTypeLabel } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { exportToCSV, formatDateForCSV } from \"@/lib/csv-export\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Loader2, Search, FileText, CheckCircle, XCircle, File, Clock, \n  MapPin, X, UploadCloud, Pencil, AlertCircle, Eye, EyeOff, Trash2,\n  RefreshCw, Download\n} from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { StatusBadge } from \"@/components/licenses/status-badge\";\nimport { ProgressFlow, StateProgressFlow } from \"@/components/licenses/progress-flow\";\nimport { LicenseDetailsCard } from \"@/components/licenses/license-details-card\";\nimport { TransporterWithSubsidiaries } from \"@/components/transporters/transporter-with-subsidiaries\";\nimport { TransporterCnpjSelector } from \"@/components/transporters/transporter-cnpj-selector\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { LicenseRequest, brazilianStates, Transporter } from \"@shared/schema\";\nimport { TransporterInfo } from \"@/components/transporters/transporter-info\";\nimport { usePaginatedList } from \"@/hooks/use-paginated-list\";\nimport { ListPagination, MobileListPagination } from \"@/components/ui/list-pagination\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\n\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Schema para atualização de status\nconst updateStatusSchema = z.object({\n  status: z.string({\n    required_error: \"O status é obrigatório\",\n  }),\n  comments: z.string().optional(),\n  licenseFile: z.any().optional(),\n});\n\n// Schema para atualização de status por estado\nconst updateStateStatusSchema = z.object({\n  state: z.string({\n    required_error: \"O estado é obrigatório\",\n  }),\n  status: z.string({\n    required_error: \"O status é obrigatório\",\n  }),\n  comments: z.string().optional(),\n  validUntil: z.string().optional(),\n  issuedAt: z.string().optional(),\n  aetNumber: z.string().optional(),\n  selectedCnpj: z.string().optional(),\n  licenseFile: z\n    .any()\n    .optional()\n    .refine(\n      (file) => {\n        if (!file) return true;\n        return file && typeof file === 'object' && 'type' in file && \n          file.type === \"application/pdf\";\n      },\n      {\n        message: \"Apenas arquivos PDF são permitidos para a licença\",\n      }\n    ),\n}).superRefine(async (data, ctx) => {\n  // Se o status for \"approved\", validade e data de emissão são obrigatórias\n  if (data.status === \"approved\") {\n    if (!data.validUntil) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"A data de validade é obrigatória quando o status é Liberada\",\n        path: [\"validUntil\"]\n      });\n    }\n    if (!data.issuedAt) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"A data de emissão é obrigatória quando o status é Liberada\",\n        path: [\"issuedAt\"]\n      });\n    }\n  }\n  \n  // Se o status for \"under_review\" ou \"pending_approval\", número da AET é obrigatório\n  if ((data.status === \"under_review\" || data.status === \"pending_approval\") && !data.aetNumber) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: `O número da AET é obrigatório quando o status é ${data.status === \"under_review\" ? \"Análise do Órgão\" : \"Pendente Liberação\"}`,\n      path: [\"aetNumber\"]\n    });\n  }\n  \n  // Para o status \"approved\", o número da AET deve ser informado apenas se não houver um número anterior\n  if (data.status === \"approved\" && !data.aetNumber) {\n    // Não vamos adicionar o erro aqui, pois o backend vai buscar o valor do status anterior\n    // Mas podemos melhorar isso com validação do lado do cliente se necessário\n  }\n});\n\n// Constantes e funções auxiliares para status\n\nexport default function AdminLicensesPage() {\n  const [includeRenewalDrafts, setIncludeRenewalDrafts] = useState(false);\n  const [visibleColumns, setVisibleColumns] = useState({\n    id: true,\n    requestNumber: true,\n    plate: true,\n    transporter: true,\n    type: true,\n    states: true,\n    status: true,\n    createdAt: true\n  });\n  \n  // PAGINAÇÃO PARA 50K+ REGISTROS  \n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  \n  const { toast } = useToast();\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { isConnected, lastMessage } = useWebSocketContext();\n  \n  // Estados para controle de filtros e busca\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [transporterFilter, setTransporterFilter] = useState(\"all\");\n  const [transporterSearchTerm, setTransporterSearchTerm] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState(\"\");\n  const [stateFilter, setStateFilter] = useState(\"all_states\");\n  const [selectedLicense, setSelectedLicense] = useState<LicenseRequest | null>(null);\n  const [licenseDetailsOpen, setLicenseDetailsOpen] = useState(false);\n  const [stateStatusDialogOpen, setStateStatusDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedState, setSelectedState] = useState(\"\");\n  const [visibleStateFlows, setVisibleStateFlows] = useState<string[]>([]);\n  \n  // Estado para ordenação\n  const [sortField, setSortField] = useState<string>(\"createdAt\");\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"desc\");\n  \n  // Estados para controle do botão de atualização\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [aetNumberValidationError, setAetNumberValidationError] = useState<string>(\"\");\n\n  // Effect para invalidar cache quando houver atualizações via WebSocket\n  useEffect(() => {\n    if (lastMessage && lastMessage.data) {\n      try {\n        const message = JSON.parse(lastMessage.data);\n        \n        // Invalidar cache para qualquer tipo de atualização\n        if (message.type === 'STATUS_UPDATE' || message.type === 'LICENSE_UPDATE') {\n          console.log('[REALTIME] Recebida atualização, invalidando cache:', message);\n          \n          // Invalidar todas as queries relacionadas\n          queryClient.invalidateQueries({ queryKey: ['/api/admin/licenses'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/admin/transporters'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/public/transporters'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/licenses'] });\n          \n          // Forçar refetch imediato\n          queryClient.refetchQueries({ queryKey: ['/api/admin/licenses'] });\n          \n          toast({\n            title: \"Dados atualizados\",\n            description: \"As informações foram atualizadas automaticamente.\",\n          });\n        }\n      } catch (error) {\n        console.log('[REALTIME] Erro ao processar mensagem WebSocket:', error);\n      }\n    }\n  }, [lastMessage, toast]);\n  \n  // Verificar se o usuário é do tipo operacional\n  const isOperational = user?.role === 'operational';\n  \n  // Verificar se estamos na rota de gerenciar-licencas (staff) ou admin\n  const isStaffRoute = location.includes('gerenciar-licencas');\n  const apiEndpoint = isStaffRoute ? '/api/staff/licenses' : '/api/admin/licenses';\n  \n  // Efeito para atualizar o objeto selectedLicense em tempo real quando receber mensagem WebSocket\n  useEffect(() => {\n    if (\n      lastMessage?.type === 'STATUS_UPDATE' && \n      lastMessage.data && \n      selectedLicense && \n      lastMessage.data.licenseId === selectedLicense.id\n    ) {\n      // Se o evento é para um estado específico\n      if (lastMessage.data.state) {\n        // Atualização de status de um estado específico\n        const updatedStateStatuses = [...(selectedLicense.stateStatuses || [])];\n        const stateStatusIndex = updatedStateStatuses.findIndex(\n          entry => entry.startsWith(`${lastMessage.data.state}:`)\n        );\n        \n        // Se o estado já existe nos status, atualizar\n        if (stateStatusIndex >= 0) {\n          updatedStateStatuses[stateStatusIndex] = `${lastMessage.data.state}:${lastMessage.data.status}`;\n        } else {\n          // Se não existe, adicionar\n          updatedStateStatuses.push(`${lastMessage.data.state}:${lastMessage.data.status}`);\n        }\n        \n        // Criar uma cópia atualizada da licença selecionada\n        setSelectedLicense(prevLicense => {\n          if (!prevLicense) return null;\n          const updatedLicense = {\n            ...prevLicense,\n            stateStatuses: updatedStateStatuses,\n            // Se também recebemos uma atualização completa da licença, usar todos os dados\n            ...(lastMessage.data.license && lastMessage.data.license),\n            // Se também recebemos uma atualização para o status geral da licença\n            ...(lastMessage.data.license?.status && { status: lastMessage.data.license.status })\n          };\n          \n          // Se o modal de edição de status está aberto para este estado, atualizar o formulário\n          if (stateStatusDialogOpen && selectedState === lastMessage.data.state) {\n            console.log('[WebSocket] Atualizando formulário em tempo real para estado:', lastMessage.data.state);\n            // Usar setTimeout para garantir que o estado foi atualizado\n            setTimeout(() => {\n              // Determinar o CNPJ específico para este estado\n              let currentStateCnpj = \"\";\n              if (updatedLicense.stateCnpjs && updatedLicense.stateCnpjs.length > 0) {\n                const stateCnpjEntry = updatedLicense.stateCnpjs.find((entry: string) => entry.startsWith(`${lastMessage.data.state}:`));\n                if (stateCnpjEntry) {\n                  const [_, cnpj] = stateCnpjEntry.split(':');\n                  if (cnpj) {\n                    currentStateCnpj = cnpj;\n                  }\n                }\n              }\n              \n              // Fallback para o CNPJ global se não houver CNPJ específico para o estado\n              if (!currentStateCnpj && updatedLicense.selectedCnpj) {\n                currentStateCnpj = updatedLicense.selectedCnpj;\n              }\n              \n              // Atualizar apenas o campo selectedCnpj do formulário se necessário\n              const currentFormCnpj = stateStatusForm.getValues(\"selectedCnpj\");\n              if (currentFormCnpj !== currentStateCnpj) {\n                console.log('[WebSocket] Atualizando CNPJ no formulário de', currentFormCnpj, 'para', currentStateCnpj);\n                stateStatusForm.setValue(\"selectedCnpj\", currentStateCnpj);\n              }\n            }, 100);\n          }\n          \n          return updatedLicense;\n        });\n        \n        console.log(`StatusUpdate em tempo real: Licença ${selectedLicense.id} estado ${lastMessage.data.state} => ${lastMessage.data.status}`);\n      } \n      // Se o evento é para a licença inteira (sem estado específico)\n      else if (lastMessage.data.license) {\n        setSelectedLicense(prevLicense => {\n          if (!prevLicense) return null;\n          return {\n            ...prevLicense,\n            status: lastMessage.data.license.status,\n            ...(lastMessage.data.license.stateStatuses && { stateStatuses: lastMessage.data.license.stateStatuses })\n          };\n        });\n        \n        console.log(`StatusUpdate em tempo real: Licença ${selectedLicense.id} => ${lastMessage.data.license.status}`);\n      }\n    }\n\n    // ATUALIZAÇÃO EM TEMPO REAL PARA A LISTA PRINCIPAL\n    // Atualizar também a lista principal de licenças quando houver mudanças de status\n    if (\n      lastMessage?.type === 'STATUS_UPDATE' && \n      lastMessage.data && \n      lastMessage.data.licenseId && \n      lastMessage.data.state && \n      lastMessage.data.status\n    ) {\n      // Invalidar a query da lista de licenças para recarregar com os dados atualizados\n      queryClient.invalidateQueries({ queryKey: [apiEndpoint] });\n      \n      console.log(`[TEMPO REAL] Lista atualizada: Licença ${lastMessage.data.licenseId}, Estado ${lastMessage.data.state} => ${lastMessage.data.status}`);\n    }\n  }, [lastMessage, selectedLicense]);\n\n  // Form removido para atualização de status geral\n  \n  // Form para atualização de status por estado\n  const stateStatusForm = useForm<z.infer<typeof updateStateStatusSchema>>({\n    resolver: zodResolver(updateStateStatusSchema),\n    defaultValues: {\n      state: \"\",\n      status: \"\",\n      comments: \"\",\n      aetNumber: \"\", // Adicionar campo para número da AET\n      licenseFile: undefined, // Adicionar valor padrão para licenseFile\n      validUntil: \"\", // Corrigindo: iniciar como string vazia ao invés de undefined\n    },\n  });\n\n  // Buscar todas as licenças (excluindo rascunhos de renovação)\n  // QUERY OTIMIZADA PARA 50K+ REGISTROS - COM PAGINAÇÃO NO SERVIDOR\n  const { data: response = { data: [], pagination: {} }, isLoading, refetch } = useQuery({\n    queryKey: [apiEndpoint, {\n      page: currentPage,\n      limit: pageSize,\n      search: searchTerm,\n      status: statusFilter === \"all\" ? undefined : statusFilter,\n      state: stateFilter === \"all_states\" ? undefined : stateFilter,\n      transporter: transporterFilter === \"all\" ? undefined : transporterFilter,\n      includeRenewal: false\n    }],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: pageSize.toString(),\n        includeRenewal: 'false'\n      });\n      \n      if (searchTerm?.trim()) params.set('search', searchTerm.trim());\n      if (statusFilter !== \"all\") params.set('status', statusFilter);\n      if (stateFilter !== \"all_states\") params.set('state', stateFilter);\n      if (transporterFilter !== \"all\") params.set('transporter', transporterFilter);\n      \n      console.log(`🚀 [FRONTEND] Buscando licenças: página ${currentPage}, tamanho ${pageSize}`);\n      const startTime = Date.now();\n      \n      const res = await fetch(`${apiEndpoint}?${params.toString()}`, {\n        credentials: \"include\"\n      });\n      \n      if (!res.ok) {\n        if (res.status === 401) {\n          throw new Error(\"Não autorizado\");\n        }\n        throw new Error(\"Erro ao buscar licenças\");\n      }\n      \n      const data = await res.json();\n      const endTime = Date.now();\n      \n      console.log(`⚡ [FRONTEND] Licenças carregadas em ${endTime - startTime}ms - ${data.data?.length || 0} registros`);\n      \n      return data;\n    },\n    // TEMPO REAL OTIMIZADO\n    staleTime: 1000, // 1 segundo para tempo real instantâneo\n    refetchInterval: 15000, // Refetch a cada 15 segundos\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n  });\n  \n  const licenses = response.data || [];\n  const pagination = response.pagination || {};\n\n  // Buscar todos os transportadores para o filtro\n  const { data: transporters = [] } = useQuery<Transporter[]>({\n    queryKey: ['/api/admin/transporters'],\n  });\n\n  // Função para validar unicidade do número AET\n  const validateAetNumberUniqueness = useCallback((aetNumber: string, currentState: string, currentLicense: LicenseRequest) => {\n    if (!aetNumber || !currentLicense) return null;\n\n    // Verificar se o número já existe em outros estados da mesma licença\n    if (currentLicense.stateAETNumbers) {\n      const duplicateInSameLicense = currentLicense.stateAETNumbers.find(entry => {\n        const [state, number] = entry.split(':');\n        return state !== currentState && number === aetNumber;\n      });\n      \n      if (duplicateInSameLicense) {\n        const [duplicateState] = duplicateInSameLicense.split(':');\n        return `O número \"${aetNumber}\" já está sendo usado no estado ${duplicateState} desta licença`;\n      }\n    }\n\n    // Verificar se o número já existe em outras licenças (busca global)\n    const duplicateInOtherLicense = licenses.find(license => {\n      if (license.id === currentLicense.id) return false; // Pular a licença atual\n      \n      return license.stateAETNumbers?.some(entry => {\n        const [, number] = entry.split(':');\n        return number === aetNumber;\n      });\n    });\n\n    if (duplicateInOtherLicense) {\n      return `O número \"${aetNumber}\" já está sendo usado na licença ${duplicateInOtherLicense.requestNumber}`;\n    }\n\n    return null; // Número é único\n  }, [licenses]);\n\n  // Função de atualização melhorada com feedback visual e integração WebSocket\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      // Invalidar cache primeiro\n      await queryClient.invalidateQueries({ queryKey: [apiEndpoint] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/admin/transporters\"] });\n      \n      // Fazer refetch\n      await refetch();\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Lista de licenças atualizada com sucesso.\",\n      });\n    } catch (error) {\n      console.error(\"Erro ao atualizar:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar a lista. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Mutação para atualização de status geral foi removida - agora só usamos atualização por estado\n  \n  // Atualizar status por estado da licença\n  const updateStateStatusMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number, data: z.infer<typeof updateStateStatusSchema> }) => {\n      const formData = new FormData();\n      formData.append(\"state\", data.state);\n      formData.append(\"status\", data.status);\n      if (data.comments) {\n        formData.append(\"comments\", data.comments);\n      }\n      \n      // Incluir data de validade se fornecida\n      if (data.validUntil) {\n        formData.append(\"validUntil\", data.validUntil);\n      }\n      \n      // Incluir data de emissão se fornecida  \n      if (data.issuedAt) {\n        formData.append(\"issuedAt\", data.issuedAt);\n        console.log('[Frontend] Data de emissão sendo enviada:', data.issuedAt);\n      }\n      \n      // Incluir arquivo da licença se o status for \"approved\" (Liberada)\n      if (data.licenseFile && data.status === \"approved\") {\n        formData.append(\"stateFile\", data.licenseFile);\n      }\n      \n      // Incluir número da AET se o status for \"under_review\" (Análise do Órgão), \"pending_approval\" (Pendente Liberação) ou \"approved\" (Liberada)\n      if (data.aetNumber && (data.status === \"under_review\" || data.status === \"pending_approval\" || data.status === \"approved\")) {\n        formData.append(\"aetNumber\", data.aetNumber);\n      }\n      \n      // Incluir CNPJ selecionado sempre (pode ser string vazia)\n      formData.append(\"selectedCnpj\", data.selectedCnpj || \"\");\n      \n      // Incluir CNPJ específico para este estado\n      formData.append(\"stateCnpj\", data.selectedCnpj || \"\");\n      console.log('Enviando dados - selectedCnpj:', data.selectedCnpj);\n      console.log('Enviando dados - stateCnpj:', data.selectedCnpj);\n      console.log('Enviando dados - state:', data.state);\n      \n      const response = await apiRequest(\"PATCH\", `/api/admin/licenses/${id}/state-status`, formData);\n      return await response.json();\n    },\n    onSuccess: (updatedLicense) => {\n      // Primeiro, mostrar a notificação de sucesso\n      toast({\n        title: \"Status do estado atualizado\",\n        description: \"Status do estado atualizado com sucesso!\",\n      });\n      \n      // Fechar o modal após sucesso\n      setTimeout(() => {\n        setStateStatusDialogOpen(false);\n        setSelectedState(\"\");\n      }, 500);\n      \n      // Invalidar todas as queries relacionadas para garantir dados atualizados\n      setTimeout(() => {\n        // Invalidar as consultas específicas\n        queryClient.invalidateQueries({ queryKey: [apiEndpoint] });\n        queryClient.invalidateQueries({ queryKey: [`${apiEndpoint}/${updatedLicense.id}`] });\n        queryClient.invalidateQueries({ queryKey: ['/api/licenses/issued'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/licenses'] });\n        \n        // Forçar uma nova busca dos dados (opcional, mas pode ajudar)\n        refetch();\n      }, 300);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao atualizar status do estado\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Mutação para excluir licença\n  const deleteLicenseMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/licenses/${id}`);\n      return response.ok;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Licença excluída\",\n        description: \"A licença foi excluída com sucesso!\",\n      });\n      // Invalidar as queries para manter a consistência\n      queryClient.invalidateQueries({ queryKey: [apiEndpoint] });\n      setDeleteDialogOpen(false);\n      setLicenseDetailsOpen(false);\n      setSelectedLicense(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao excluir licença\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filtrar licenças com critérios múltiplos\n  // SISTEMA HÍBRIDO OTIMIZADO: Filtros principais no servidor, filtros extras no cliente\n  const filteredLicenses = licenses\n    .filter((license: LicenseRequest) => {\n      // Busca por transportador (aplicada no cliente para busca em tempo real)\n      let matchesTransporter = true;\n      if (transporterSearchTerm.trim()) {\n        const searchLower = transporterSearchTerm.toLowerCase().trim();\n        const transporter = transporters.find(t => t.id === license.transporterId);\n        \n        if (transporter) {\n          const nameMatch = Boolean(transporter.name?.toLowerCase().includes(searchLower));\n          const documentMatch = Boolean(transporter.documentNumber?.toLowerCase().includes(searchLower));\n          const tradeNameMatch = Boolean(transporter.tradeName?.toLowerCase().includes(searchLower));\n          \n          matchesTransporter = nameMatch || documentMatch || tradeNameMatch;\n        } else {\n          matchesTransporter = false;\n        }\n      }\n      \n      // Filtro de data (aplicado no cliente para precisão)\n      let matchesDate = true;\n      if (dateFilter) {\n        const requestDate = license.createdAt ? new Date(license.createdAt) : null;\n        const filterDate = new Date(dateFilter);\n        \n        if (requestDate) {\n          // Comparar apenas ano, mês e dia\n          matchesDate = \n            requestDate.getFullYear() === filterDate.getFullYear() &&\n            requestDate.getMonth() === filterDate.getMonth() &&\n            requestDate.getDate() === filterDate.getDate();\n        } else {\n          matchesDate = false;\n        }\n      }\n      \n      return matchesTransporter && matchesDate;\n    })\n    // Aplicar ordenação\n    .sort((a, b) => {\n      const getValue = (license: LicenseRequest, field: string) => {\n        switch (field) {\n          case 'requestNumber':\n            return license.requestNumber || '';\n          case 'type':\n            return license.type || '';\n          case 'mainVehiclePlate':\n            return license.mainVehiclePlate || '';\n          case 'status':\n            return license.status || '';\n          case 'createdAt':\n            return new Date(license.createdAt || 0).getTime();\n          default:\n            return '';\n        }\n      };\n      \n      const aValue = getValue(a, sortField);\n      const bValue = getValue(b, sortField);\n      \n      // Se ambos os valores são strings, ordenar ignorando case\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        const comparison = aValue.localeCompare(bValue);\n        return sortDirection === 'asc' ? comparison : -comparison;\n      }\n      \n      // Se são números (timestamp para datas)\n      if (sortDirection === 'asc') {\n        return (aValue as number) - (bValue as number);\n      } else {\n        return (bValue as number) - (aValue as number);\n      }\n    });\n\n  // DADOS OTIMIZADOS: Paginação no servidor + filtros finos no cliente\n  const paginatedLicenses = filteredLicenses;\n  \n  // Reset para primeira página quando filtros mudam\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm, statusFilter, stateFilter, transporterFilter, transporterSearchTerm, dateFilter]);\n\n  // Função removida pois o status agora só será editado por estado individual\n\n  const handleViewDetails = (license: LicenseRequest) => {\n    console.log(\"Detalhes da licença:\", license);\n    setSelectedLicense(license);\n    // Inicialmente, todos os estados têm o fluxo oculto\n    setVisibleStateFlows([]);\n    setLicenseDetailsOpen(true);\n  };\n\n  // Função removida pois o status agora só é editado por estado individual\n  \n  const handleStateStatusUpdate = (license: LicenseRequest, state: string) => {\n    setSelectedLicense(license);\n    setSelectedState(state);\n    \n    // Determinar o status atual deste estado\n    let currentStateStatus = \"pending\";\n    \n    // Parse dos stateStatuses (que são armazenados como \"ESTADO:STATUS:VALIDUNTIL:ISSUEDDAT\")\n    let currentValidUntil = \"\";\n    let currentIssuedAt = \"\";\n    \n    if (license.stateStatuses && license.stateStatuses.length > 0) {\n      const stateStatusEntry = license.stateStatuses.find(entry => entry.startsWith(`${state}:`));\n      if (stateStatusEntry) {\n        const parts = stateStatusEntry.split(':');\n        if (parts[1]) {\n          currentStateStatus = parts[1];\n        }\n        // Extrair data de validade (3ª parte)\n        if (parts[2]) {\n          currentValidUntil = parts[2];\n        }\n        // Extrair data de emissão específica do estado (4ª parte)\n        if (parts[3]) {\n          // Converter a data ISO para formato do input (YYYY-MM-DD)\n          try {\n            const issuedDate = new Date(parts[3]);\n            currentIssuedAt = issuedDate.toISOString().split('T')[0];\n          } catch (e) {\n            console.warn('Erro ao converter data de emissão do estado:', parts[3]);\n            currentIssuedAt = \"\";\n          }\n        }\n      }\n    }\n    \n    // NÃO usar a data global - cada estado deve ter sua própria data de emissão\n    \n    // Determinar o CNPJ específico para este estado\n    let currentStateCnpj = \"\";\n    if (license.stateCnpjs && license.stateCnpjs.length > 0) {\n      const stateCnpjEntry = license.stateCnpjs.find(entry => entry.startsWith(`${state}:`));\n      if (stateCnpjEntry) {\n        const [_, cnpj] = stateCnpjEntry.split(':');\n        if (cnpj) {\n          currentStateCnpj = cnpj;\n        }\n      }\n    }\n    \n    // Fallback para o CNPJ global se não houver CNPJ específico para o estado\n    if (!currentStateCnpj && license.selectedCnpj) {\n      currentStateCnpj = license.selectedCnpj;\n    }\n    \n    // Determinar o número da AET específico para este estado\n    let currentStateAetNumber = \"\";\n    if (license.stateAETNumbers && license.stateAETNumbers.length > 0) {\n      const stateAetEntry = license.stateAETNumbers.find(entry => entry.startsWith(`${state}:`));\n      if (stateAetEntry) {\n        const [_, aetNumber] = stateAetEntry.split(':');\n        if (aetNumber) {\n          currentStateAetNumber = aetNumber;\n        }\n      }\n    }\n    \n    // NÃO usar fallback para número AET global - cada estado deve ter seu próprio número\n    // Apenas usar o número AET se for específico para este estado\n    // currentStateAetNumber já foi extraído corretamente acima ou está vazio se não existir\n    \n    console.log('[Form Reset] Estado selecionado:', state);\n    console.log('[Form Reset] CNPJ atual do estado:', currentStateCnpj);\n    console.log('[Form Reset] stateCnpjs disponíveis:', license.stateCnpjs);\n    console.log('[Form Reset] stateStatuses disponíveis:', license.stateStatuses);\n    console.log('[Form Reset] Status atual:', currentStateStatus);\n    console.log('[Form Reset] Data de validade extraída:', currentValidUntil);\n    console.log('[Form Reset] Data de emissão extraída:', currentIssuedAt);\n    console.log('[Form Reset] Número AET final:', currentStateAetNumber);\n    \n    stateStatusForm.reset({\n      state: state,\n      status: currentStateStatus,\n      comments: \"\",\n      aetNumber: currentStateAetNumber, // Preservar o número da AET existente ou deixar vazio\n      selectedCnpj: currentStateCnpj, // Carregar o CNPJ específico do estado\n      licenseFile: undefined, // Resetar o campo de arquivo\n      validUntil: currentValidUntil, // Preservar a data de validade existente\n      issuedAt: currentIssuedAt, // Preservar a data de emissão existente\n    });\n    \n    setStateStatusDialogOpen(true);\n  };\n  \n  const onSubmitStateStatus = (data: z.infer<typeof updateStateStatusSchema>) => {\n    if (!selectedLicense) return;\n    \n    console.log('[Form Submit] Dados do formulário recebidos:', data);\n    console.log('[Form Submit] CNPJ selecionado:', data.selectedCnpj);\n    \n    // Validação adicional para o status \"approved\": exigir arquivo PDF e data de validade\n    if (data.status === \"approved\") {\n      if (!data.licenseFile) {\n        toast({\n          title: \"Erro de validação\",\n          description: \"Para o status 'Liberada' é obrigatório anexar um documento PDF da licença.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      if (!data.validUntil) {\n        toast({\n          title: \"Erro de validação\",\n          description: \"Para o status 'Liberada' é obrigatório definir uma data de validade.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    // Validação adicional para o status \"under_review\" ou \"pending_approval\": exigir número da AET\n    if (data.status === \"under_review\" || data.status === \"pending_approval\") {\n      if (!data.aetNumber) {\n        toast({\n          title: \"Erro de validação\",\n          description: `Para o status '${data.status === \"under_review\" ? \"Análise do Órgão\" : \"Pendente Liberação\"}' é obrigatório informar o número da AET.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    // Garantir que useEffect não crie conflitos durante o processamento\n    const licenseId = selectedLicense.id;\n    \n    console.log('[Form Submit] Enviando dados para backend:', { id: licenseId, data });\n    \n    updateStateStatusMutation.mutate({ \n      id: licenseId,\n      data\n    });\n  };\n  \n  // Função para excluir a licença selecionada\n  const handleDeleteLicense = () => {\n    if (!selectedLicense) return;\n    setDeleteDialogOpen(true);\n  };\n  \n  // Função para confirmar a exclusão da licença\n  const handleConfirmDelete = () => {\n    if (!selectedLicense) return;\n    deleteLicenseMutation.mutate(selectedLicense.id);\n  };\n  \n  // Função para fechar o diálogo de detalhes e limpar o estado\n  const handleCloseLicenseDetails = () => {\n    // Primeiro fechar o diálogo\n    setLicenseDetailsOpen(false);\n    // Depois de um pequeno atraso, limpar o estado selecionado\n    setTimeout(() => {\n      setSelectedLicense(null);\n      setVisibleStateFlows([]);\n    }, 100);\n  };\n\n  // Formatar data com tratamento de erros\n  const formatDate = (dateString: string | Date | undefined | null) => {\n    try {\n      if (!dateString) {\n        return \"Data não disponível\";\n      }\n      \n      let date;\n      if (typeof dateString === 'string') {\n        date = new Date(dateString);\n      } else {\n        date = dateString;\n      }\n      \n      if (!date || isNaN(date.getTime())) {\n        return \"Data inválida\";\n      }\n      \n      return new Intl.DateTimeFormat('pt-BR', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n      }).format(date);\n    } catch (error) {\n      console.error(\"Erro ao formatar data:\", error);\n      return \"Data indisponível\";\n    }\n  };\n\n  const handleExportCSV = () => {\n    if (!filteredLicenses || filteredLicenses.length === 0) {\n      toast({\n        title: \"Nenhum dado para exportar\",\n        description: \"Não há licenças para exportar\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const headers = [\n        \"ID\",\n        \"Número do Pedido\",\n        \"Tipo de Licença\",\n        \"Placa Principal\",\n        \"Status\",\n        \"Estados\",\n        \"Transportador\",\n        \"Data de Criação\",\n        \"Última Atualização\"\n      ];\n\n      const formattedData = filteredLicenses.map(license => ({\n        ID: license.id,\n        \"Número do Pedido\": license.requestNumber,\n        \"Tipo de Licença\": getLicenseTypeLabel(license.type),\n        \"Placa Principal\": license.mainVehiclePlate,\n        Status: license.status === \"pending_registration\" ? \"Pendente de Registro\" :\n                license.status === \"registration_in_progress\" ? \"Registro em Andamento\" :\n                license.status === \"pending_documentation\" ? \"Pendente Documentação\" :\n                license.status === \"under_review\" ? \"Em Análise\" :\n                license.status === \"pending_approval\" ? \"Pendente de Aprovação\" :\n                license.status === \"approved\" ? \"Aprovado\" :\n                license.status === \"rejected\" ? \"Rejeitado\" :\n                license.status === \"canceled\" ? \"Cancelado\" : license.status,\n        Estados: license.states.join(\", \"),\n        Transportador: (() => {\n          const transporter = transporters.find(t => t.id === license.transporterId);\n          return transporter?.name || transporter?.tradeName || `ID: ${license.transporterId}`;\n        })(),\n        \"Data de Criação\": formatDateForCSV(license.createdAt),\n        \"Última Atualização\": formatDateForCSV(license.updatedAt)\n      }));\n\n      exportToCSV({\n        filename: \"licencas\",\n        headers,\n        data: formattedData\n      });\n\n      toast({\n        title: \"Exportação concluída\",\n        description: `${filteredLicenses.length} licenças exportadas com sucesso`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro na exportação\",\n        description: \"Ocorreu um erro ao exportar os dados\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Opções de status para o select com descrições detalhadas\n  const statusOptions = [\n    { value: \"pending_registration\", label: \"Pedido em Cadastramento\", description: \"Status inicial do pedido\" },\n    { value: \"registration_in_progress\", label: \"Cadastro em Andamento\", description: \"Em fase de edição pelo usuário\" },\n    { value: \"pending_documentation\", label: \"Pendente Documentação\", description: \"Aguardando documentos pendentes\" },\n    { value: \"rejected\", label: \"Reprovado\", description: \"Com justificativa de pendências\" },\n    { value: \"under_review\", label: \"Análise do Órgão\", description: \"Em avaliação oficial\" },\n    { value: \"pending_approval\", label: \"Pendente Liberação\", description: \"Aguardando aprovação final\" },\n    { value: \"approved\", label: \"Liberada\", description: \"Licença aprovada com documento disponível\" },\n    { value: \"canceled\", label: \"Cancelado\", description: \"Licença cancelada pelo cliente ou pelo sistema\" },\n  ];\n\n  return (\n    <AdminLayout>\n      <div className=\"container mx-auto py-4 px-3 md:px-6 md:py-6\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-4 md:mb-6\">\n          <div className=\"flex flex-col\">\n            <div className=\"flex items-center gap-3\">\n              <h1 className=\"text-2xl md:text-3xl font-bold tracking-tight leading-tight\">Licenças</h1>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-9 bg-white\"\n                  onClick={handleExportCSV}\n                  disabled={isLoading}\n                  title=\"Exportar dados das licenças\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Exportar\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className={`h-9 bg-white ${isConnected ? 'border-green-200' : 'border-gray-200'}`}\n                  onClick={handleRefresh}\n                  disabled={isRefreshing || isLoading}\n                  title={`Atualizar lista de licenças ${isConnected ? '(Tempo real ativo)' : '(Offline)'}`}\n                >\n                  <div className=\"flex items-center\">\n                    {isRefreshing ? (\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    )}\n                    {isConnected && (\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\" title=\"Conectado em tempo real\" />\n                    )}\n                  </div>\n                  {isRefreshing ? 'Atualizando...' : 'Atualizar'}\n                </Button>\n              </div>\n            </div>\n            <p className=\"text-sm md:text-base text-muted-foreground mt-1\">\n              Gerencie todas as licenças no sistema.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col space-y-4\">\n          <Card>\n            <CardContent className=\"pt-4 px-3 md:pt-6 md:px-6\">\n              {/* Novo layout de pesquisa conforme mockup, similar ao da página \"Acompanhar Licença\" */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3 md:gap-4 mb-5\">\n                <div>\n                  <div className=\"flex flex-col space-y-1\">\n                    <Label htmlFor=\"license-search\" className=\"text-sm\">Pesquisar</Label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-2.5 top-2.5 h-3.5 w-3.5 text-gray-500\" />\n                      <Input\n                        id=\"license-search\"\n                        placeholder=\"Nº do pedido ou placa...\"\n                        className=\"pl-8 h-9 text-sm\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex flex-col space-y-1\">\n                    <Label htmlFor=\"status-filter\" className=\"text-sm\">Status</Label>\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger id=\"status-filter\" className=\"h-9 text-sm\">\n                        <SelectValue placeholder=\"Todos os status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todos os status</SelectItem>\n                        {statusOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            <StatusBadge status={option.value} />\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex flex-col space-y-1\">\n                    <Label htmlFor=\"state-filter\" className=\"text-sm\">Estado</Label>\n                    <Select value={stateFilter} onValueChange={setStateFilter}>\n                      <SelectTrigger id=\"state-filter\" className=\"h-9 text-sm\">\n                        <SelectValue placeholder=\"Todos os estados\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all_states\">Todos os estados</SelectItem>\n                        {brazilianStates.map((state) => (\n                          <SelectItem key={state.code} value={state.code}>\n                            {state.code} - {state.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex flex-col space-y-1\">\n                    <Label htmlFor=\"date-filter\" className=\"text-sm\">Data</Label>\n                    <Input\n                      id=\"date-filter\"\n                      type=\"date\"\n                      className=\"h-9 text-sm\"\n                      value={dateFilter}\n                      onChange={(e) => setDateFilter(e.target.value)}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"md:col-span-4\">\n                  <div className=\"flex flex-col space-y-1\">\n                    <Label htmlFor=\"transporter-search\" className=\"text-sm\">Transportador</Label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        id=\"transporter-search\"\n                        type=\"text\"\n                        placeholder=\"Digite o nome, CNPJ ou CPF do transportador\"\n                        value={transporterSearchTerm}\n                        onChange={(e) => setTransporterSearchTerm(e.target.value)}\n                        className=\"pl-10 h-9 text-sm\"\n                      />\n                      {transporterSearchTerm && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setTransporterSearchTerm(\"\")}\n                          className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-7 w-7 p-0 hover:bg-gray-100\"\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {isLoading ? (\n                <div className=\"flex justify-center items-center h-60\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                </div>\n              ) : (\n                <>\n                  {/* Visão Desktop */}\n                  <div className=\"hidden md:block\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead \n                            className=\"cursor-pointer hover:bg-gray-50\"\n                            onClick={() => {\n                              if (sortField === 'requestNumber') {\n                                setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                              } else {\n                                setSortField('requestNumber');\n                                setSortDirection('asc');\n                              }\n                            }}\n                          >\n                            <div className=\"flex items-center\">\n                              Nº Solicitação\n                              {sortField === 'requestNumber' && (\n                                <span className=\"ml-1\">\n                                  {sortDirection === 'asc' ? '↑' : '↓'}\n                                </span>\n                              )}\n                            </div>\n                          </TableHead>\n                          <TableHead\n                            className=\"cursor-pointer hover:bg-gray-50\"\n                            onClick={() => {\n                              if (sortField === 'type') {\n                                setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                              } else {\n                                setSortField('type');\n                                setSortDirection('asc');\n                              }\n                            }}\n                          >\n                            <div className=\"flex items-center\">\n                              Tipo\n                              {sortField === 'type' && (\n                                <span className=\"ml-1\">\n                                  {sortDirection === 'asc' ? '↑' : '↓'}\n                                </span>\n                              )}\n                            </div>\n                          </TableHead>\n                          <TableHead\n                            className=\"cursor-pointer hover:bg-gray-50\"\n                            onClick={() => {\n                              if (sortField === 'mainVehiclePlate') {\n                                setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                              } else {\n                                setSortField('mainVehiclePlate');\n                                setSortDirection('asc');\n                              }\n                            }}\n                          >\n                            <div className=\"flex items-center\">\n                              Veículo Principal\n                              {sortField === 'mainVehiclePlate' && (\n                                <span className=\"ml-1\">\n                                  {sortDirection === 'asc' ? '↑' : '↓'}\n                                </span>\n                              )}\n                            </div>\n                          </TableHead>\n                          <TableHead>Transportador</TableHead>\n                          <TableHead>Estados</TableHead>\n                          <TableHead\n                            className=\"cursor-pointer hover:bg-gray-50\"\n                            onClick={() => {\n                              if (sortField === 'status') {\n                                setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                              } else {\n                                setSortField('status');\n                                setSortDirection('asc');\n                              }\n                            }}\n                          >\n                            <div className=\"flex items-center\">\n                              Status\n                              {sortField === 'status' && (\n                                <span className=\"ml-1\">\n                                  {sortDirection === 'asc' ? '↑' : '↓'}\n                                </span>\n                              )}\n                            </div>\n                          </TableHead>\n                          <TableHead\n                            className=\"cursor-pointer hover:bg-gray-50\"\n                            onClick={() => {\n                              if (sortField === 'createdAt') {\n                                setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                              } else {\n                                setSortField('createdAt');\n                                setSortDirection('desc'); // Padrão decrescente para datas\n                              }\n                            }}\n                          >\n                            <div className=\"flex items-center\">\n                              Data de Solicitação\n                              {sortField === 'createdAt' && (\n                                <span className=\"ml-1\">\n                                  {sortDirection === 'asc' ? '↑' : '↓'}\n                                </span>\n                              )}\n                            </div>\n                          </TableHead>\n                          <TableHead className=\"text-right\">Ações</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredLicenses.length === 0 ? (\n                          <TableRow>\n                            <TableCell colSpan={8} className=\"text-center py-6\">\n                              Nenhuma licença encontrada\n                            </TableCell>\n                          </TableRow>\n                        ) : (\n                          (paginatedLicenses as LicenseRequest[]).map((license) => (\n                            <TableRow key={license.id}>\n                              <TableCell className=\"font-medium\">{license.requestNumber}</TableCell>\n                              <TableCell>\n                                {getLicenseTypeLabel(license.type)}\n                              </TableCell>\n                              <TableCell>{license.mainVehiclePlate}</TableCell>\n                              <TableCell>\n                                {license.transporterId ? (\n                                  <TransporterWithSubsidiaries \n                                    transporterId={license.transporterId} \n                                    compact={true}\n                                  />\n                                ) : (\n                                  <div className=\"text-sm text-gray-500\">Sem transportador</div>\n                                )}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {license.states.map((state, idx) => {\n                                    // Encontrar o status atual deste estado\n                                    let stateStatus = \"pending\";\n                                    if (license.stateStatuses && license.stateStatuses.length > 0) {\n                                      const stateStatusEntry = license.stateStatuses.find(entry => entry.startsWith(`${state}:`));\n                                      if (stateStatusEntry) {\n                                        const [_, status] = stateStatusEntry.split(':');\n                                        if (status) {\n                                          stateStatus = status;\n                                        }\n                                      }\n                                    }\n                                    \n                                    // Definir cores baseadas no status - seguindo o padrão do StatusBadge\n                                    let badgeClass = \"bg-gray-100 border-gray-200 text-gray-800\"; // default/pending\n                                    switch (stateStatus) {\n                                      case \"approved\":\n                                      case \"released\":\n                                        badgeClass = \"bg-green-100 border-green-200 text-green-800\";\n                                        break;\n                                      case \"rejected\":\n                                        badgeClass = \"bg-red-100 border-red-200 text-red-800\";\n                                        break;\n                                      case \"pending_approval\":\n                                      case \"pending_release\":\n                                        badgeClass = \"bg-purple-100 border-purple-200 text-purple-800\";\n                                        break;\n                                      case \"in_progress\":\n                                      case \"registration_in_progress\":\n                                        badgeClass = \"bg-blue-100 border-blue-200 text-blue-800\";\n                                        break;\n                                      case \"pending_documentation\":\n                                        badgeClass = \"bg-orange-100 border-orange-200 text-orange-800\";\n                                        break;\n                                      case \"analyzing\":\n                                      case \"under_review\":\n                                        badgeClass = \"bg-yellow-100 border-yellow-200 text-yellow-800\";\n                                        break;\n                                      case \"canceled\":\n                                        badgeClass = \"bg-[#FFEDED] border-[#B22222] text-[#B22222]\";\n                                        break;\n                                      case \"pending\":\n                                      case \"pending_registration\":\n                                      default:\n                                        badgeClass = \"bg-gray-100 border-gray-200 text-gray-800\";\n                                        break;\n                                    }\n                                    \n                                    return (\n                                      <Badge key={idx} variant=\"outline\" className={`text-xs ${badgeClass}`}>\n                                        {state}\n                                      </Badge>\n                                    );\n                                  })}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center\">\n                                  <StatusBadge status={license.status} />\n                                </div>\n                              </TableCell>\n                              <TableCell>{formatDate(license.createdAt)}</TableCell>\n                              <TableCell className=\"text-right\">\n                                <div className=\"flex justify-end gap-2\">\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleViewDetails(license)}\n                                    className=\"flex items-center\"\n                                  >\n                                    <Pencil className=\"h-4 w-4 mr-1\" />\n                                    Detalhes\n                                  </Button>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))\n                        )}\n                      </TableBody>\n                    </Table>\n                  </div>\n\n                  {/* Visão Mobile (Cards) */}\n                  <div className=\"grid grid-cols-1 gap-4 md:hidden\">\n                    {paginatedLicenses.length === 0 ? (\n                      <div className=\"text-center py-6 text-gray-500\">\n                        Nenhuma licença encontrada\n                      </div>\n                    ) : (\n                      (paginatedLicenses as LicenseRequest[]).map((license) => (\n                        <Card key={license.id} className=\"overflow-hidden\">\n                          <CardContent className=\"p-3\">\n                            <div className=\"flex flex-col gap-1.5\">\n                              <div className=\"flex justify-between items-start\">\n                                <div>\n                                  <h3 className=\"font-medium text-base\">{license.requestNumber}</h3>\n                                  <p className=\"text-xs text-gray-500\">\n                                    {getLicenseTypeLabel(license.type)}\n                                  </p>\n                                </div>\n                                <StatusBadge status={license.status} />\n                              </div>\n                              \n                              <div className=\"mt-1.5 space-y-1\">\n                                <div className=\"flex items-center text-xs\">\n                                  <span className=\"font-medium min-w-[70px]\">Veículo:</span> \n                                  <span className=\"truncate\">{license.mainVehiclePlate}</span>\n                                </div>\n                                <div className=\"flex items-start text-xs\">\n                                  <span className=\"font-medium min-w-[70px] mt-0.5\">Transportador:</span>\n                                  <span className=\"truncate\">\n                                    <TransporterInfo transporterId={license.transporterId} compact={true} />\n                                  </span>\n                                </div>\n                                <div className=\"flex items-center text-xs\">\n                                  <span className=\"font-medium min-w-[70px]\">Data:</span> \n                                  <span>{formatDate(license.createdAt)}</span>\n                                </div>\n                                <div className=\"mt-1\">\n                                  <span className=\"text-xs font-medium\">Estados:</span>\n                                  <div className=\"flex flex-wrap gap-1 mt-1\">\n                                    {license.states.map((state, idx) => {\n                                      // Encontrar o status atual deste estado\n                                      let stateStatus = \"pending\";\n                                      if (license.stateStatuses && license.stateStatuses.length > 0) {\n                                        const stateStatusEntry = license.stateStatuses.find(entry => entry.startsWith(`${state}:`));\n                                        if (stateStatusEntry) {\n                                          const [_, status] = stateStatusEntry.split(':');\n                                          if (status) {\n                                            stateStatus = status;\n                                          }\n                                        }\n                                      }\n                                      \n                                      // Definir cores baseadas no status\n                                      let badgeClass = \"bg-gray-100 border-gray-200 text-gray-800\";\n                                      if (stateStatus === \"approved\") {\n                                        badgeClass = \"bg-green-50 border-green-200 text-green-800\";\n                                      } else if (stateStatus === \"rejected\") {\n                                        badgeClass = \"bg-red-50 border-red-200 text-red-800\";\n                                      } else if (stateStatus === \"pending_approval\") {\n                                        badgeClass = \"bg-yellow-50 border-yellow-200 text-yellow-800\";\n                                      } else if (stateStatus === \"under_review\") {\n                                        badgeClass = \"bg-blue-50 border-blue-200 text-blue-800\";\n                                      }\n                                      \n                                      return (\n                                        <Badge key={idx} variant=\"outline\" className={`text-[10px] px-1.5 py-0.5 ${badgeClass}`}>\n                                          {state}\n                                        </Badge>\n                                      );\n                                    })}\n                                  </div>\n                                </div>\n                              </div>\n\n                              <div className=\"flex justify-center mt-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleViewDetails(license)}\n                                  className=\"flex items-center h-8 text-xs\"\n                                >\n                                  <Pencil className=\"h-3.5 w-3.5 mr-1\" />\n                                  Detalhes\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </>\n              )}\n\n              {/* PAGINAÇÃO OTIMIZADA PARA 50K+ REGISTROS */}\n              {pagination && pagination.total > 0 && (\n                  <div className=\"mt-6 flex flex-col sm:flex-row gap-4 items-center justify-between\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Mostrando {((pagination.page - 1) * pagination.limit) + 1} a {Math.min(pagination.page * pagination.limit, pagination.total)} de {pagination.total} licenças\n                      {response.performance && (\n                        <span className=\"ml-2 text-green-600 font-mono\">\n                          {response.performance.executionTime}ms\n                        </span>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <select \n                        value={pageSize} \n                        onChange={(e) => setPageSize(parseInt(e.target.value))}\n                        className=\"border rounded px-2 py-1 text-sm\"\n                      >\n                        <option value={10}>10 por página</option>\n                        <option value={25}>25 por página</option>\n                        <option value={50}>50 por página</option>\n                        <option value={100}>100 por página</option>\n                      </select>\n                      \n                      <div className=\"flex items-center gap-1\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(1)}\n                          disabled={!pagination.hasPrev}\n                        >\n                          ««\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(currentPage - 1)}\n                          disabled={!pagination.hasPrev}\n                        >\n                          ‹\n                        </Button>\n                        <span className=\"text-sm px-3\">\n                          {currentPage} de {pagination.totalPages}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(currentPage + 1)}\n                          disabled={!pagination.hasNext}\n                        >\n                          ›\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(pagination.totalPages)}\n                          disabled={!pagination.hasNext}\n                        >\n                          »»\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              \n              {/* Controles de paginação - Versão mobile */}\n              {pagination && pagination.total > 0 && (\n                <div className=\"block md:hidden mt-6\">\n                  <MobileListPagination\n                    currentPage={currentPage}\n                    totalPages={pagination.totalPages}\n                    totalItems={pagination.total}\n                    itemsPerPage={pageSize}\n                    hasPrev={pagination.hasPrev}\n                    hasNext={pagination.hasNext}\n                    startItem={((pagination.page - 1) * pagination.limit) + 1}\n                    endItem={Math.min(pagination.page * pagination.limit, pagination.total)}\n                    onPageChange={setCurrentPage}\n                  />\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* O diálogo para atualizar status foi removido pois o status agora só é editado por estado individual */}\n\n      {/* Diálogo para atualizar status por estado */}\n      <Dialog open={stateStatusDialogOpen} onOpenChange={setStateStatusDialogOpen}>\n        <DialogContent className=\"w-full max-w-4xl mx-auto overflow-y-auto max-h-[90vh]\">\n          <DialogHeader>\n            <DialogTitle>Editar Status do Estado {selectedState}</DialogTitle>\n            <DialogDescription>\n              Atualize as informações da licença para este estado\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...stateStatusForm}>\n            <div className=\"mb-4 p-3 bg-gray-50 rounded-md border border-gray-200\">\n              <h4 className=\"font-medium text-sm mb-2\">Guia de Fluxo de Status:</h4>\n              <ul className=\"text-sm space-y-1\">\n                <li><span className=\"font-semibold\">Pedido em Cadastramento:</span> Status inicial do pedido</li>\n                <li><span className=\"font-semibold\">Cadastro em Andamento:</span> Em fase de edição pelo usuário</li>\n                <li><span className=\"font-semibold\">Reprovado:</span> Com justificativa de pendências</li>\n                <li><span className=\"font-semibold\">Análise do Órgão:</span> Em avaliação oficial</li>\n                <li><span className=\"font-semibold\">Pendente Liberação:</span> Aguardando aprovação final</li>\n                <li><span className=\"font-semibold\">Liberada:</span> Licença aprovada com documento disponível</li>\n                <li><span className=\"font-semibold\">Cancelado:</span> Licença cancelada pelo cliente ou pelo sistema</li>\n              </ul>\n            </div>\n            <form onSubmit={stateStatusForm.handleSubmit(onSubmitStateStatus)} className=\"space-y-6\">\n              {/* Campo Transportador */}\n              <div className=\"mb-4\">\n                <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">Solicitante</FormLabel>\n                {selectedLicense?.transporterId ? (\n                  <TransporterWithSubsidiaries \n                    transporterId={selectedLicense.transporterId} \n                    compact={false}\n                  />\n                ) : (\n                  <div className=\"text-sm text-gray-500 p-3 border border-gray-200 rounded-lg\">\n                    Nenhum transportador vinculado\n                  </div>\n                )}\n              </div>\n\n              {/* Campo CNPJ Cadastrado */}\n              {selectedLicense?.transporterId && (\n                <FormField\n                  control={stateStatusForm.control}\n                  name=\"selectedCnpj\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        CNPJ Transportador <span className=\"text-red-500\">*</span>\n                      </FormLabel>\n                      <TransporterCnpjSelector \n                        transporterId={selectedLicense.transporterId!}\n                        selectedCnpj={field.value}\n                        licenseId={selectedLicense.id}\n                        state={selectedState}\n                        onCnpjSelect={(cnpj, label) => {\n                          console.log('[Form] CNPJ selecionado para estado:', selectedState, cnpj);\n                          field.onChange(cnpj);\n                        }}\n                      />\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={stateStatusForm.control}\n                  name=\"state\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Estado</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value} disabled>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um estado\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {brazilianStates.map((state) => (\n                            <SelectItem key={state.code} value={state.code}>\n                              {state.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={stateStatusForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {statusOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={stateStatusForm.control}\n                name=\"comments\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Comentários (opcional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Adicione comentários sobre a atualização do status\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Campo para Número de AET quando status for Análise do Órgão, Pendente Liberação ou Liberada */}\n              {(stateStatusForm.watch(\"status\") === \"under_review\" || \n                stateStatusForm.watch(\"status\") === \"pending_approval\" || \n                stateStatusForm.watch(\"status\") === \"approved\") && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium text-sm text-gray-800 mt-2 border-t pt-4\">\n                    {stateStatusForm.watch(\"status\") === \"under_review\" && \"Informações para Análise do Órgão\"}\n                    {stateStatusForm.watch(\"status\") === \"pending_approval\" && \"Informações para Pendente Liberação\"}\n                    {stateStatusForm.watch(\"status\") === \"approved\" && \"Número da AET\"}\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-4\">\n                    <FormField\n                      control={stateStatusForm.control}\n                      name=\"aetNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            Número da AET para {selectedState} <span className=\"text-red-500\">*</span>\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder={`Digite o número da AET para ${selectedState}`}\n                              {...field}\n                              className=\"w-full\"\n                              onChange={(e) => {\n                                field.onChange(e);\n                                // Validar unicidade em tempo real\n                                if (selectedLicense && e.target.value) {\n                                  const error = validateAetNumberUniqueness(e.target.value, selectedState, selectedLicense);\n                                  setAetNumberValidationError(error || \"\");\n                                } else {\n                                  setAetNumberValidationError(\"\");\n                                }\n                              }}\n                            />\n                          </FormControl>\n                          {aetNumberValidationError && (\n                            <p className=\"text-xs text-red-600 mt-1\">\n                              ⚠️ {aetNumberValidationError}\n                            </p>\n                          )}\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Número único para este estado específico\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              {/* Campo de upload de arquivo PDF para status \"Liberada\" */}\n              {stateStatusForm.watch(\"status\") === \"approved\" && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium text-sm text-gray-800 mt-2 border-t pt-4\">Informações para Licença Liberada</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={stateStatusForm.control}\n                      name=\"issuedAt\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            Data de Emissão <span className=\"text-red-500\">*</span>\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              value={field.value || \"\"}\n                              onChange={field.onChange}\n                              onBlur={field.onBlur}\n                              name={field.name}\n                              max={new Date().toISOString().split('T')[0]}\n                              className=\"w-full\"\n                            />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Data de emissão obrigatória para liberação\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={stateStatusForm.control}\n                      name=\"validUntil\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            Vencimento da Licença <span className=\"text-red-500\">*</span>\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              value={field.value || \"\"}\n                              onChange={field.onChange}\n                              onBlur={field.onBlur}\n                              name={field.name}\n                              min={new Date().toISOString().split('T')[0]}\n                              className=\"w-full\"\n                            />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Data de vencimento obrigatória para liberação\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-4\">\n                    <FormField\n                      control={stateStatusForm.control}\n                      name=\"licenseFile\"\n                      render={({ field: { value, onChange, ...field } }) => (\n                        <FormItem>\n                          <FormLabel>\n                            Upload Licença para {selectedState} <span className=\"text-red-500\">*</span>\n                          </FormLabel>\n                          <div \n                            className=\"mt-1 flex justify-center px-4 pt-4 pb-5 border-2 border-gray-300 border-dashed rounded-md\"\n                            onDragOver={(e) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                            }}\n                            onDrop={(e) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                              const files = e.dataTransfer.files;\n                              if (files && files[0]) {\n                                onChange(files[0]);\n                              }\n                            }}\n                          >\n                            <div className=\"space-y-1 text-center\">\n                              <UploadCloud className=\"mx-auto h-10 w-10 text-gray-400\" />\n                              <div className=\"flex text-sm text-gray-600\">\n                                <label\n                                  htmlFor=\"licenseFile\"\n                                  className=\"relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none\"\n                                >\n                                  <span>Carregar arquivo</span>\n                                  <input\n                                    id=\"licenseFile\"\n                                    type=\"file\"\n                                    className=\"sr-only\"\n                                    accept=\".pdf,application/pdf\"\n                                    onChange={(e) => {\n                                      const file = e.target.files?.[0];\n                                      onChange(file);\n                                    }}\n                                    {...field}\n                                  />\n                                </label>\n                                <p className=\"pl-1\">ou arraste e solte</p>\n                              </div>\n                              <p className=\"text-xs text-gray-500\">\n                                PDF até 10MB\n                              </p>\n                              {value && (\n                                <p className=\"text-sm text-green-600\">\n                                  Arquivo selecionado: {value.name}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Arquivo PDF específico para o estado {selectedState}\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              {/* Campo de upload de arquivo PDF para status \"Reprovado\" */}\n              {stateStatusForm.watch(\"status\") === \"rejected\" && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium text-sm text-gray-800 mt-2 border-t pt-4\">Informações para Licença Reprovada</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={stateStatusForm.control}\n                      name=\"comments\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            Motivo da Reprovação <span className=\"text-red-500\">*</span>\n                          </FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Detalhe os motivos da reprovação\"\n                              className=\"min-h-[100px]\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Informações sobre o motivo da reprovação\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={stateStatusForm.control}\n                      name=\"licenseFile\"\n                      render={({ field: { value, onChange, ...field } }) => (\n                        <FormItem>\n                          <FormLabel>\n                            Upload Documento de Reprovação <span className=\"text-red-500\">*</span>\n                          </FormLabel>\n                          <div \n                            className=\"mt-1 flex justify-center px-4 pt-4 pb-5 border-2 border-gray-300 border-dashed rounded-md\"\n                            onDragOver={(e) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                            }}\n                            onDrop={(e) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                              const files = e.dataTransfer.files;\n                              if (files && files[0]) {\n                                onChange(files[0]);\n                              }\n                            }}\n                          >\n                            <div className=\"space-y-1 text-center\">\n                              <UploadCloud className=\"mx-auto h-10 w-10 text-gray-400\" />\n                              <div className=\"flex text-sm text-gray-600\">\n                                <label\n                                  htmlFor=\"licenseFile-rejected\"\n                                  className=\"relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none\"\n                                >\n                                  <span>Carregar arquivo</span>\n                                  <input\n                                    id=\"licenseFile-rejected\"\n                                    type=\"file\"\n                                    className=\"sr-only\"\n                                    accept=\".pdf,application/pdf\"\n                                    onChange={(e) => {\n                                      const file = e.target.files?.[0];\n                                      onChange(file);\n                                    }}\n                                    {...field}\n                                  />\n                                </label>\n                                <p className=\"pl-1\">ou arraste e solte</p>\n                              </div>\n                              <p className=\"text-xs text-gray-500\">\n                                PDF até 10MB\n                              </p>\n                              {value && (\n                                <p className=\"text-sm text-green-600\">\n                                  Arquivo selecionado: {value.name}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Documento com razões da reprovação\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              )}\n              <div className=\"mt-6 flex flex-col sm:flex-row justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setStateStatusDialogOpen(false);\n                    setAetNumberValidationError(\"\");\n                    stateStatusForm.reset();\n                  }}\n                  disabled={updateStateStatusMutation.isPending}\n                  className=\"w-full sm:w-auto\"\n                >\n                  Cancelar\n                </Button>\n                <button \n                  type=\"submit\" \n                  disabled={\n                    updateStateStatusMutation.isPending || \n                    !!aetNumberValidationError ||\n                    ((stateStatusForm.watch(\"status\") === \"under_review\" || \n                      stateStatusForm.watch(\"status\") === \"pending_approval\" || \n                      stateStatusForm.watch(\"status\") === \"approved\") && \n                     !stateStatusForm.watch(\"aetNumber\"))\n                  }\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium text-sm w-full sm:w-auto flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    stateStatusForm.handleSubmit(onSubmitStateStatus)();\n                  }}\n                >\n                  {updateStateStatusMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Salvar\n                </button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Diálogo para ver detalhes da licença */}\n      <Dialog open={licenseDetailsOpen} onOpenChange={handleCloseLicenseDetails}>\n        <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto p-4 sm:p-6\">\n          <DialogHeader className=\"pb-2\">\n            <DialogTitle className=\"text-xl\">Detalhes da Licença</DialogTitle>\n            <DialogDescription>\n              Visualize todos os detalhes da licença\n            </DialogDescription>\n          </DialogHeader>\n          {selectedLicense && (\n            <div className=\"space-y-4\">\n              <div className=\"mb-4 p-3 bg-gray-50 rounded-md border border-gray-200 overflow-x-auto\">\n                <h4 className=\"font-medium text-sm mb-2\">Fluxo de Progresso da Licença:</h4>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"text-sm font-medium text-gray-500\">Status atual:</div>\n                  <StatusBadge status={selectedLicense.status} licenseId={selectedLicense.id} />\n                </div>\n                <ProgressFlow \n                  currentStatus={selectedLicense.status} \n                  size=\"md\" \n                  licenseId={selectedLicense.id}\n                />\n              </div>\n              \n              {/* Tabs para separar o conteúdo */}\n              <Tabs defaultValue=\"details\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"details\">Detalhes da Licença</TabsTrigger>\n                  <TabsTrigger value=\"states\">Status por Estado</TabsTrigger>\n                </TabsList>\n                \n                {/* Aba de Detalhes */}\n                <TabsContent value=\"details\" className=\"pt-4\">\n                  {/* Utilizando o componente LicenseDetailsCard para exibição dos detalhes */}\n                  <LicenseDetailsCard license={selectedLicense} />\n                  \n                  {/* Campo de Observações */}\n                  {selectedLicense.comments && selectedLicense.comments.trim() && (\n                    <div className=\"mt-4\">\n                      <h3 className=\"text-sm font-medium text-gray-500\">Observações</h3>\n                      <div className=\"mt-1 p-3 bg-gray-50 border border-gray-200 rounded-md\">\n                        <p className=\"text-gray-900 text-sm whitespace-pre-wrap\">{selectedLicense.comments}</p>\n                      </div>\n                    </div>\n                  )}\n                </TabsContent>\n                \n                {/* Aba de Status por Estado */}\n                <TabsContent value=\"states\" className=\"pt-4\">\n                  <div className=\"bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200\">\n                    <h3 className=\"font-semibold text-base text-gray-700 mb-3 flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-2 text-blue-600\" />\n                      Status por Estado\n                    </h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {selectedLicense.states.map((state) => {\n                    // Encontrar o status atual deste estado\n                    let stateStatus = \"pending\";\n                    if (selectedLicense.stateStatuses && selectedLicense.stateStatuses.length > 0) {\n                      const stateStatusEntry = selectedLicense.stateStatuses.find(entry => entry.startsWith(`${state}:`));\n                      if (stateStatusEntry) {\n                        const [_, status] = stateStatusEntry.split(':');\n                        if (status) {\n                          stateStatus = status;\n                        }\n                      }\n                    }\n                    \n                    // Definir cores baseadas no status\n                    let borderColor = \"border-gray-200\";\n                    if (stateStatus === \"approved\") {\n                      borderColor = \"border-green-200\";\n                    } else if (stateStatus === \"rejected\") {\n                      borderColor = \"border-red-200\";\n                    } else if (stateStatus === \"pending_approval\") {\n                      borderColor = \"border-yellow-200\";\n                    }\n                    \n                    return (\n                      <div \n                        key={state} \n                        className={`border-l-4 ${borderColor} rounded-md p-3 flex flex-col gap-2 bg-white shadow-sm hover:shadow-md transition-all duration-200`}\n                      >\n                        <div className=\"grid grid-cols-3 gap-2\">\n                          <div className=\"col-span-2 flex items-center gap-2\">\n                            <div className=\"bg-blue-50 text-blue-800 font-bold px-2 py-1 rounded text-sm min-w-[40px] text-center\">\n                              {state}\n                            </div>\n                            <StatusBadge \n                              status={stateStatus} \n                              licenseId={selectedLicense.id}\n                              state={state}\n                            />\n                          </div>\n                          <div className=\"col-span-1 flex items-center justify-end gap-1\">\n                            <Button \n                              size=\"icon\"\n                              variant=\"outline\"\n                              className=\"h-8 w-8 rounded-full border-blue-200 hover:bg-blue-50\"\n                              onClick={() => {\n                                // Encontrar o estado no array de estados visíveis e alternar\n                                const stateFlowVisible = visibleStateFlows.includes(state);\n                                if (stateFlowVisible) {\n                                  setVisibleStateFlows(visibleStateFlows.filter(s => s !== state));\n                                } else {\n                                  setVisibleStateFlows([...visibleStateFlows, state]);\n                                }\n                              }}\n                              title={visibleStateFlows.includes(state) ? \"Ocultar progresso\" : \"Mostrar progresso\"}\n                            >\n                              {visibleStateFlows.includes(state) ? \n                                <Eye className=\"h-4 w-4 text-blue-600\" /> : \n                                <EyeOff className=\"h-4 w-4 text-gray-600\" />\n                              }\n                            </Button>\n                            <Button \n                              size=\"icon\"\n                              variant=\"outline\"\n                              className=\"h-8 w-8 rounded-full border-green-200 hover:bg-green-50\"\n                              onClick={() => handleStateStatusUpdate(selectedLicense, state)}\n                              title=\"Atualizar status\"\n                            >\n                              <Pencil className=\"h-4 w-4 text-green-600\" />\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        {/* Fluxo de Progresso do Estado */}\n                        {visibleStateFlows.includes(state) && (\n                          <div className=\"mt-2 pt-2 overflow-x-auto bg-gray-50 rounded-md p-2 border border-gray-100\">\n                            <StateProgressFlow \n                              stateStatus={stateStatus} \n                              size=\"sm\" \n                              className=\"py-1\"\n                              licenseId={selectedLicense.id}\n                              state={state}\n                            />\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n                </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                {selectedLicense.comments && (\n                  <div className=\"bg-gray-50 p-3 rounded-md\">\n                    <h3 className=\"font-medium text-sm text-gray-500 mb-2\">Comentários</h3>\n                    <div className=\"bg-white p-3 rounded border text-sm max-h-28 overflow-y-auto\">\n                      {selectedLicense.comments}\n                    </div>\n                  </div>\n                )}\n\n\n              </div>\n\n              <div className=\"flex justify-center items-center gap-4 mt-6 mb-2\">\n                <div className=\"bg-gray-50 rounded-md px-8 py-3 shadow-sm mx-auto\">\n                  <Button \n                    onClick={handleCloseLicenseDetails}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-2 rounded-md\"\n                  >\n                    <X className=\"h-4 w-4 mr-2\" />\n                    Fechar detalhes\n                  </Button>\n                </div>\n                \n                {/* Botão de excluir licença - não visível para usuários operacionais */}\n                {!isOperational && (\n                  <div className=\"bg-gray-50 rounded-md px-8 py-3 shadow-sm mx-auto\">\n                    <Button \n                      onClick={handleDeleteLicense}\n                      variant=\"destructive\"\n                      className=\"px-8 py-2 rounded-md\"\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Excluir Licença\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n      \n      {/* Diálogo de confirmação de exclusão */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Excluir Licença</AlertDialogTitle>\n            <AlertDialogDescription>\n              Você tem certeza que deseja excluir esta licença?\n              Esta ação não pode ser desfeita e todos os dados associados serão perdidos.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteLicenseMutation.isPending}\n            >\n              {deleteLicenseMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Excluindo...\n                </>\n              ) : (\n                \"Excluir\"\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </AdminLayout>\n  );\n}","size_bytes":98158},"client/src/pages/issued-licenses-page.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Input } from \"@/components/ui/input\";\nimport { RefreshCw, Loader2 } from \"lucide-react\";\nimport { useWebSocketContext } from \"@/hooks/use-websocket-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { LicenseRequest, LicenseStatus } from \"@shared/schema\";\nimport { format, isAfter, isBefore, addDays, differenceInDays } from \"date-fns\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Pagination, \n  PaginationContent, \n  PaginationItem, \n  PaginationLink, \n  PaginationNext, \n  PaginationPrevious \n} from \"@/components/ui/pagination\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogTitle, \n  DialogHeader, \n  DialogDescription,\n  DialogFooter,\n  DialogClose\n} from \"@/components/ui/dialog\";\nimport { FileDown, ExternalLink, AlertCircle, CheckCircle2, Clock, RefreshCcw, Download } from \"lucide-react\";\nimport { formatDateForCSV, exportToCSV } from \"@/lib/csv-export\";\nimport { Status, StatusBadge } from \"@/components/licenses/status-badge\";\nimport { TransporterInfo } from \"@/components/transporters/transporter-info\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { SortableHeader } from \"@/components/ui/sortable-header\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { usePaginatedList } from \"@/hooks/use-paginated-list\";\nimport { ListPagination, MobileListPagination } from \"@/components/ui/list-pagination\";\n\n// Extensão do tipo LicenseRequest para incluir dados do transportador\ninterface LicenseRequestWithTransporter extends LicenseRequest {\n  transporter?: {\n    id: number;\n    name: string;\n    tradeName: string;\n    documentNumber: string;\n  } | null;\n}\n\n// Tipo para as licenças expandidas (uma linha por estado)\ninterface ExpandedLicenseRequest {\n  id: number;\n  licenseId: number;\n  requestNumber: string;\n  type: string;\n  mainVehiclePlate: string;\n  state: string;\n  status: string;\n  stateStatus: string;\n  emissionDate: string | null;\n  validUntil: string | null;\n  licenseFileUrl: string | null;\n  stateFileUrl: string | null;\n  transporterId: number;\n  transporter?: {\n    id: number;\n    name: string;\n    tradeName: string;\n    documentNumber: string;\n  } | null;\n  aetNumber: string | null;\n}\n\nexport default function IssuedLicensesPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [stateFilter, setStateFilter] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n\n  const [selectedLicense, setSelectedLicense] = useState<LicenseRequestWithTransporter | null>(null);\n  const [sortColumn, setSortColumn] = useState<string | null>(\"emissionDate\");\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc' | null>('desc');\n  const [renewDialogOpen, setRenewDialogOpen] = useState(false);\n  const [licenseToRenew, setLicenseToRenew] = useState<{licenseId: number, state: string} | null>(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const queryClient = useQueryClient();\n  const { isConnected } = useWebSocketContext();\n  const { toast } = useToast();\n\n  const { data: issuedLicenses, isLoading, refetch } = useQuery<LicenseRequestWithTransporter[]>({\n    queryKey: [\"/api/licenses/issued\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/licenses/issued\", {\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        throw new Error(\"Erro ao buscar licenças emitidas\");\n      }\n      return res.json();\n    },\n    // Desabilita o cache para garantir que sempre temos os dados mais recentes\n    staleTime: 0,\n    // Recarrega os dados quando a página recebe foco\n    refetchOnWindowFocus: true\n  });\n\n  // Interface para as licenças expandidas por estado\n  \n  // Obter licenças com status aprovado por estado\n  const expandedLicenses = useMemo(() => {\n    if (!issuedLicenses) return [];\n    \n    const result: ExpandedLicenseRequest[] = [];\n    \n    issuedLicenses.forEach(license => {\n      // Para cada licença, expandir para uma linha por estado que tenha sido aprovado\n      license.states.forEach((state, index) => {\n        // Verifica se este estado específico foi aprovado\n        const stateStatusEntry = license.stateStatuses?.find(entry => entry.startsWith(`${state}:`));\n        const stateStatus = stateStatusEntry?.split(':')?.[1] || 'pending_registration';\n        const stateFileEntry = license.stateFiles?.find(entry => entry.startsWith(`${state}:`));\n        const stateFileUrl = stateFileEntry?.split(':')?.[1] || null;\n        \n        // Só incluir estados com status \"approved\"\n        if (stateStatus === 'approved') {\n          // Obter data de validade e emissão específicas para este estado, se disponível\n          let stateValidUntil = null;\n          let stateEmissionDate = null;\n          \n          // Novo formato: \"estado:status:data_validade\" ou \"estado:status:data_validade:data_emissao\"\n          if (stateStatusEntry && stateStatusEntry.split(':').length > 2) {\n            const statusParts = stateStatusEntry.split(':');\n            // Extrair data de validade do formato estado:status:data\n            stateValidUntil = statusParts[2];\n            console.log(`Data de validade extraída para ${state}: ${stateValidUntil}`);\n            \n            // Se tiver 4 partes, pode incluir data de emissão\n            if (statusParts.length > 3) {\n              // A última parte poderia ser data de emissão se estiver no formato de data\n              const lastPart = statusParts[statusParts.length - 1];\n              if (lastPart.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n                stateEmissionDate = lastPart;\n                console.log(`Data de emissão extraída para ${state}: ${stateEmissionDate}`);\n                console.log(`Status completo para ${state}: ${stateStatusEntry}`);\n              }\n            }\n          }\n          \n          // Se não encontrou data de emissão específica, usar a data global da licença\n          if (!stateEmissionDate && license.issuedAt) {\n            const issuedDate = typeof license.issuedAt === 'string' ? license.issuedAt : license.issuedAt.toISOString();\n            stateEmissionDate = issuedDate.split('T')[0];\n            console.log(`[DEBUG] Usando data global para ${state}: ${stateEmissionDate}`);\n          }\n          \n          // Obter número AET específico para este estado, se disponível\n          let stateAETNumber = null;\n          \n          // Verificar primeiro no array stateAETNumbers (formato \"SP:123456\")\n          if (license.stateAETNumbers && Array.isArray(license.stateAETNumbers)) {\n            const aetEntry = license.stateAETNumbers.find(entry => entry.startsWith(`${state}:`));\n            if (aetEntry) {\n              const parts = aetEntry.split(':');\n              if (parts.length >= 2) {\n                stateAETNumber = parts[1];\n              }\n            }\n          }\n          \n          // Se não encontrou no stateAETNumbers, tentar no campo aetNumber (legado)\n          if (!stateAETNumber && license.aetNumber) {\n            stateAETNumber = license.aetNumber;\n          }\n          \n          // Se não encontrou data de validade específica, usar a data global da licença\n          if (!stateValidUntil && license.validUntil) {\n            const validDate = typeof license.validUntil === 'string' ? license.validUntil : license.validUntil.toISOString();\n            stateValidUntil = validDate.split('T')[0];\n            console.log(`[DEBUG] Usando data validade global para ${state}: ${stateValidUntil}`);\n          }\n          \n\n          \n          result.push({\n            id: license.id * 100 + index, // Gerar ID único para a linha\n            licenseId: license.id,\n            requestNumber: license.requestNumber,\n            type: license.type,\n            mainVehiclePlate: license.mainVehiclePlate,\n            state,\n            status: stateStatus,\n            stateStatus,\n            emissionDate: stateEmissionDate,\n            validUntil: stateValidUntil,\n            licenseFileUrl: license.licenseFileUrl,\n            stateFileUrl,\n            transporterId: license.transporterId || 0,\n            transporter: license.transporter, // Passar dados do transportador para a linha expandida\n            aetNumber: stateAETNumber // Usar o número AET específico do estado\n          });\n        }\n      });\n    });\n    \n    return result;\n  }, [issuedLicenses]);\n\n\n\n  // Verificar validade das licenças\n  const getLicenseStatus = (validUntil: string | null): 'active' | 'expired' | 'expiring_soon' => {\n    if (!validUntil) return 'active';\n    \n    const validDate = new Date(validUntil);\n    const today = new Date();\n    \n    if (isBefore(validDate, today)) {\n      return 'expired';\n    }\n    \n    // Se a validade é menos de 30 dias a partir de hoje\n    if (differenceInDays(validDate, today) <= 30) {\n      return 'expiring_soon';\n    }\n    \n    return 'active';\n  };\n  \n  // Filtrar as licenças expandidas\n  const filteredLicenses = expandedLicenses.filter(license => {\n    const matchesSearch = !searchTerm || \n      license.requestNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      license.mainVehiclePlate.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const licenseDate = license.emissionDate ? new Date(license.emissionDate) : null;\n    \n    const matchesDateFrom = !dateFrom || (\n      licenseDate && \n      licenseDate >= new Date(dateFrom)\n    );\n    \n    const matchesDateTo = !dateTo || (\n      licenseDate && \n      licenseDate <= new Date(dateTo)\n    );\n    \n    const matchesState = !stateFilter || stateFilter === \"all_states\" || (\n      license.state === stateFilter\n    );\n    \n    // Verificar o status da licença para filtro de situação\n    const validityStatus = getLicenseStatus(license.validUntil);\n    const matchesStatus = !statusFilter || statusFilter === \"all_status\" || statusFilter === validityStatus;\n    \n    return matchesSearch && matchesDateFrom && matchesDateTo && matchesState && matchesStatus;\n  });\n\n  // Ordenar licenças filtradas\n  const sortedLicenses = useMemo(() => {\n    if (!sortColumn || !sortDirection) {\n      return filteredLicenses;\n    }\n\n    // Criar uma cópia para ordenação\n    const toSort = [...filteredLicenses];\n    \n    // Definir uma função de ordenação personalizada com base na coluna e direção\n    const getSortValue = (license: ExpandedLicenseRequest, column: string): any => {\n      if (column === 'state') {\n        return license.state;\n      } else if (column === 'mainVehiclePlate') {\n        return license.mainVehiclePlate;\n      } else if (column === 'type') {\n        return license.type;\n      } else if (column === 'requestNumber') {\n        return license.requestNumber;\n      } else if (column === 'validUntil') {\n        return license.validUntil ? new Date(license.validUntil).getTime() : 0;\n      } else if (column === 'emissionDate') {\n        return license.emissionDate ? new Date(license.emissionDate).getTime() : 0;\n      } else if (column === 'status') {\n        return getLicenseStatus(license.validUntil);\n      } else {\n        return license[column as keyof typeof license];\n      }\n    };\n    \n    // Ordenar o array\n    toSort.sort((a, b) => {\n      const aValue = getSortValue(a, sortColumn);\n      const bValue = getSortValue(b, sortColumn);\n      \n      // Valores iguais\n      if (aValue === bValue) return 0;\n      \n      // Tratamento para nulos\n      if (aValue === null || aValue === undefined) {\n        return sortDirection === 'asc' ? 1 : -1;\n      }\n      if (bValue === null || bValue === undefined) {\n        return sortDirection === 'asc' ? -1 : 1;\n      }\n      \n      // Para strings\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue) \n          : bValue.localeCompare(aValue);\n      }\n      \n      // Para números e outros tipos\n      return sortDirection === 'asc' \n        ? (aValue < bValue ? -1 : 1) \n        : (bValue < aValue ? -1 : 1);\n    });\n    \n    return toSort;\n  }, [filteredLicenses, sortColumn, sortDirection]);\n\n  // Função para ordenar as licenças\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      // Se já está ordenando por esta coluna, alterna a direção\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection('asc');\n      } else {\n        setSortDirection('asc');\n      }\n    } else {\n      // Nova coluna selecionada, começa com ascendente\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n\n  // Hook de paginação das licenças filtradas\n  const { \n    paginatedItems: paginatedLicenses, \n    pagination, \n    currentPage, \n    setCurrentPage \n  } = usePaginatedList({ items: sortedLicenses });\n\n\n  const viewLicenseDetails = (license: LicenseRequest) => {\n    setSelectedLicense(license);\n  };\n  \n  // Navegação para redirecionar após renovação\n  const [, setLocation] = useLocation();\n  \n  // Mutação para renovar licença\n  const renewLicenseMutation = useMutation({\n    mutationFn: async ({ licenseId, state }: { licenseId: number, state: string }) => {\n      try {\n        // Usar o endpoint que aceita o corpo da requisição\n        const response = await apiRequest(\"POST\", \"/api/licenses/renew\", { licenseId, state });\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Erro ao renovar licença: ${errorText}`);\n        }\n        return await response.json();\n      } catch (error) {\n        console.error(\"Erro na renovação:\", error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      console.log(\"Renovação bem-sucedida:\", data);\n      \n      // Fechar o diálogo de renovação\n      setRenewDialogOpen(false);\n      \n      // Invalidar a cache para garantir que os dados são atualizados\n      queryClient.invalidateQueries({ queryKey: [\"/api/licenses/drafts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/licenses/issued\"] });\n      \n      // Notificar o usuário e redirecionar para a página de edição do rascunho\n      toast({\n        title: \"Licença renovada com sucesso\",\n        description: `Licença renovada para o estado ${data.draft.states[0]}. Você será redirecionado para editar o rascunho.`,\n        duration: 5000,\n      });\n      \n      // Navegar para a página de edição do rascunho após um pequeno atraso\n      setTimeout(() => {\n        setLocation(`/request-license?draft=${data.draft.id}`);\n      }, 1000);\n    },\n    onError: (error: Error) => {\n      console.error(\"Erro na renovação:\", error);\n      \n      toast({\n        title: \"Erro ao renovar licença\",\n        description: error.message || \"Não foi possível completar a renovação da licença. Tente novamente.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    }\n  });\n\n  // Função para atualizar os dados com feedback visual melhorado\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      // Invalidar cache primeiro\n      await queryClient.invalidateQueries({ queryKey: [\"/api/licenses/issued\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/licenses\"] });\n      \n      // Fazer refetch\n      await refetch();\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Lista de licenças emitidas atualizada com sucesso.\",\n      });\n    } catch (error) {\n      console.error(\"Erro ao atualizar:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar a lista. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Função para formatar data para CSV\n  const formatDateToCSV = (dateString: string | null): string => {\n    if (!dateString) return '';\n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return '';\n      return date.toLocaleDateString('pt-BR');\n    } catch {\n      return '';\n    }\n  };\n\n  // Função para traduzir tipos de veículo para português\n  const translateVehicleType = (type: string): string => {\n    const vehicleTypeMap: Record<string, string> = {\n      'truck': 'Caminhão',\n      'bitrain_9_axles': 'Bitrem 9 Eixos',\n      'bitrain_7_axles': 'Bitrem 7 Eixos',\n      'rodotrain': 'Rodotrem',\n      'truck_trailer': 'Caminhão + Reboque',\n      'articulated_truck': 'Caminhão Articulado',\n      'special_transport': 'Transporte Especial',\n      'oversized_cargo': 'Carga Superdimensionada'\n    };\n    \n    return vehicleTypeMap[type] || type;\n  };\n\n  // Função para traduzir status para português\n  const translateStatus = (status: string): string => {\n    const statusMap: Record<string, string> = {\n      'pending_registration': 'Pendente de Registro',\n      'registration_in_progress': 'Registro em Andamento',\n      'pending_documentation': 'Pendente Documentação',\n      'under_review': 'Em Análise',\n      'pending_approval': 'Pendente de Aprovação',\n      'approved': 'Aprovado',\n      'rejected': 'Rejeitado',\n      'canceled': 'Cancelado'\n    };\n    \n    return statusMap[status] || status;\n  };\n\n  // Função para exportar CSV das licenças emitidas\n  const handleExportCSV = () => {\n    try {\n      const headers = [\n        \"Nº Solicitação\",\n        \"Tipo de Veículo\", \n        \"Placa Principal\",\n        \"Estado\",\n        \"Status\",\n        \"Data de Emissão\",\n        \"Data de Validade\",\n        \"Número AET\",\n        \"Transportador\"\n      ];\n\n      const dataForExport = filteredLicenses.map(license => ({\n        \"Nº Solicitação\": license.requestNumber || '',\n        \"Tipo de Veículo\": translateVehicleType(license.type) || '',\n        \"Placa Principal\": license.mainVehiclePlate || '',\n        \"Estado\": license.state || '',\n        \"Status\": translateStatus(license.status) || '',\n        \"Data de Emissão\": license.emissionDate ? formatDateForCSV(license.emissionDate) : '',\n        \"Data de Validade\": license.validUntil ? formatDateForCSV(license.validUntil) : '',\n        \"Número AET\": license.aetNumber || '',\n        \"Transportador\": license.transporter?.name || license.transporter?.tradeName || `ID: ${license.transporterId}`\n      }));\n\n      exportToCSV({\n        filename: \"licencas-emitidas\",\n        headers,\n        data: dataForExport\n      });\n\n      toast({\n        title: \"Exportação concluída\",\n        description: `${dataForExport.length} licenças exportadas para CSV`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro na exportação\",\n        description: \"Ocorreu um erro ao exportar os dados\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"mb-6 flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Licenças Emitidas</h1>\n          <p className=\"text-gray-600 mt-1\">Histórico de todas as licenças liberadas</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={handleExportCSV}\n            variant=\"outline\" \n            className=\"flex items-center gap-1 bg-white border-gray-200\"\n            title=\"Exportar licenças para CSV\"\n            disabled={isLoading || filteredLicenses.length === 0}\n          >\n            <Download className=\"h-4 w-4\" />\n            Exportar CSV\n          </Button>\n          <Button \n            onClick={handleRefresh} \n            variant=\"outline\" \n            className={`flex items-center gap-1 bg-white ${isConnected ? 'border-green-200' : 'border-gray-200'}`}\n            title={`Atualizar lista de licenças ${isConnected ? '(Tempo real ativo)' : '(Offline)'}`}\n            disabled={isRefreshing || isLoading}\n          >\n            <div className=\"flex items-center\">\n              {isRefreshing ? (\n                <Loader2 className=\"h-4 w-4 mr-1 animate-spin\" />\n              ) : (\n                <RefreshCw className=\"h-4 w-4 mr-1\" />\n              )}\n              {isConnected && (\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\" title=\"Conectado em tempo real\" />\n              )}\n            </div>\n            {isRefreshing ? 'Atualizando...' : 'Atualizar'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"bg-white p-4 rounded-lg shadow mb-6\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n          <div className=\"sm:col-span-2 lg:col-span-1\">\n            <label htmlFor=\"issued-search\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Pesquisar\n            </label>\n            <div className=\"relative\">\n              <Input\n                id=\"issued-search\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Nº do pedido ou placa...\"\n                className=\"pl-10\"\n              />\n              <span className=\"absolute left-3 top-2.5 text-gray-400\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </span>\n            </div>\n          </div>\n          \n          <div>\n            <label htmlFor=\"date-from\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Data Inicial\n            </label>\n            <Input\n              id=\"date-from\"\n              type=\"date\"\n              value={dateFrom}\n              onChange={(e) => setDateFrom(e.target.value)}\n            />\n          </div>\n          \n          <div>\n            <label htmlFor=\"date-to\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Data Final\n            </label>\n            <Input\n              id=\"date-to\"\n              type=\"date\"\n              value={dateTo}\n              onChange={(e) => setDateTo(e.target.value)}\n            />\n          </div>\n          \n          <div>\n            <label htmlFor=\"state-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Estado\n            </label>\n            <Select value={stateFilter} onValueChange={setStateFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Todos os estados\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all_states\">Todos os estados</SelectItem>\n                {/* O erro estava aqui: brazilianStates é um objeto no schema, não um array de strings */}\n                {['SP', 'MG', 'MT', 'PE', 'TO', 'MS', 'PR', 'ES', 'DNIT', 'RS', 'BA', 'PA', 'SC', 'DF', 'MA', 'GO', 'RJ', 'CE', 'AL', 'SE'].map(state => (\n                  <SelectItem key={state} value={state}>{state}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <label htmlFor=\"status-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Situação\n            </label>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Todas as situações\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all_status\">Todas as situações</SelectItem>\n                <SelectItem value=\"active\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle2 className=\"h-3 w-3 mr-2 text-green-500\" /> \n                    Ativas\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"expiring_soon\">\n                  <div className=\"flex items-center\">\n                    <Clock className=\"h-3 w-3 mr-2 text-amber-500\" /> \n                    Vence\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"expired\">\n                  <div className=\"flex items-center\">\n                    <AlertCircle className=\"h-3 w-3 mr-2 text-red-500\" /> \n                    Vencidas\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        \n        {/* Estatísticas rápidas */}\n        <div className=\"grid grid-cols-3 gap-2 mt-4\">\n          {expandedLicenses.length > 0 && (\n            <>\n              <div className=\"text-center py-2 bg-gray-50 rounded-md border border-gray-200\">\n                <span className=\"text-xs text-gray-500\">Total de licenças</span>\n                <p className=\"font-semibold\">{expandedLicenses.length}</p>\n              </div>\n              <div className=\"text-center py-2 bg-amber-50 rounded-md border border-amber-200\">\n                <span className=\"text-xs text-amber-800\">Vence em 30 dias</span>\n                <p className=\"font-semibold text-amber-700\">\n                  {expandedLicenses.filter(l => getLicenseStatus(l.validUntil) === 'expiring_soon').length}\n                </p>\n              </div>\n              <div className=\"text-center py-2 bg-red-50 rounded-md border border-red-200\">\n                <span className=\"text-xs text-red-800\">Vencidas</span>\n                <p className=\"font-semibold text-red-700\">\n                  {expandedLicenses.filter(l => getLicenseStatus(l.validUntil) === 'expired').length}\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        {/* Versão desktop - tabela */}\n        <div className=\"hidden md:block\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-100\">\n                  <SortableHeader\n                    column=\"state\"\n                    label=\"Estado\"\n                    currentSort={sortColumn}\n                    currentDirection={sortDirection}\n                    onSort={handleSort}\n                  />\n                  <SortableHeader\n                    column=\"requestNumber\"\n                    label=\"Nº Pedido\"\n                    currentSort={sortColumn}\n                    currentDirection={sortDirection}\n                    onSort={handleSort}\n                  />\n                  <SortableHeader\n                    column=\"mainVehiclePlate\"\n                    label=\"Placa Principal\"\n                    currentSort={sortColumn}\n                    currentDirection={sortDirection}\n                    onSort={handleSort}\n                  />\n                  <TableHead>Transportador</TableHead>\n                  <TableHead>Nº Licença</TableHead>\n                  <SortableHeader\n                    column=\"emissionDate\"\n                    label=\"Emissão\"\n                    currentSort={sortColumn}\n                    currentDirection={sortDirection}\n                    onSort={handleSort}\n                  />\n                  <SortableHeader\n                    column=\"validUntil\"\n                    label=\"Validade\"\n                    currentSort={sortColumn}\n                    currentDirection={sortDirection}\n                    onSort={handleSort}\n                  />\n                  <TableHead>Situação</TableHead>\n                  <TableHead className=\"text-right\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center py-10\">\n                      Carregando licenças...\n                    </TableCell>\n                  </TableRow>\n                ) : paginatedLicenses.length > 0 ? (\n                  paginatedLicenses.map((license) => {\n                    const validityStatus = getLicenseStatus(license.validUntil);\n                    \n                    return (\n                      <TableRow \n                        key={`${license.licenseId}-${license.state}`}\n                        className={\n                          validityStatus === 'expired' ? 'bg-red-50' : \n                          validityStatus === 'expiring_soon' ? 'bg-amber-50' : \n                          'hover:bg-gray-50'\n                        }\n                      >\n                        <TableCell>\n                          <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-800 hover:bg-blue-100\">\n                            {license.state}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"font-medium\">{license.requestNumber}</TableCell>\n                        <TableCell>{license.mainVehiclePlate}</TableCell>\n                        <TableCell>\n                          {license.transporter?.name || license.transporter?.tradeName || `ID: ${license.transporterId}`}\n                        </TableCell>\n                        <TableCell>\n                          {license.aetNumber ? (\n                            <span className=\"font-semibold text-blue-700\">{license.aetNumber}</span>\n                          ) : (\n                            <span className=\"text-gray-500\">Não atribuído</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {license.emissionDate ? license.emissionDate.split('-').reverse().join('/') : '-'}\n                        </TableCell>\n                        <TableCell>\n                          {license.validUntil ? (\n                            <span className={\n                              validityStatus === 'expired' ? 'font-semibold text-red-700' : \n                              validityStatus === 'expiring_soon' ? 'font-semibold text-amber-700' : \n                              'font-semibold text-green-700'\n                            }>\n                              {license.validUntil.split('-').reverse().join('/')}\n                            </span>\n                          ) : '-'}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          {validityStatus === 'expired' && (\n                            <Badge variant=\"destructive\" className=\"flex items-center gap-1 justify-center w-24 mx-auto\">\n                              <span className=\"relative flex h-2 w-2\">\n                                <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-red-400 opacity-75\"></span>\n                                <span className=\"relative inline-flex h-2 w-2 rounded-full bg-red-500\"></span>\n                              </span>\n                              Vencida\n                            </Badge>\n                          )}\n                          {validityStatus === 'expiring_soon' && (\n                            <Badge variant=\"outline\" className=\"bg-amber-50 text-amber-800 flex items-center gap-1 justify-center w-24 mx-auto\">\n                              <Clock className=\"h-3 w-3\" /> \n                              Vence\n                            </Badge>\n                          )}\n                          {validityStatus === 'active' && (\n                            <Badge variant=\"outline\" className=\"bg-green-50 text-green-800 flex items-center gap-1 justify-center w-24 mx-auto\">\n                              <CheckCircle2 className=\"h-3 w-3\" /> \n                              Ativa\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end items-center space-x-1\">\n                            {/* Botão para baixar arquivo específico do estado */}\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\" \n                              asChild \n                              className=\"flex items-center justify-center\" \n                              title=\"Baixar licença para o estado\"\n                            >\n                              {(() => {\n                                // Encontrar o arquivo específico para este estado\n                                const originalLicense = issuedLicenses?.find(l => l.id === license.licenseId);\n                                const stateFileEntry = originalLicense?.stateFiles?.find(file => file.startsWith(`${license.state}:`));\n                                const stateFileUrl = stateFileEntry ? stateFileEntry.split(':')[1] : null;\n                                \n                                return (\n                                  <a \n                                    href={stateFileUrl || '#'} \n                                    target=\"_blank\" \n                                    rel=\"noopener noreferrer\"\n                                    onClick={(e) => {\n                                      if (!stateFileUrl) {\n                                        e.preventDefault();\n                                        toast({\n                                          title: \"Documento indisponível\",\n                                          description: `Documento da licença para o estado ${license.state} não está disponível.`,\n                                          variant: \"destructive\"\n                                        });\n                                      }\n                                    }}\n                                    className={!stateFileUrl ? \"opacity-40 cursor-not-allowed\" : \"\"}\n                                  >\n                                    <FileDown className=\"h-4 w-4 text-green-600\" />\n                                  </a>\n                                );\n                              })()}\n                            </Button>\n                            \n                            {/* Botão para visualizar detalhes */}\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\"\n                              className=\"flex items-center justify-center\"\n                              title=\"Ver detalhes\"\n                              onClick={() => {\n                                // Buscar a licença original\n                                const originalLicense = issuedLicenses?.find(l => l.id === license.licenseId);\n                                if (originalLicense) {\n                                  viewLicenseDetails(originalLicense);\n                                }\n                              }}\n                            >\n                              <ExternalLink className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            {/* Botão para renovar licença */}\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\"\n                              className=\"flex items-center justify-center\"\n                              title=\"Renovar licença para este estado\"\n                              onClick={() => {\n                                setLicenseToRenew({\n                                  licenseId: license.licenseId,\n                                  state: license.state\n                                });\n                                setRenewDialogOpen(true);\n                              }}\n                            >\n                              <RefreshCcw className=\"h-4 w-4 text-blue-600\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center py-10\">\n                      Nenhuma licença emitida encontrada.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n        \n        {/* Versão mobile - cards */}\n        <div className=\"md:hidden\">\n          {isLoading ? (\n            <div className=\"py-10 text-center\">\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-4 border-solid border-blue-500 border-r-transparent\"></div>\n              <p className=\"mt-2 text-gray-600\">Carregando licenças...</p>\n            </div>\n          ) : paginatedLicenses.length > 0 ? (\n            <div className=\"divide-y divide-gray-200\">\n              {paginatedLicenses.map((license) => {\n                const validityStatus = getLicenseStatus(license.validUntil);\n                \n                return (\n                  <div \n                    key={`mobile-${license.licenseId}-${license.state}`} \n                    className={`p-4 ${\n                      validityStatus === 'expired' ? 'bg-red-50' : \n                      validityStatus === 'expiring_soon' ? 'bg-amber-50' : \n                      'bg-white'\n                    }`}\n                  >\n                    <div className=\"flex justify-between mb-2\">\n                      <div className=\"flex flex-col\">\n                        <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-800 self-start mb-1\">\n                          {license.state}\n                        </Badge>\n                        <span className=\"font-medium text-gray-900\">{license.requestNumber}</span>\n                      </div>\n                      <div className=\"flex space-x-1\">\n\n                        \n                        {/* Botão para baixar arquivo específico do estado - versão mobile */}\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          asChild \n                          className=\"h-8 w-8 p-0 flex items-center justify-center\" \n                          aria-label=\"Download da licença\" \n                          title=\"Baixar licença para o estado\"\n                        >\n                          {(() => {\n                            // Encontrar o arquivo específico para este estado\n                            const originalLicense = issuedLicenses?.find(l => l.id === license.licenseId);\n                            const stateFileEntry = originalLicense?.stateFiles?.find(file => file.startsWith(`${license.state}:`));\n                            const stateFileUrl = stateFileEntry ? stateFileEntry.split(':')[1] : null;\n                            \n                            return (\n                              <a \n                                href={stateFileUrl || '#'} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                onClick={(e) => {\n                                  if (!stateFileUrl) {\n                                    e.preventDefault();\n                                    toast({\n                                      title: \"Documento indisponível\",\n                                      description: `Documento da licença para o estado ${license.state} não está disponível.`,\n                                      variant: \"destructive\"\n                                    });\n                                  }\n                                }}\n                                className={!stateFileUrl ? \"opacity-40 cursor-not-allowed\" : \"\"}\n                              >\n                                <FileDown className=\"h-4 w-4 text-green-600\" />\n                              </a>\n                            );\n                          })()}\n                        </Button>\n                        \n                        {/* Botão para visualizar detalhes */}\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          className=\"h-8 w-8 p-0 flex items-center justify-center\"\n                          aria-label=\"Ver detalhes\"\n                          title=\"Ver detalhes\"\n                          onClick={() => {\n                            // Buscar a licença original\n                            const originalLicense = issuedLicenses?.find(l => l.id === license.licenseId);\n                            if (originalLicense) {\n                              viewLicenseDetails(originalLicense);\n                            }\n                          }}\n                        >\n                          <ExternalLink className=\"h-4 w-4\" />\n                        </Button>\n                        \n                        {/* Botão de renovação - versão mobile */}\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          className=\"h-8 w-8 p-0 flex items-center justify-center\"\n                          aria-label=\"Renovar licença\"\n                          title=\"Renovar licença para este estado\"\n                          onClick={() => {\n                            setLicenseToRenew({\n                              licenseId: license.licenseId,\n                              state: license.state\n                            });\n                            setRenewDialogOpen(true);\n                          }}\n                        >\n                          <RefreshCcw className=\"h-4 w-4 text-blue-600\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-2 mb-2 text-sm\">\n                      <div>\n                        <span className=\"text-xs text-gray-500\">Nº Licença:</span>\n                        <div>\n                          {license.aetNumber ? (\n                            <span className=\"font-semibold text-blue-700\">{license.aetNumber}</span>\n                          ) : (\n                            <span className=\"text-gray-500\">Não atribuído</span>\n                          )}\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-xs text-gray-500\">Placa:</span>\n                        <div>{license.mainVehiclePlate}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-xs text-gray-500\">Emissão:</span>\n                        <div>{license.emissionDate ? license.emissionDate.split('-').reverse().join('/') : '-'}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-xs text-gray-500\">Validade:</span>\n                        <div className={\n                          validityStatus === 'expired' ? 'font-semibold text-red-700' : \n                          validityStatus === 'expiring_soon' ? 'font-semibold text-amber-700' : \n                          'font-semibold text-green-700'\n                        }>\n                          {license.validUntil ? license.validUntil.split('-').reverse().join('/') : '-'}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <span className=\"text-xs text-gray-500\">Situação:</span>\n                      <div className=\"mt-1\">\n                        {validityStatus === 'expired' && (\n                          <Badge variant=\"destructive\" className=\"flex items-center gap-1 justify-center w-24 mx-auto\">\n                            <span className=\"relative flex h-2 w-2\">\n                              <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-red-400 opacity-75\"></span>\n                              <span className=\"relative inline-flex h-2 w-2 rounded-full bg-red-500\"></span>\n                            </span>\n                            Vencida\n                          </Badge>\n                        )}\n                        {validityStatus === 'expiring_soon' && (\n                          <Badge variant=\"outline\" className=\"bg-amber-50 text-amber-800 flex items-center gap-1 justify-center w-24 mx-auto\">\n                            <Clock className=\"h-3 w-3\" /> \n                            Vence\n                          </Badge>\n                        )}\n                        {validityStatus === 'active' && (\n                          <Badge variant=\"outline\" className=\"bg-green-50 text-green-800 flex items-center gap-1 justify-center w-24 mx-auto\">\n                            <CheckCircle2 className=\"h-3 w-3\" /> \n                            Ativa\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"py-10 text-center text-gray-500\">\n              Nenhuma licença emitida encontrada.\n            </div>\n          )}\n        </div>\n\n        {/* Cabeçalho com contador de licenças */}\n        <div className=\"mb-4 px-4 sm:px-6 flex justify-between items-center\">\n          <div className=\"text-sm text-gray-600\">\n            Mostrando {paginatedLicenses.length > 0 ? ((currentPage - 1) * 10 + 1) : 0}-{Math.min(currentPage * 10, sortedLicenses.length)} de {sortedLicenses.length} licenças\n          </div>\n        </div>\n\n        {/* Controles de paginação - Versão desktop */}\n        <div className=\"hidden md:block mt-6\">\n          <ListPagination \n            currentPage={currentPage}\n            totalPages={pagination.totalPages}\n            totalItems={pagination.total}\n            itemsPerPage={pagination.itemsPerPage}\n            onPageChange={setCurrentPage}\n            hasPrev={pagination.hasPrev}\n            hasNext={pagination.hasNext}\n            startItem={pagination.startItem}\n            endItem={pagination.endItem}\n            itemName=\"licença\"\n          />\n        </div>\n\n        {/* Controles de paginação - Versão mobile */}\n        <div className=\"block md:hidden mt-6\">\n          <MobileListPagination\n            currentPage={currentPage}\n            totalPages={pagination.totalPages}\n            totalItems={pagination.total}\n            itemsPerPage={pagination.itemsPerPage}\n            onPageChange={setCurrentPage}\n            hasPrev={pagination.hasPrev}\n            hasNext={pagination.hasNext}\n            startItem={pagination.startItem}\n            endItem={pagination.endItem}\n            itemName=\"licença\"\n          />\n        </div>\n      </div>\n\n      {/* Diálogo de renovação de licença */}\n      <Dialog \n        open={renewDialogOpen} \n        onOpenChange={(open) => {\n          setRenewDialogOpen(open);\n          if (!open) setLicenseToRenew(null);\n        }}\n      >\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Renovar Licença</DialogTitle>\n            <DialogDescription>\n              Confirme a renovação da licença para criar um novo rascunho.\n            </DialogDescription>\n          </DialogHeader>\n          {licenseToRenew && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-blue-50 p-4 rounded-md\">\n                <p className=\"text-sm text-blue-800 mb-2 font-medium\">Informações da renovação:</p>\n                <div className=\"text-sm\">\n                  <div className=\"flex items-center mb-1\">\n                    <span className=\"font-medium mr-2\">Estado:</span>\n                    <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\">\n                      {licenseToRenew.state}\n                    </Badge>\n                  </div>\n                  <p><span className=\"font-medium\">ID da Licença:</span> {licenseToRenew.licenseId}</p>\n                  <p className=\"text-xs text-blue-600 mt-2\">\n                    A licença será renovada como um rascunho que você poderá editar antes de enviar.\n                  </p>\n                </div>\n              </div>\n              <div className=\"bg-amber-50 p-3 rounded-md\">\n                <p className=\"text-sm text-amber-800\">\n                  <AlertCircle className=\"h-4 w-4 inline-block mr-1\" />\n                  Isso criará uma cópia da licença original apenas para o estado selecionado.\n                </p>\n              </div>\n            </div>\n          )}\n          <DialogFooter className=\"flex flex-col sm:flex-row sm:justify-between gap-2\">\n            <DialogClose asChild>\n              <Button variant=\"outline\" className=\"sm:w-auto\">\n                Cancelar\n              </Button>\n            </DialogClose>\n            <Button \n              className=\"sm:w-auto\" \n              disabled={renewLicenseMutation.isPending || !licenseToRenew}\n              onClick={() => {\n                if (licenseToRenew) {\n                  console.log(\"Renovando licença:\", licenseToRenew);\n                  renewLicenseMutation.mutate({\n                    licenseId: licenseToRenew.licenseId,\n                    state: licenseToRenew.state\n                  });\n                  // Não fechar automaticamente, aguardar resultado da mutação\n                }\n              }}\n            >\n              {renewLicenseMutation.isPending ? (\n                <>\n                  <span className=\"animate-spin mr-2\">⏳</span>\n                  Processando...\n                </>\n              ) : (\n                <>\n                  <RefreshCcw className=\"h-4 w-4 mr-2\" />\n                  Renovar Licença\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Diálogo de detalhes da licença */}\n      {selectedLicense && (\n        <Dialog open={!!selectedLicense} onOpenChange={(open) => !open && setSelectedLicense(null)}>\n          <DialogContent className=\"max-w-4xl w-[95vw] max-h-[90vh] overflow-y-auto\" aria-describedby=\"license-details-description\">\n            <DialogHeader>\n              <DialogTitle>Detalhes da Licença</DialogTitle>\n              <p id=\"license-details-description\" className=\"text-sm text-gray-500\">Informações detalhadas da licença selecionada</p>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              {selectedLicense && (\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500\">Número do Pedido</h3>\n                <p className=\"text-gray-900\">{selectedLicense.requestNumber}</p>\n              </div>\n              )}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500\">Tipo de Conjunto</h3>\n                <p className=\"text-gray-900\">\n                  {selectedLicense.type === \"roadtrain_9_axles\" && \"Rodotrem 9 eixos\"}\n                  {selectedLicense.type === \"bitrain_9_axles\" && \"Bitrem 9 eixos\"}\n                  {selectedLicense.type === \"bitrain_7_axles\" && \"Bitrem 7 eixos\"}\n                  {selectedLicense.type === \"bitrain_6_axles\" && \"Bitrem 6 eixos\"}\n                  {selectedLicense.type === \"flatbed\" && \"Prancha\"}\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500\">Placa Principal</h3>\n                <p className=\"text-gray-900\">{selectedLicense.mainVehiclePlate}</p>\n              </div>\n              <TransporterInfo transporterId={selectedLicense.transporterId} />\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500\">Estados</h3>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {selectedLicense.states.map(state => (\n                    <span key={state} className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                      {state}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500\">Status</h3>\n                <Status status={selectedLicense.status} />\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500\">Data de Liberação</h3>\n                <p className=\"text-gray-900\">\n                  {selectedLicense.updatedAt ? new Intl.DateTimeFormat('pt-BR').format(new Date(selectedLicense.updatedAt)) : '-'}\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500\">Validade</h3>\n                <p className=\"font-semibold text-green-700\">\n                  {selectedLicense.validUntil ? new Intl.DateTimeFormat('pt-BR').format(new Date(selectedLicense.validUntil)) : '-'}\n                </p>\n              </div>\n              \n              {/* Campo de Observações */}\n              {selectedLicense.comments && selectedLicense.comments.trim() && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-500\">Observações</h3>\n                  <div className=\"mt-1 p-3 bg-gray-50 border border-gray-200 rounded-md\">\n                    <p className=\"text-gray-900 text-sm whitespace-pre-wrap\">{selectedLicense.comments}</p>\n                  </div>\n                </div>\n              )}\n              {/* Arquivos por estado - mostrar sempre, mesmo que não haja arquivos ainda */}\n              {selectedLicense.states && selectedLicense.states.length > 0 && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Arquivos por Estado</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {selectedLicense.states.map(state => {\n                      // Procura o arquivo para este estado\n                      const stateFileEntry = selectedLicense.stateFiles?.find(sf => sf.startsWith(`${state}:`));\n                      const stateStatus = selectedLicense.stateStatuses?.find(ss => ss.startsWith(`${state}:`))?.split(':')[1] || \"pending_registration\";\n                      const isApproved = stateStatus === \"approved\";\n                      \n                      return (\n                        <div key={state} className={`flex justify-between items-center p-3 rounded border ${isApproved ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}`}>\n                          <div className=\"flex flex-col\">\n                            <div className=\"flex items-center mb-1\">\n                              <span className=\"font-medium text-gray-800\">{state}</span>\n                              <div className=\"mx-1 text-gray-400\">•</div>\n                              <StatusBadge status={stateStatus as LicenseStatus} />\n                            </div>\n                            \n                            {stateStatus === \"approved\" ? (\n                              <span className=\"text-xs text-green-600 font-medium\">\n                                {selectedLicense.requestNumber} - \"{state}\"\n                              </span>\n                            ) : (\n                              <span className=\"text-xs text-gray-700\">\n                                {selectedLicense.requestNumber} - \"{state}\"\n                              </span>\n                            )}\n                            \n                            {!stateFileEntry && (\n                              <span className=\"text-xs text-gray-500 italic mt-1\">Nenhum arquivo disponível</span>\n                            )}\n                          </div>\n                          \n                          {stateFileEntry && (\n                            <Button variant=\"outline\" size=\"sm\" asChild>\n                              <a \n                                href={stateFileEntry?.split?.(':')?.[1] || '#'} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                onClick={(e) => {\n                                  if (!stateFileEntry?.split?.(':')?.[1]) {\n                                    e.preventDefault();\n                                    alert('Arquivo não disponível no momento.');\n                                  }\n                                }}\n                              >\n                                <FileDown className=\"h-4 w-4 mr-1\" /> Baixar\n                              </a>\n                            </Button>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              \n              {/* Arquivo principal da licença (manter para compatibilidade) */}\n              {selectedLicense.licenseFileUrl && (\n                <div className=\"pt-4\">\n                  <Button asChild className=\"w-full\">\n                    <a \n                      href={selectedLicense.licenseFileUrl || '#'} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      onClick={(e) => {\n                        if (!selectedLicense.licenseFileUrl) {\n                          e.preventDefault();\n                          alert('Arquivo não disponível no momento.');\n                        }\n                      }}\n                    >\n                      Download da Licença Completa\n                    </a>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </MainLayout>\n  );\n}\n","size_bytes":58349},"client/src/pages/track-license-page.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Input } from \"@/components/ui/input\";\nimport { FileDown, CheckCircle, Search, Download, RefreshCw } from \"lucide-react\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { LicenseRequest } from \"@shared/schema\";\nimport { LicenseList } from \"@/components/licenses/license-list\";\nimport { Dialog, DialogContent, DialogTitle, DialogHeader, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusBadge } from \"@/components/licenses/status-badge\";\nimport { ProgressFlow, StateProgressFlow } from \"@/components/licenses/progress-flow\";\nimport { format } from \"date-fns\";\nimport { getLicenseTypeLabel } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { TransporterInfo } from \"@/components/transporters/transporter-info\";\nimport { SortableHeader } from \"@/components/ui/sortable-header\";\nimport { LicenseDetailsCard } from \"@/components/licenses/license-details-card\";\nimport { exportToCSV, formatDateForCSV } from \"@/lib/csv-export\";\nimport { usePaginatedList } from \"@/hooks/use-paginated-list\";\nimport { ListPagination, MobileListPagination } from \"@/components/ui/list-pagination\";\nimport { brazilianStates } from \"@shared/schema\";\nimport { useWebSocketContext } from \"@/hooks/use-websocket-context\";\n\nexport default function TrackLicensePage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState(\"\");\n  const [stateFilter, setStateFilter] = useState(\"\");\n  const queryClient = useQueryClient();\n  const [selectedLicense, setSelectedLicense] = useState<LicenseRequest | null>(null);\n  const [sortColumn, setSortColumn] = useState<string | null>(\"createdAt\");\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc' | null>('desc');\n\n  const { toast } = useToast();\n  \n  // Hook para tempo real - OBRIGATÓRIO para atualizações de status e pedidos\n  const { isConnected } = useWebSocketContext();\n  \n  // Indicador visual de conexão em tempo real\n  // Performance: Log removido\n  \n  // Buscamos todas as licenças não finalizadas usando a rota /api/licenses\n  // Rascunhos de renovação não devem aparecer aqui\n  const { data: licenses, isLoading, refetch } = useQuery<LicenseRequest[]>({\n    queryKey: [\"/api/licenses\"],\n    queryFn: async () => {\n      // Incluir rascunhos de renovação para que apareçam em tempo real\n      const res = await fetch(\"/api/licenses?includeRenewal=true\", {\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        throw new Error(\"Erro ao buscar licenças\");\n      }\n      \n      const data = await res.json();\n      \n      // Filtrar para remover quaisquer rascunhos de renovação que possam ter passado pelo filtro do backend\n      const filteredData = data.filter((license: any) => {\n        // Exclui qualquer licença que seja rascunho E tenha 'Renovação' no campo comments\n        return !(license.isDraft && license.comments?.includes('Renovação'));\n      });\n      \n      return filteredData;\n    },\n    // TEMPO REAL INSTANTÂNEO: Para cores de status mudarem IMEDIATAMENTE\n    staleTime: 1000, // 1 segundo apenas (instantâneo)\n    refetchInterval: 15 * 1000, // Refetch a cada 15 segundos (ultra rápido)\n    refetchOnWindowFocus: true, // Reabilitado para tempo real\n    refetchOnMount: true,\n    retry: 1\n  });\n\n  // Usado para notificar o usuário sobre a disponibilidade de dados em cache\n  // Notificação otimizada para novas licenças (apenas quando há mudanças significativas)\n  const [lastLicenseCount, setLastLicenseCount] = useState(0);\n  \n  useEffect(() => {\n    if (licenses && licenses.length > 0) {\n      // Só mostra toast se houve aumento significativo no número de licenças\n      if (licenses.length > lastLicenseCount && lastLicenseCount > 0) {\n        const newLicenses = licenses.length - lastLicenseCount;\n        if (newLicenses >= 1) {\n          toast({\n            title: \"Novas licenças detectadas\",\n            description: `${newLicenses} nova(s) licença(s) adicionada(s)`,\n            duration: 4000,\n          });\n        }\n      }\n      setLastLicenseCount(licenses.length);\n    }\n  }, [licenses, toast, lastLicenseCount]);\n\n  // Otimizado usando useMemo para evitar recálculos desnecessários\n  // Criar interface estendida para a licença com estado específico\n  interface ExtendedLicense extends Omit<LicenseRequest, 'transporterId'> {\n    specificState?: string;\n    specificStateStatus?: string;\n    specificStateFileUrl?: string;\n    stateValidUntil?: string;\n    // Sobrescrever transporterId para aceitar null também\n    transporterId: number | null;\n  }\n\n  // Função para atualizar os dados\n  const handleRefresh = () => {\n    refetch();\n    // Toast para feedback ao usuário\n    toast({\n      title: \"Atualizando dados\",\n      description: \"Buscando as informações mais recentes das licenças.\",\n      duration: 2000,\n    });\n  };\n\n  // Função para ordenar licenças\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      // Se já está ordenando por esta coluna, alterna a direção\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection('asc');\n      } else {\n        setSortDirection('asc');\n      }\n    } else {\n      // Nova coluna selecionada, começa com ascendente\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n\n  interface ExtendedLicenseWithId extends ExtendedLicense {\n    uniqueId?: string;\n  }\n  \n  // Criar uma lista expandida de licenças separadas por estado (sem duplicação quando ordenadas)\n  const expandedLicenses = useMemo(() => {\n    if (!licenses) return [];\n    \n    const result: ExtendedLicenseWithId[] = [];\n    \n    licenses.forEach(license => {\n      // Para cada estado na licença, crie uma entrada específica\n      if (license.states && license.states.length > 0) {\n        license.states.forEach((state, index) => {\n          // Verificar o status para este estado específico\n          const stateStatusEntry = license.stateStatuses?.find(ss => ss.startsWith(`${state}:`));\n          const stateStatus = stateStatusEntry?.split(':')[1];\n          \n          // Verificar se temos uma data de validade no formato estado:status:data\n          const stateValidUntil = stateStatusEntry && stateStatusEntry.split(':').length > 2 ? \n            stateStatusEntry.split(':')[2] : undefined;\n          \n          // Verificar se existe um arquivo específico para este estado\n          const stateFileEntry = license.stateFiles?.find(sf => sf.startsWith(`${state}:`));\n          const stateFileUrl = stateFileEntry ? stateFileEntry.split(':').slice(1).join(':') : undefined;\n          \n          // Criar uma cópia da licença com o estado específico e um ID único\n          const stateLicense: ExtendedLicenseWithId = {\n            ...license,\n            specificState: state,\n            // Substituir o array de estados com apenas este estado\n            states: [state],\n            // Para filtros de status no frontend, usamos o status do estado específico\n            specificStateStatus: stateStatus,\n            // URL do arquivo deste estado específico\n            specificStateFileUrl: stateFileUrl,\n            // Incluir data de validade específica para este estado\n            stateValidUntil: stateValidUntil,\n            // ID único para esta licença expandida\n            uniqueId: `${license.id}-${state}`\n          };\n          \n          result.push(stateLicense);\n        });\n      } else {\n        // Se não houver estados, apenas adicione a licença como está com ID único\n        result.push({\n          ...license,\n          uniqueId: `${license.id}-default`\n        });\n      }\n    });\n    \n    return result;\n  }, [licenses]);\n  \n  // Aplicar filtros à lista expandida\n  const filteredLicenses = useMemo(() => {\n    // Otimização: Evitar processamento se não há dados\n    if (!expandedLicenses || expandedLicenses.length === 0) return [];\n    \n    // Otimização: Preparar valores de busca uma vez só\n    const lowerSearchTerm = searchTerm?.toLowerCase();\n    \n    return expandedLicenses.filter(license => {\n      // Otimização: Busca otimizada com early return\n      if (lowerSearchTerm && \n          !license.requestNumber.toLowerCase().includes(lowerSearchTerm) &&\n          !license.mainVehiclePlate.toLowerCase().includes(lowerSearchTerm)) {\n        return false;\n      }\n      \n      // Filtragem específica por status (geral ou estado específico)\n      if (statusFilter && statusFilter !== \"all_status\") {\n        // Para o status \"Pedido em Cadastramento\", verificar licenças sem status específico de estado\n        if (statusFilter === \"pending_registration\") {\n          // Licença sem status específico ou com status geral pending_registration\n          const matchesStatus = (!license.specificStateStatus || license.specificStateStatus === \"pending_registration\") &&\n                        (!license.stateStatuses || license.stateStatuses.length === 0 || license.status === \"pending_registration\");\n          if (!matchesStatus) return false;\n        } else {\n          // Para outros status, verificar status específico do estado primeiro, depois o status geral\n          const matchesStatus = (license.specificStateStatus === statusFilter) || \n                         (license.status === statusFilter);\n          if (!matchesStatus) return false;\n        }\n      }\n      \n      if (dateFilter && license.createdAt) {\n        const matchesDate = format(new Date(license.createdAt), \"yyyy-MM-dd\") === dateFilter;\n        if (!matchesDate) return false;\n      }\n\n      if (stateFilter && stateFilter !== \"all_states\") {\n        const matchesState = license.specificState === stateFilter;\n        if (!matchesState) return false;\n      }\n      \n      return true;\n    });\n  }, [expandedLicenses, searchTerm, statusFilter, dateFilter, stateFilter]);\n\n  // Ordenar licenças filtradas (sem duplicações)\n  const sortedLicenses = useMemo(() => {\n    if (!sortColumn || !sortDirection) {\n      return filteredLicenses;\n    }\n\n    // Criar uma cópia para ordenação\n    const toSort = [...filteredLicenses];\n    \n    // Definir uma função de ordenação personalizada com base na coluna e direção\n    const getSortValue = (license: ExtendedLicenseWithId, column: string): any => {\n      if (column === 'status') {\n        return license.specificStateStatus || license.status;\n      } else if (column === 'state') {\n        return license.specificState || (license.states && license.states.length > 0 ? license.states[0] : '');\n      } else if (column === 'requestNumber') {\n        return license.requestNumber;\n      } else if (column === 'type') {\n        return license.type;\n      } else if (column === 'mainVehiclePlate') {\n        return license.mainVehiclePlate;\n      } else if (column === 'createdAt') {\n        return license.createdAt ? new Date(license.createdAt).getTime() : 0;\n      } else if (column === 'updatedAt') {\n        return license.updatedAt ? new Date(license.updatedAt).getTime() : 0;\n      } else if (column === 'validUntil') {\n        // Ordenar por data de validade, priorizando a do estado específico\n        const dateStr = license.stateValidUntil || license.validUntil;\n        return dateStr ? new Date(dateStr).getTime() : 0;\n      } else {\n        return license[column as keyof typeof license];\n      }\n    };\n    \n    // Ordenar o array\n    toSort.sort((a, b) => {\n      const aValue = getSortValue(a, sortColumn);\n      const bValue = getSortValue(b, sortColumn);\n      \n      // Valores iguais\n      if (aValue === bValue) return 0;\n      \n      // Tratamento para nulos\n      if (aValue === null || aValue === undefined) {\n        return sortDirection === 'asc' ? 1 : -1;\n      }\n      if (bValue === null || bValue === undefined) {\n        return sortDirection === 'asc' ? -1 : 1;\n      }\n      \n      // Para strings\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue) \n          : bValue.localeCompare(aValue);\n      }\n      \n      // Para números e outros tipos\n      return sortDirection === 'asc' \n        ? (aValue < bValue ? -1 : 1) \n        : (bValue < aValue ? -1 : 1);\n    });\n    \n    return toSort;\n  }, [filteredLicenses, sortColumn, sortDirection]);\n\n  // Hook de paginação aplicado às licenças ordenadas\n  const {\n    paginatedItems: paginatedLicenses,\n    pagination,\n    currentPage,\n    setCurrentPage,\n    searchTerm: paginationSearchTerm,\n    setSearchTerm: setPaginationSearchTerm\n  } = usePaginatedList<ExtendedLicenseWithId>({\n    items: sortedLicenses,\n    itemsPerPage: 10\n  });\n\n  const handleViewLicense = (license: LicenseRequest) => {\n    setSelectedLicense(license);\n  };\n\n  // Função para traduzir tipos de veículos\n  const translateVehicleType = (type: string): string => {\n    const typeMap: { [key: string]: string } = {\n      'truck': 'Caminhão',\n      'bitruck': 'Bitruck',\n      'tractor': 'Cavalo Mecânico',\n      'bitrain_9_axles': 'Bitrem 9 Eixos',\n      'road_train': 'Rodotrem',\n      'simple_trailer': 'Reboque Simples',\n      'semi_trailer': 'Semirreboque',\n      'dolly': 'Dolly',\n      'platform': 'Prancha'\n    };\n    return typeMap[type] || type;\n  };\n\n  // Função para traduzir status\n  const translateStatus = (status: string): string => {\n    const statusMap: { [key: string]: string } = {\n      'pending_registration': 'Pedido em Cadastramento',\n      'registration_in_progress': 'Cadastro em Andamento',\n      'pending_documentation': 'Pendente Documentação',\n      'rejected': 'Reprovado',\n      'under_review': 'Análise do Órgão',\n      'pending_approval': 'Pendente Liberação',\n      'approved': 'Liberada',\n      'canceled': 'Cancelado'\n    };\n    return statusMap[status] || status;\n  };\n\n  // Função para exportar CSV\n  const handleExportCSV = () => {\n    try {\n      const headers = [\n        \"Nº Solicitação\",\n        \"Tipo de Veículo\",\n        \"Placa Principal\",\n        \"Transportador\",\n        \"Estado\",\n        \"Status\",\n        \"Data de Solicitação\",\n        \"Última Atualização\"\n      ];\n\n      const dataForExport = paginatedLicenses.map(license => ({\n        \"Nº Solicitação\": license.requestNumber || '',\n        \"Tipo de Veículo\": translateVehicleType(license.type) || '',\n        \"Placa Principal\": license.mainVehiclePlate || '',\n        \"Transportador\": `ID: ${license.transporterId}`, // Simplificado para exportação\n        \"Estado\": license.specificState || (license.states?.join(', ')) || '',\n        \"Status\": translateStatus(license.specificStateStatus || license.status) || '',\n        \"Data de Solicitação\": formatDateForCSV(license.createdAt),\n        \"Última Atualização\": formatDateForCSV(license.updatedAt)\n      }));\n\n      exportToCSV({\n        filename: \"acompanhar-licencas\",\n        headers,\n        data: dataForExport\n      });\n\n      toast({\n        title: \"Exportação concluída\",\n        description: `${dataForExport.length} licenças exportadas para CSV`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro na exportação\",\n        description: \"Ocorreu um erro ao exportar os dados\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"mb-6 flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Acompanhar Licença</h1>\n          <div className=\"flex items-center gap-2 mt-1\">\n            <p className=\"text-gray-600\">Acompanhe o status de todas as suas licenças solicitadas</p>\n            <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs ${isConnected ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'}`}>\n              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-gray-400'}`}></div>\n              {isConnected ? 'Tempo Real Ativo' : 'Offline'}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={handleExportCSV}\n            variant=\"outline\" \n            className=\"flex items-center gap-1 bg-white border-gray-200\"\n            title=\"Exportar licenças para CSV\"\n            disabled={isLoading || sortedLicenses.length === 0}\n          >\n            <Download className=\"h-4 w-4\" />\n            Exportar CSV\n          </Button>\n          <Button \n            onClick={handleRefresh} \n            variant=\"outline\" \n            className=\"flex items-center gap-1 bg-white\"\n            title=\"Atualizar lista de licenças\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-1\" />\n            Atualizar\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"bg-white p-4 rounded-lg shadow mb-6\">\n        <div className=\"flex flex-wrap gap-4\">\n          <div className=\"w-full md:w-auto flex-1\">\n            <label htmlFor=\"license-search\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Pesquisar\n            </label>\n            <div className=\"relative\">\n              <Input\n                id=\"license-search\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Nº do pedido ou placa...\"\n                className=\"pl-10\"\n              />\n              <span className=\"absolute left-3 top-2.5 text-gray-400\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"w-full md:w-auto\">\n            <label htmlFor=\"status-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Status\n            </label>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Todos os status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all_status\">Todos os status</SelectItem>\n                <SelectItem value=\"pending_registration\">Pedido em Cadastramento</SelectItem>\n                <SelectItem value=\"registration_in_progress\">Cadastro em Andamento</SelectItem>\n                <SelectItem value=\"pending_documentation\">Pendente Documentação</SelectItem>\n                <SelectItem value=\"rejected\">Reprovado</SelectItem>\n                <SelectItem value=\"under_review\">Análise do Órgão</SelectItem>\n                <SelectItem value=\"pending_approval\">Pendente Liberação</SelectItem>\n                <SelectItem value=\"approved\">Liberada</SelectItem>\n                <SelectItem value=\"canceled\">Cancelado</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"w-full md:w-auto\">\n            <label htmlFor=\"state-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Estado\n            </label>\n            <Select value={stateFilter} onValueChange={setStateFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Todos os estados\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all_states\">Todos os estados</SelectItem>\n                {brazilianStates.map((state) => (\n                  <SelectItem key={state.code} value={state.code}>\n                    {state.code} - {state.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"w-full md:w-auto\">\n            <label htmlFor=\"date-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Data\n            </label>\n            <Input\n              id=\"date-filter\"\n              type=\"date\"\n              value={dateFilter}\n              onChange={(e) => setDateFilter(e.target.value)}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Cabeçalho com contador de licenças */}\n      <div className=\"mb-4 flex justify-between items-center\">\n        <div className=\"text-sm text-gray-600\">\n          Mostrando {paginatedLicenses.length > 0 ? ((currentPage - 1) * 10 + 1) : 0}-{Math.min(currentPage * 10, sortedLicenses.length)} de {sortedLicenses.length} licenças\n        </div>\n      </div>\n\n      <LicenseList \n        licenses={paginatedLicenses || []} \n        isLoading={isLoading}\n        onView={handleViewLicense}\n        onRefresh={refetch}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={handleSort}\n      />\n\n      {/* Controles de paginação - Versão desktop */}\n      <div className=\"hidden md:block mt-6\">\n        <ListPagination \n          currentPage={currentPage}\n          totalPages={pagination.totalPages}\n          totalItems={pagination.total}\n          itemsPerPage={pagination.itemsPerPage}\n          hasPrev={pagination.hasPrev}\n          hasNext={pagination.hasNext}\n          startItem={pagination.startItem}\n          endItem={pagination.endItem}\n          onPageChange={setCurrentPage}\n          itemName=\"licenças\"\n        />\n      </div>\n\n      {/* Controles de paginação - Versão mobile */}\n      <div className=\"block md:hidden mt-6\">\n        <MobileListPagination\n          currentPage={currentPage}\n          totalPages={pagination.totalPages}\n          totalItems={pagination.total}\n          itemsPerPage={pagination.itemsPerPage}\n          hasPrev={pagination.hasPrev}\n          hasNext={pagination.hasNext}\n          startItem={pagination.startItem}\n          endItem={pagination.endItem}\n          onPageChange={setCurrentPage}\n          itemName=\"licenças\"\n        />\n      </div>\n\n      {selectedLicense && (\n        <Dialog open={!!selectedLicense} onOpenChange={(open) => !open && setSelectedLicense(null)}>\n          <DialogContent className=\"max-w-[1330px] max-h-[90vh] w-[98vw] overflow-y-auto p-4 sm:p-6\">\n            <DialogHeader className=\"pb-2\">\n              <DialogTitle className=\"text-xl font-bold\">Detalhes da Licença</DialogTitle>\n              <DialogDescription>\n                Visualize os detalhes da sua solicitação\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {/* Fluxo de progresso individualizado por estado */}\n              {selectedLicense.states && selectedLicense.states.length > 0 && (\n                <div className=\"mb-4 p-3 bg-gray-50 rounded-md border border-gray-200\">\n                  <div className=\"grid grid-cols-1 gap-4\">\n                    {selectedLicense.states.map(state => {\n                      // Procura o status para este estado\n                      const stateStatusEntry = selectedLicense.stateStatuses?.find(ss => ss.startsWith(`${state}:`));\n                      const stateStatus = stateStatusEntry?.split(':')[1] || \"pending_registration\";\n                      \n                      // Extrair data de validade\n                      const stateValidUntil = stateStatusEntry && stateStatusEntry.split(':').length > 2 ? \n                        stateStatusEntry.split(':')[2] : undefined;\n                      \n                      return (\n                        <div key={state} className=\"border-b border-gray-200 pb-4 last:border-0 last:pb-0\">\n                          <h4 className=\"font-medium text-sm mb-2\">Fluxo de Progresso da Licença: {state}</h4>\n                          <StateProgressFlow stateStatus={stateStatus} size=\"sm\" className=\"py-1\" />\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              \n              {/* Componente LicenseDetailsCard para exibição dos detalhes */}\n              <LicenseDetailsCard license={selectedLicense} />\n              \n              {/* O bloco de status específico por estado foi removido conforme solicitado */}\n              \n              {selectedLicense.comments && (\n                <div>\n                  <h3 className=\"font-medium text-sm text-gray-500\">Comentários</h3>\n                  <p className=\"text-gray-600 bg-gray-50 p-3 rounded-md border border-gray-200 text-sm\">\n                    {selectedLicense.comments}\n                  </p>\n                </div>\n              )}\n              \n              {/* Área de Status por Estado - Exibindo apenas botões de download para estados liberados */}\n              {selectedLicense.states && selectedLicense.states.length > 0 && (\n                <div className=\"mb-4\">\n                  <h3 className=\"font-medium text-sm text-gray-500 mb-2\">Licenças por Estado</h3>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                    {selectedLicense.states.map(state => {\n                      // Verificar o status para este estado específico\n                      const stateStatusEntry = selectedLicense.stateStatuses?.find(ss => ss.startsWith(`${state}:`));\n                      const stateStatus = stateStatusEntry?.split(':')[1] || \"pending_registration\";\n                      \n                      // Extrair data de validade se existir\n                      const stateValidUntil = stateStatusEntry && stateStatusEntry.split(':').length > 2 ? \n                        stateStatusEntry.split(':')[2] : undefined;\n                      \n                      // Verificar se existe um arquivo específico para este estado\n                      const stateFileEntry = selectedLicense.stateFiles?.find(sf => sf.startsWith(`${state}:`));\n                      const stateFileUrl = stateFileEntry ? stateFileEntry.split(':').slice(1).join(':') : undefined;\n                      \n                      return (\n                        <div \n                          key={state} \n                          className={`p-3 rounded-lg border ${\n                            stateStatus === \"approved\" \n                              ? \"bg-green-50 border-green-200\" \n                              : \"bg-gray-50 border-gray-200\"\n                          }`}\n                        >\n                          <div className=\"flex justify-between items-center\">\n                            <div>\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <span className=\"font-medium\">{state}</span>\n                                <StatusBadge status={stateStatus} />\n                              </div>\n                              <p className=\"text-xs text-gray-600\">\n                                {stateStatus === \"approved\" \n                                  ? stateValidUntil \n                                    ? `Licença liberada para download - Válida até ${new Date(stateValidUntil).toLocaleDateString('pt-BR')}` \n                                    : \"Licença liberada para download\" \n                                  : \"Status em processamento\"}\n                              </p>\n                            </div>\n                            \n                            {stateStatus === \"approved\" && (\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                asChild\n                                className=\"text-green-600 border-green-200\"\n                              >\n                                <a \n                                  href={stateFileUrl || selectedLicense.licenseFileUrl || '#'} \n                                  target=\"_blank\" \n                                  rel=\"noopener noreferrer\"\n                                  onClick={(e) => {\n                                    if (!stateFileUrl && !selectedLicense.licenseFileUrl) {\n                                      e.preventDefault();\n                                      alert('Arquivo da licença não disponível no momento.');\n                                    }\n                                  }}\n                                  className={(!stateFileUrl && !selectedLicense.licenseFileUrl) ? \"opacity-40 cursor-not-allowed\" : \"\"}\n                                >\n                                  <Download className=\"h-4 w-4 mr-1\" /> Download\n                                </a>\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              \n              {/* Arquivo principal da licença (manter para compatibilidade) */}\n              {selectedLicense.status === \"approved\" && selectedLicense.licenseFileUrl && (\n                <div className=\"pt-4\">\n                  <Button asChild className=\"w-full\">\n                    <a href={selectedLicense.licenseFileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                      Download da Licença Completa\n                    </a>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </MainLayout>\n  );\n}\n","size_bytes":29880},"client/src/pages/vehicles-page.tsx":{"content":"import React, { useState, useEffect, useMemo } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { VehicleList } from \"@/components/vehicles/vehicle-list\";\nimport { VehicleForm } from \"@/components/vehicles/vehicle-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Plus, RefreshCw, Download } from \"lucide-react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Vehicle } from \"@shared/schema\";\nimport { Input } from \"@/components/ui/input\";\nimport { useWebSocketContext } from \"@/hooks/use-websocket-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { exportToCSV } from \"@/lib/csv-export\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\n\nexport default function VehiclesPage() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [currentVehicle, setCurrentVehicle] = useState<Vehicle | null>(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { isConnected } = useWebSocketContext();\n  \n  // Checar se existe uma placa pré-preenchida no localStorage\n  // (Vindo de outro componente como a tela de adicionar placas adicionais)\n  useEffect(() => {\n    const preFillPlate = localStorage.getItem('preFillPlate');\n    if (preFillPlate) {\n      // Abre automaticamente o formulário com a placa pré-preenchida\n      setIsFormOpen(true);\n      // Remove do localStorage depois de usar\n      localStorage.removeItem('preFillPlate');\n    }\n  });\n\n  const { data: vehicles, isLoading, refetch } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/vehicles\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/vehicles\", {\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        throw new Error(\"Erro ao buscar veículos\");\n      }\n      return res.json();\n    }\n  });\n\n  // Função de atualização melhorada\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      // Invalidar cache primeiro\n      await queryClient.invalidateQueries({ queryKey: [\"/api/vehicles\"] });\n      \n      // Forçar nova busca\n      await refetch();\n      \n      toast({\n        title: \"Lista atualizada\",\n        description: \"A lista de veículos foi atualizada com sucesso.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao atualizar\",\n        description: \"Não foi possível atualizar a lista de veículos.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const filteredVehicles = useMemo(() => {\n    if (!vehicles) return [];\n    return vehicles.filter(vehicle => {\n      const matchesSearch = !searchTerm || \n        vehicle.plate.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesType = !typeFilter || typeFilter === \"all_types\" || vehicle.type === typeFilter;\n      const matchesStatus = !statusFilter || statusFilter === \"all_status\" || vehicle.status === statusFilter;\n      return matchesSearch && matchesType && matchesStatus;\n    });\n  }, [vehicles, searchTerm, typeFilter, statusFilter]);\n\n  const handleAddVehicle = () => {\n    setCurrentVehicle(null);\n    setIsFormOpen(true);\n  };\n\n  const handleEditVehicle = (vehicle: Vehicle) => {\n    setCurrentVehicle(vehicle);\n    setIsFormOpen(true);\n  };\n\n  const handleFormClose = () => {\n    setIsFormOpen(false);\n    setCurrentVehicle(null);\n  };\n\n  const handleFormSuccess = async () => {\n    try {\n      // Invalidar cache e atualizar dados\n      await queryClient.invalidateQueries({ queryKey: [\"/api/vehicles\"] });\n      await refetch();\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Veículo salvo com sucesso.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Aviso\",\n        description: \"Veículo salvo, mas pode ser necessário atualizar a lista.\",\n        variant: \"default\",\n      });\n    } finally {\n      setIsFormOpen(false);\n      setCurrentVehicle(null);\n    }\n  };\n\n  const handleExportCSV = () => {\n    if (!vehicles || vehicles.length === 0) {\n      toast({\n        title: \"Nenhum dado para exportar\",\n        description: \"Não há veículos para exportar\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const headers = [\n        \"ID\",\n        \"Placa\",\n        \"Tipo\",\n        \"Marca\",\n        \"Modelo\",\n        \"Ano\",\n        \"Tara (kg)\",\n        \"Eixos\",\n        \"Status\",\n        \"Transportador\"\n      ];\n\n      const getVehicleTypeLabel = (type: string) => {\n        const types: Record<string, string> = {\n          tractor_unit: \"Unidade Tratora\",\n          semi_trailer: \"Semirreboque\",\n          trailer: \"Reboque\",\n          dolly: \"Dolly\",\n          flatbed: \"Prancha\"\n        };\n        return types[type] || type;\n      };\n\n      const formattedData = vehicles.map((vehicle) => ({\n        ID: vehicle.id,\n        Placa: vehicle.plate,\n        Tipo: getVehicleTypeLabel(vehicle.type),\n        Marca: vehicle.brand || \"-\",\n        Modelo: vehicle.model || \"-\",\n        Ano: vehicle.year || \"-\",\n        \"Tara (kg)\": vehicle.tare || \"-\",\n        Eixos: vehicle.axleCount || \"-\",\n        Status: vehicle.status === \"active\" ? \"Ativo\" : \n                vehicle.status === \"inactive\" ? \"Inativo\" : \n                vehicle.status === \"maintenance\" ? \"Manutenção\" : vehicle.status,\n        Transportador: \"-\" // Campo removido da exportação\n      }));\n\n      exportToCSV({\n        filename: \"veiculos\",\n        headers,\n        data: formattedData\n      });\n\n      toast({\n        title: \"Exportação concluída\",\n        description: `${vehicles.length} veículos exportados com sucesso`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro na exportação\",\n        description: \"Ocorreu um erro ao exportar os dados\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0 mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Veículos Cadastrados</h1>\n          <p className=\"text-gray-600 mt-1\">Gerencie todos os veículos cadastrados no sistema</p>\n        </div>\n        <div className=\"flex gap-2 w-full sm:w-auto\">\n          <Button \n            onClick={handleRefresh}\n            variant=\"outline\" \n            className={`flex items-center gap-1 bg-white ${isConnected ? 'border-green-200' : 'border-gray-200'}`}\n            title={`Atualizar lista de veículos ${isConnected ? '(Tempo real ativo)' : '(Offline)'}`}\n            disabled={isRefreshing || isLoading}\n          >\n            <div className=\"flex items-center\">\n              <RefreshCw className={`h-4 w-4 mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />\n              {isConnected && (\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\" title=\"Conectado em tempo real\" />\n              )}\n            </div>\n            {isRefreshing ? 'Atualizando...' : 'Atualizar'}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleExportCSV}\n            disabled={isLoading}\n            title=\"Exportar dados dos veículos\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Exportar\n          </Button>\n          <Button onClick={handleAddVehicle} className=\"w-full sm:w-auto\">\n            <Plus className=\"mr-2 h-4 w-4\" /> Cadastrar Veículo\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"bg-white p-4 rounded-lg shadow mb-6\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <div className=\"w-full\">\n            <label htmlFor=\"vehicle-search\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Pesquisar\n            </label>\n            <div className=\"relative\">\n              <Input\n                id=\"vehicle-search\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Placa ou tipo de veículo...\"\n                className=\"pl-10\"\n              />\n              <span className=\"absolute left-3 top-2.5 text-gray-400\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"w-full\">\n            <label htmlFor=\"type-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Tipo de Veículo\n            </label>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Todos os tipos\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all_types\">Todos os tipos</SelectItem>\n                <SelectItem value=\"tractor_unit\">Unidade Tratora (Cavalo)</SelectItem>\n                <SelectItem value=\"semi_trailer\">Semirreboque</SelectItem>\n                <SelectItem value=\"trailer\">Reboque</SelectItem>\n                <SelectItem value=\"dolly\">Dolly</SelectItem>\n                <SelectItem value=\"flatbed\">Prancha</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"w-full\">\n            <label htmlFor=\"status-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Status\n            </label>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Todos os status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all_status\">Todos os status</SelectItem>\n                <SelectItem value=\"active\">Ativo</SelectItem>\n                <SelectItem value=\"maintenance\">Em Manutenção</SelectItem>\n                <SelectItem value=\"inactive\">Inativo</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      <VehicleList \n        vehicles={filteredVehicles || []} \n        isLoading={isLoading} \n        onEdit={handleEditVehicle}\n        onRefresh={handleRefresh}\n      />\n\n      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n        <DialogContent className=\"sm:max-w-[520px] p-0 max-h-[90vh] overflow-auto\" hideCloseButton>\n          <DialogTitle className=\"sr-only\">\n            {currentVehicle ? \"Editar Veículo\" : \"Cadastrar Veículo\"}\n          </DialogTitle>\n          <VehicleForm \n            vehicle={currentVehicle as any} \n            onSuccess={handleFormSuccess} \n            onCancel={handleFormClose}\n          />\n        </DialogContent>\n      </Dialog>\n    </MainLayout>\n  );\n}\n","size_bytes":11286},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, hashPassword } from \"./auth\";\nimport { db, pool } from \"./db\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { \n  insertUserSchema, \n  insertVehicleSchema, \n  insertLicenseRequestSchema, \n  insertDraftLicenseSchema, \n  updateLicenseStatusSchema,\n  updateLicenseStateSchema,\n  insertStatusHistorySchema,\n  insertVehicleModelSchema,\n  insertBoletoSchema,\n  LicenseStatus,\n  userRoleEnum,\n  licenseRequests,\n  transporters,\n  statusHistories,\n  vehicles,\n  boletos,\n  stateLicenses\n} from \"@shared/schema\";\nimport { \n  canAccessRoute, \n  hasPermission, \n  canAccessModule, \n  isAdministrativeRole,\n  type UserRole \n} from \"@shared/permissions\";\nimport { eq, and, or, desc, ilike, gte, lte, count, asc, like, not, sql, exists, inArray, isNull, gt, ne, isNotNull } from \"drizzle-orm\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { ZodError } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport * as fs from \"fs\";\nimport { promisify } from \"util\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { withCache, invalidateCache, appCache } from \"./cache\";\n\n// Set up file storage for uploads - configuração robusta para produção\nconst getUploadDir = () => {\n  // Configurações específicas por ambiente\n  const possiblePaths = [\n    process.env.UPLOAD_DIR, // Variável de ambiente personalizada\n    '/home/servidorvoipnvs/uploads', // Diretório específico do usuário no servidor Google\n    '/var/www/uploads', // Diretório web padrão\n    '/var/uploads', // Padrão para produção\n    '/tmp/uploads', // Fallback temporário\n    path.join(process.cwd(), '..', 'uploads'), // Um nível acima do projeto\n    path.join(process.cwd(), 'storage'), // Dentro do projeto como storage\n    path.join(process.cwd(), 'uploads') // Último recurso dentro do projeto\n  ].filter(Boolean);\n\n  for (const uploadPath of possiblePaths) {\n    try {\n      // Tentar criar o diretório com permissões adequadas\n      if (!fs.existsSync(uploadPath!)) {\n        fs.mkdirSync(uploadPath!, { recursive: true, mode: 0o755 });\n      }\n      \n      // Criar subdiretórios necessários\n      const subDirs = ['vehicles', 'transporters', 'boletos'];\n      subDirs.forEach(subDir => {\n        const subPath = path.join(uploadPath!, subDir);\n        if (!fs.existsSync(subPath)) {\n          fs.mkdirSync(subPath, { recursive: true, mode: 0o755 });\n        }\n      });\n      \n      // Testar se consegue escrever no diretório\n      const testFile = path.join(uploadPath!, '.write-test');\n      fs.writeFileSync(testFile, 'test');\n      fs.unlinkSync(testFile);\n      \n      console.log(`[UPLOAD] ✅ Usando diretório: ${uploadPath}`);\n      console.log(`[UPLOAD] 📁 Subdiretórios criados: ${subDirs.join(', ')}`);\n      return uploadPath!;\n    } catch (error) {\n      console.warn(`[UPLOAD] ❌ Falha em ${uploadPath}:`, (error as Error).message);\n      continue;\n    }\n  }\n  \n  throw new Error('❌ Nenhum diretório de upload válido encontrado');\n};\n\nconst uploadDir = getUploadDir();\n\n// Configuração de storage com lógica de nomeação específica\nconst storage_config = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, uploadDir);\n  },\n  filename: function (req, file, cb) {\n    const ext = path.extname(file.originalname);\n    \n    console.log(`[UPLOAD NAMING] Campo: ${file.fieldname}, Arquivo original: ${file.originalname}`);\n    console.log(`[UPLOAD NAMING] Dados do request:`, {\n      state: req.body?.state,\n      aetNumber: req.body?.aetNumber,\n      validUntil: req.body?.validUntil\n    });\n    \n    // Para CRLV de veículos - manter nome original\n    if (file.fieldname === 'crlvFile' || file.fieldname.includes('crlv')) {\n      // Sanitizar o nome original para evitar problemas de caracteres especiais\n      const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n      console.log(`[UPLOAD NAMING] CRLV: mantendo nome original sanitizado: ${originalName}`);\n      cb(null, originalName);\n      return;\n    }\n    \n    // Para arquivos de estado de licenças liberadas - MANTER NOME ORIGINAL\n    if (file.fieldname === 'stateFile' || file.fieldname.includes('stateFile')) {\n      // **NOVA REGRA**: Arquivos de licenças emitidas devem manter o nome original\n      const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n      console.log(`[UPLOAD NAMING] StateFile: mantendo nome original sanitizado: ${originalName}`);\n      cb(null, originalName);\n      return;\n    }\n    \n    // Para outros tipos de arquivos - usar padrão padrão\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const genericFilename = file.fieldname + '-' + uniqueSuffix + ext;\n    console.log(`[UPLOAD NAMING] Genérico: ${genericFilename}`);\n    cb(null, genericFilename);\n  }\n});\n\nconst fileFilter = (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n  // Accept only images and PDFs\n  if (file.mimetype.startsWith('image/') || file.mimetype === 'application/pdf') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\n\nconst csvFileFilter = (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n  // Accept only CSV files\n  if (file.mimetype === 'text/csv' || file.originalname.toLowerCase().endsWith('.csv')) {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\n\n// Middleware para processar dados do veículo, tanto de FormData quanto JSON direto\nconst processVehicleData = (req: any, res: any, next: any) => {\n  console.log('Processing request body:', req.body);\n  \n  // Se tiver contentType application/json, já está processado como JSON\n  const contentType = req.headers['content-type'] || '';\n  \n  // Caso 1: Dados no formato FormData com campo vehicleData (abordagem antiga)\n  if (req.body && req.body.vehicleData) {\n    try {\n      if (typeof req.body.vehicleData === 'string' && req.body.vehicleData.trim().length > 0) {\n        req.body = {\n          ...req.body,\n          ...JSON.parse(req.body.vehicleData)\n        };\n        console.log('Processed vehicle data from vehicleData field:', req.body);\n      } else {\n        console.error('Campo vehicleData está vazio ou não é uma string válida:', req.body.vehicleData);\n      }\n    } catch (error) {\n      console.error('Error parsing vehicleData JSON:', error);\n      console.error('Conteúdo do campo vehicleData:', req.body.vehicleData);\n    }\n  } \n  // Caso 2: FormData com campos individuais (nossa nova abordagem)\n  else if (contentType.includes('multipart/form-data') && req.body) {\n    // Campos individuais já estão acessíveis em req.body\n    console.log('Using form-data fields directly:', req.body);\n    \n    // Tratar campos que podem vir como arrays (problema do form-data duplicado)\n    Object.keys(req.body).forEach(key => {\n      if (Array.isArray(req.body[key])) {\n        // Usar o primeiro valor se for array\n        req.body[key] = req.body[key][0];\n      }\n    });\n    \n    // Garantir que números são convertidos corretamente\n    if (req.body.tare) req.body.tare = Number(req.body.tare);\n    if (req.body.crlvYear) req.body.crlvYear = Number(req.body.crlvYear);\n    if (req.body.year) req.body.year = Number(req.body.year);\n    if (req.body.axleCount) req.body.axleCount = Number(req.body.axleCount);\n    if (req.body.cmt) req.body.cmt = Number(req.body.cmt);\n  }\n  // Caso 3: JSON direto (nossa nova abordagem para requests sem arquivo)\n  else if (contentType.includes('application/json')) {\n    // Já processado como JSON pelo bodyParser\n    console.log('Request is already in JSON format:', req.body);\n  }\n  \n  console.log('Final vehicle data for processing:', req.body);\n  next();\n};\n\nconst upload = multer({ \n  storage: storage_config,\n  fileFilter,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB max file size\n  }\n});\n\n// Upload específico para CSV (sem fileFilter)\nconst uploadCSV = multer({\n  storage: multer.memoryStorage(), // Usar memória para CSV\n  fileFilter: csvFileFilter,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB max para CSV\n  }\n});\n\n// Authentication middleware\nconst requireAuth = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Não autenticado\" });\n  }\n  next();\n};\n\n// Admin middleware\nconst requireAdmin = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Não autenticado\" });\n  }\n  \n  if (!req.user!.isAdmin) {\n    return res.status(403).json({ message: \"Acesso negado\" });\n  }\n  \n  next();\n};\n\n// Middleware para usuários com papel Operacional\nconst requireOperational = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Não autenticado\" });\n  }\n  \n  // Verifica se o usuário tem papel Operacional, Supervisor ou Admin\n  const hasPermission = req.user!.role === 'operational' || \n                       req.user!.role === 'supervisor' || \n                       req.user!.isAdmin;\n  \n  if (!hasPermission) {\n    return res.status(403).json({ \n      message: \"Acesso negado. Apenas usuários com perfil Operacional ou Supervisor podem acessar.\" \n    });\n  }\n  \n  next();\n};\n\n// Middleware para usuários com papel Supervisor\nconst requireSupervisor = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Não autenticado\" });\n  }\n  \n  // Verifica se o usuário tem papel Supervisor\n  if (req.user!.role !== 'supervisor' && !req.user!.isAdmin) {\n    return res.status(403).json({ \n      message: \"Acesso negado. Apenas usuários com perfil Supervisor podem acessar.\" \n    });\n  }\n  \n  next();\n};\n\n// Middleware para verificar se o usuário é dono do recurso ou tem papel de staff\nconst requireOwnerOrStaff = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Não autenticado\" });\n  }\n  \n  // Os perfis que podem acessar recursos de outros usuários\n  const isStaff = ['operational', 'supervisor'].includes(req.user!.role) || req.user!.isAdmin;\n  \n  // Se o usuário não é staff, verifica se é o dono do recurso\n  if (!isStaff) {\n    const resourceUserId = parseInt(req.params.userId);\n    if (req.user!.id !== resourceUserId) {\n      return res.status(403).json({ \n        message: \"Acesso negado. Você só pode acessar seus próprios dados.\" \n      });\n    }\n  }\n  \n  next();\n};\n\n// Tipo para as mensagens WebSocket\ninterface WSMessage {\n  type: 'STATUS_UPDATE' | 'LICENSE_UPDATE' | 'DASHBOARD_UPDATE' | 'VEHICLE_UPDATE' | 'TRANSPORTER_UPDATE' | 'USER_UPDATE' | 'ACTIVITY_LOG_UPDATE' | 'CACHE_INVALIDATION';\n  data: any;\n}\n\n// Armazenamento de clientes WebSocket\nconst wsClients: Set<WebSocket> = new Set();\n\n// Função para sincronizar licença aprovada com tabela licencas_emitidas\nasync function sincronizarLicencaEmitida(licenca: any, estado: string, numeroAet: string, dataValidade: string) {\n  try {\n    // Buscar informações dos veículos associados\n    let placaTratora = licenca.mainVehiclePlate || null;\n    let placaPrimeiraCarreta: string | null = null;\n    let placaSegundaCarreta: string | null = null;\n    let placaDolly: string | null = null;\n    let placaPrancha: string | null = null;\n    let placaReboque: string | null = null;\n\n    // Obter placas dos veículos por ID se existirem\n    if (licenca.tractorUnitId) {\n      const tractorQuery = 'SELECT plate FROM vehicles WHERE id = $1';\n      const tractorResult = await pool.query(tractorQuery, [licenca.tractorUnitId]);\n      if (tractorResult.rows.length > 0) {\n        placaTratora = tractorResult.rows[0].plate;\n      }\n    }\n\n    if (licenca.firstTrailerId) {\n      const firstTrailerQuery = 'SELECT plate FROM vehicles WHERE id = $1';\n      const firstTrailerResult = await pool.query(firstTrailerQuery, [licenca.firstTrailerId]);\n      if (firstTrailerResult.rows.length > 0) {\n        placaPrimeiraCarreta = firstTrailerResult.rows[0].plate as string;\n      }\n    }\n\n    if (licenca.secondTrailerId) {\n      const secondTrailerQuery = 'SELECT plate FROM vehicles WHERE id = $1';\n      const secondTrailerResult = await pool.query(secondTrailerQuery, [licenca.secondTrailerId]);\n      if (secondTrailerResult.rows.length > 0) {\n        placaSegundaCarreta = secondTrailerResult.rows[0].plate as string;\n      }\n    }\n\n    if (licenca.dollyId) {\n      const dollyQuery = 'SELECT plate FROM vehicles WHERE id = $1';\n      const dollyResult = await pool.query(dollyQuery, [licenca.dollyId]);\n      if (dollyResult.rows.length > 0) {\n        placaDolly = dollyResult.rows[0].plate as string;\n      }\n    }\n\n    if (licenca.flatbedId) {\n      const flatbedQuery = 'SELECT plate FROM vehicles WHERE id = $1';\n      const flatbedResult = await pool.query(flatbedQuery, [licenca.flatbedId]);\n      if (flatbedResult.rows.length > 0) {\n        placaPrancha = flatbedResult.rows[0].plate as string;\n      }\n    }\n\n    // Adicionar placas adicionais se existirem\n    if (licenca.additionalPlates && Array.isArray(licenca.additionalPlates)) {\n      licenca.additionalPlates.forEach((placa: string, index: number) => {\n        if (placa) {\n          if (index === 0 && !placaPrimeiraCarreta) placaPrimeiraCarreta = placa;\n          else if (index === 1 && !placaSegundaCarreta) placaSegundaCarreta = placa;\n          else if (index === 2 && !placaDolly) placaDolly = placa;\n          else if (index === 3 && !placaPrancha) placaPrancha = placa;\n          else if (index === 4 && !placaReboque) placaReboque = placa;\n        }\n      });\n    }\n\n    // Verificar se já existe uma entrada para esta licença e estado\n    const existingQuery = `\n      SELECT id FROM licencas_emitidas \n      WHERE pedido_id = $1 AND estado = $2\n    `;\n    const existingResult = await pool.query(existingQuery, [licenca.id, estado]);\n\n    if (existingResult.rows.length > 0) {\n      // Atualizar entrada existente\n      const updateQuery = `\n        UPDATE licencas_emitidas SET\n          numero_licenca = $3,\n          data_validade = $4,\n          status = 'emitida',\n          placa_unidade_tratora = $5,\n          placa_primeira_carreta = $6,\n          placa_segunda_carreta = $7,\n          placa_dolly = $8,\n          placa_prancha = $9,\n          placa_reboque = $10,\n          updated_at = CURRENT_TIMESTAMP\n        WHERE pedido_id = $1 AND estado = $2\n      `;\n      await pool.query(updateQuery, [\n        licenca.id, estado, numeroAet, dataValidade,\n        placaTratora, placaPrimeiraCarreta, placaSegundaCarreta,\n        placaDolly, placaPrancha, placaReboque\n      ]);\n    } else {\n      // Inserir nova entrada\n      const insertQuery = `\n        INSERT INTO licencas_emitidas (\n          pedido_id, estado, numero_licenca, data_validade, status,\n          placa_unidade_tratora, placa_primeira_carreta, placa_segunda_carreta,\n          placa_dolly, placa_prancha, placa_reboque, created_at, updated_at\n        ) VALUES ($1, $2, $3, $4, 'emitida', $5, $6, $7, $8, $9, $10, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n      `;\n      await pool.query(insertQuery, [\n        licenca.id, estado, numeroAet, dataValidade,\n        placaTratora, placaPrimeiraCarreta, placaSegundaCarreta,\n        placaDolly, placaPrancha, placaReboque\n      ]);\n    }\n\n    console.log(`Licença emitida sincronizada: ${numeroAet} para estado ${estado}`);\n  } catch (error) {\n    console.error('Erro ao sincronizar licença emitida:', error);\n    throw error;\n  }\n}\n\n// Função para sincronizar todas as licenças aprovadas existentes\nasync function sincronizarTodasLicencasAprovadas() {\n  try {\n    console.log('[SINCRONIZAÇÃO EM LOTE] Iniciando sincronização de todas as licenças aprovadas...');\n    \n    // Buscar todas as licenças não-rascunho\n    const licencasQuery = `\n      SELECT * FROM license_requests \n      WHERE is_draft = false \n      AND state_statuses IS NOT NULL \n      AND array_length(state_statuses, 1) > 0\n    `;\n    \n    const licencasResult = await pool.query(licencasQuery);\n    let totalSincronizadas = 0;\n    \n    for (const licenca of licencasResult.rows) {\n      if (licenca.state_statuses && Array.isArray(licenca.state_statuses)) {\n        for (const stateStatus of licenca.state_statuses) {\n          // Parse do formato: \"ESTADO:status:data_validade:data_emissao\"\n          const parts = stateStatus.split(':');\n          if (parts.length >= 4 && (parts[1] === 'approved' || parts[1] === 'released')) {\n            const estado = parts[0];\n            const dataValidade = parts[2];\n            const dataEmissao = parts[3];\n            \n            // Buscar número AET do stateAETNumbers\n            let numeroAet = `AET-${estado}-${licenca.id}`;\n            if (licenca.state_aet_numbers && Array.isArray(licenca.state_aet_numbers)) {\n              const aetEntry = licenca.state_aet_numbers.find((entry: string) => entry.startsWith(`${estado}:`));\n              if (aetEntry) {\n                numeroAet = aetEntry.split(':')[1];\n              }\n            }\n            \n            try {\n              await sincronizarLicencaEmitida(licenca, estado, numeroAet, dataValidade);\n              totalSincronizadas++;\n              console.log(`[SINCRONIZAÇÃO EM LOTE] Sincronizada: Licença ${licenca.id}, Estado ${estado}`);\n            } catch (error) {\n              console.error(`[SINCRONIZAÇÃO EM LOTE] Erro na licença ${licenca.id}, estado ${estado}:`, error);\n            }\n          }\n        }\n      }\n    }\n    \n    console.log(`[SINCRONIZAÇÃO EM LOTE] Concluída: ${totalSincronizadas} licenças sincronizadas`);\n  } catch (error) {\n    console.error('[SINCRONIZAÇÃO EM LOTE] Erro geral:', error);\n  }\n}\n\n// Função para transmitir mensagens a todos os clientes conectados\nconst broadcastMessage = (message: WSMessage) => {\n  let activeClients = 0;\n  let sentMessages = 0;\n  \n  wsClients.forEach(client => {\n    try {\n      if (client.readyState === WebSocket.OPEN) {\n        activeClients++;\n        client.send(JSON.stringify(message));\n        sentMessages++;\n      } else {\n        wsClients.delete(client);\n      }\n    } catch (error) {\n      console.error('Erro ao enviar mensagem WebSocket:', error);\n      wsClients.delete(client);\n    }\n  });\n  \n  console.log(`📡 WebSocket: ${message.type} enviado para ${sentMessages}/${activeClients} clientes`);\n};\n\n// Funções auxiliares para diferentes tipos de atualizações\nconst broadcastLicenseUpdate = (licenseId: number, action: string, license?: any) => {\n  broadcastMessage({\n    type: 'LICENSE_UPDATE',\n    data: {\n      licenseId,\n      action, // 'created', 'updated', 'deleted', 'status_changed'\n      license,\n      timestamp: new Date().toISOString()\n    }\n  });\n};\n\nconst broadcastDashboardUpdate = () => {\n  broadcastMessage({\n    type: 'DASHBOARD_UPDATE',\n    data: {\n      action: 'refresh_stats',\n      timestamp: new Date().toISOString()\n    }\n  });\n};\n\nconst broadcastVehicleUpdate = (vehicleId: number, action: string, vehicle?: any) => {\n  broadcastMessage({\n    type: 'VEHICLE_UPDATE',\n    data: {\n      vehicleId,\n      action, // 'created', 'updated', 'deleted'\n      vehicle,\n      timestamp: new Date().toISOString()\n    }\n  });\n};\n\nconst broadcastTransporterUpdate = (transporterId: number, action: string, transporter?: any) => {\n  broadcastMessage({\n    type: 'TRANSPORTER_UPDATE',\n    data: {\n      transporterId,\n      action, // 'created', 'updated', 'deleted'\n      transporter,\n      timestamp: new Date().toISOString()\n    }\n  });\n};\n\nconst broadcastActivityLog = (logEntry: any) => {\n  broadcastMessage({\n    type: 'ACTIVITY_LOG_UPDATE',\n    data: {\n      action: 'new_entry',\n      logEntry,\n      timestamp: new Date().toISOString()\n    }\n  });\n};\n\nconst broadcastCacheInvalidation = (queryKeys: string[]) => {\n  broadcastMessage({\n    type: 'CACHE_INVALIDATION',\n    data: {\n      queryKeys,\n      timestamp: new Date().toISOString()\n    }\n  });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Log para todas as requisições PATCH\n  app.use((req, res, next) => {\n    if (req.method === 'PATCH') {\n      console.log(`=== PATCH REQUEST: ${req.url} ===`);\n    }\n    next();\n  });\n  \n  // Setup authentication routes\n  setupAuth(app);\n\n  // Servir arquivos estáticos da pasta uploads\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n  \n  // Criar o servidor HTTP (definido apenas uma vez)\n  const httpServer = createServer(app);\n  \n  // Configurar o WebSocketServer\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('Novo cliente WebSocket conectado');\n    wsClients.add(ws);\n    \n    ws.on('message', (message) => {\n      console.log('Mensagem recebida:', message.toString());\n    });\n    \n    ws.on('close', () => {\n      console.log('Cliente WebSocket desconectado');\n      wsClients.delete(ws);\n    });\n    \n    ws.on('error', (error) => {\n      console.error('Erro na conexão WebSocket:', error);\n      wsClients.delete(ws);\n    });\n    \n    // Enviar mensagem inicial para confirmar conexão\n    ws.send(JSON.stringify({ \n      type: 'CONNECTED', \n      message: 'Conectado ao servidor',\n      timestamp: new Date().toISOString()\n    }));\n  });\n\n  // Cache para armazenar tokens de acesso\n  let accessToken: string | undefined = undefined;\n  let tokenExpiration: number = 0;\n\n  // Função para obter token de acesso\n  async function getAccessToken() {\n    try {\n      // Verificar se o token atual ainda é válido\n      if (accessToken && tokenExpiration > Date.now()) {\n        return accessToken;\n      }\n\n      // Configurar a solicitação para obter o token\n      const tokenUrl = 'https://h-apigateway.conectagov.estaleiro.serpro.gov.br/oauth2/jwt-token';\n      const params = new URLSearchParams({\n        grant_type: 'client_credentials',\n      });\n\n      // Usar chave fornecida pelo cliente\n      const authHeader = 'Basic ' + Buffer.from(\n        `${process.env.GOV_BR_CLIENT_ID || 'client-id'}:${process.env.GOV_BR_CLIENT_SECRET || 'client-secret'}`\n      ).toString('base64');\n\n      // Fazer a solicitação para obter o token\n      const response = await fetch(tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': authHeader\n        },\n        body: params\n      });\n\n      if (!response.ok) {\n        // Se a resposta não for OK, tentar extrair o erro\n        const errorText = await response.text();\n        console.error('Erro ao obter token de acesso:', errorText);\n        throw new Error(`Erro ao obter token: ${response.status} ${response.statusText}`);\n      }\n\n      // Extrair o token de acesso da resposta\n      const data = await response.json();\n      accessToken = data.access_token;\n      // Calcular a expiração (normalmente em segundos) e converter para timestamp\n      tokenExpiration = Date.now() + (data.expires_in * 1000) - 60000; // 1 minuto antes para evitar problemas\n      \n      return accessToken;\n    } catch (error) {\n      console.error('Erro ao obter token de acesso:', error);\n      throw error;\n    }\n  }\n\n  // Endpoint de API para consulta de CNPJ - usando ReceitaWS\n  app.get('/api/external/cnpj/:cnpj', async (req, res) => {\n    // Definir explicitamente cabeçalhos para evitar intercepção pelo Vite\n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    try {\n      const { cnpj } = req.params;\n      const cleanCnpj = cnpj.replace(/[^\\d]/g, '');\n      console.log(`[DEBUG] Consultando CNPJ via ReceitaWS: ${cleanCnpj}`);\n      \n      if (cleanCnpj.length !== 14) {\n        console.log(`[DEBUG] CNPJ inválido: ${cleanCnpj}`);\n        return res.status(400).json({ error: 'CNPJ deve conter 14 dígitos' });\n      }\n      \n      // Configurar a solicitação para a ReceitaWS (API pública sem autenticação - consulta básica)\n      const receitaWsUrl = `https://www.receitaws.com.br/v1/cnpj/${cleanCnpj}`;\n      console.log(`[DEBUG] URL da ReceitaWS: ${receitaWsUrl}`);\n      \n      // Fazer a solicitação à ReceitaWS\n      console.log(`[DEBUG] Enviando solicitação para ReceitaWS`);\n      const response = await fetch(receitaWsUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (compatible; AETLicencasApp/1.0)',\n        }\n      });\n      console.log(`[DEBUG] Resposta da ReceitaWS: ${response.status} ${response.statusText}`);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`[DEBUG] Erro na resposta da ReceitaWS: ${response.status} ${response.statusText}`, errorText);\n        throw new Error(`Erro ao consultar ReceitaWS: ${response.status}`);\n      }\n\n      // Processar a resposta da API\n      console.log(`[DEBUG] Processando resposta da ReceitaWS`);\n      const apiData = await response.json();\n      console.log(`[DEBUG] Dados recebidos:`, JSON.stringify(apiData));\n      \n      // Verificar se a API retornou um erro no corpo da resposta\n      if (apiData.status === 'ERROR') {\n        console.error(`[DEBUG] Erro reportado pela ReceitaWS:`, apiData.message);\n        throw new Error(apiData.message || 'Erro na consulta do CNPJ');\n      }\n      \n      // Mapear os dados da ReceitaWS para o formato esperado pelo frontend\n      const dadosEmpresa = {\n        razao_social: apiData.nome || '',\n        nome_fantasia: apiData.fantasia || '',\n        logradouro: apiData.logradouro || '',\n        numero: apiData.numero || '',\n        complemento: apiData.complemento || '',\n        bairro: apiData.bairro || '',\n        cep: apiData.cep?.replace(/\\D/g, '') || '',\n        municipio: apiData.municipio || '',\n        uf: apiData.uf || ''\n      };\n      console.log(`[DEBUG] Dados mapeados:`, JSON.stringify(dadosEmpresa));\n\n      return res.json(dadosEmpresa);\n    } catch (error) {\n      console.error('[DEBUG] Erro ao processar consulta CNPJ via ReceitaWS:', error);\n      return res.status(503).json({ \n        error: 'Não foi possível realizar a consulta do CNPJ', \n        message: error instanceof Error ? error.message : 'Erro ao verificar dados do CNPJ',\n        details: 'Não foi possível consultar o CNPJ. Prossiga com o cadastro inserindo os dados manualmente.',\n        service_unavailable: true\n      });\n    }\n  });\n  \n  // API antiga - manter temporariamente para compatibilidade durante a transição\n  app.get('/api/cnpj/:cnpj', async (req, res) => {\n    const { cnpj } = req.params;\n    const cleanCnpj = cnpj.replace(/[^\\d]/g, '');\n    \n    // Verificação de credenciais para avaliação\n    if (!process.env.GOV_BR_CLIENT_ID || !process.env.GOV_BR_CLIENT_SECRET) {\n      return res.status(500).json({ \n        error: 'Credenciais não configuradas',\n        message: 'As credenciais da API Gov.br não estão configuradas corretamente'\n      });\n    }\n    \n    // Retornar erro indicando que a consulta requer credenciais\n    return res.status(503).json({\n      error: 'Serviço temporariamente indisponível',\n      message: 'O serviço de consulta de CNPJ requer credenciais válidas da API Gov.br Connect',\n      instructions: 'Entre em contato com o administrador do sistema para configurar as credenciais de integração'\n    });\n  });\n\n  // Dashboard Stats - NOVA IMPLEMENTAÇÃO SEGMENTADA\n  app.get('/api/dashboard/stats', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const userRole = req.user!.role;\n      const userEmail = req.user!.email;\n      \n      // Evitar cache\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      \n      const isAdmin = userRole === 'admin' || userRole === 'supervisor' || userRole === 'manager' || userRole === 'financial';\n      \n      if (isAdmin) {\n        // Estatísticas globais para admin\n        const allLicenses = await db.select().from(licenseRequests).where(eq(licenseRequests.isDraft, false));\n        const allVehicles = await db.select().from(vehicles);\n        const allActiveVehicles = allVehicles.filter(v => v.status === 'active');\n        \n        // Contar licenças emitidas (com pelo menos um estado aprovado)\n        const globalIssuedLicenses = allLicenses.filter(license => {\n          if (!license.stateStatuses || license.stateStatuses.length === 0) return false;\n          return license.stateStatuses.some(status => status.includes(':approved:'));\n        });\n        \n        const globalPendingLicenses = allLicenses.filter(license => {\n          if (!license.stateStatuses || license.stateStatuses.length === 0) return true;\n          return !license.stateStatuses.some(status => status.includes(':approved:'));\n        });\n        \n        const recentLicenses = await db.select()\n          .from(licenseRequests)\n          .where(eq(licenseRequests.isDraft, false))\n          .orderBy(desc(licenseRequests.createdAt))\n          .limit(5);\n        \n        const adminStats = {\n          issuedLicenses: globalIssuedLicenses.length,\n          pendingLicenses: globalPendingLicenses.length,\n          registeredVehicles: allVehicles.length,\n          activeVehicles: allActiveVehicles.length,\n          recentLicenses: recentLicenses.map(license => ({\n            id: license.id,\n            requestNumber: license.requestNumber,\n            type: license.type,\n            mainVehiclePlate: license.mainVehiclePlate,\n            states: license.states,\n            status: license.status,\n            createdAt: license.createdAt\n          }))\n        };\n        \n        res.json(adminStats);\n        \n      } else {\n        // Performance: Log removido\n        \n        // Buscar transportadores associados ao usuário\n        const userTransporters = await db.select()\n          .from(transporters)\n          .where(eq(transporters.userId, userId));\n        \n        const transporterIds = userTransporters.map(t => t.id);\n        // Performance: Log removido\n        \n        // Buscar apenas veículos do usuário específico\n        const userVehicles = await db.select()\n          .from(vehicles)\n          .where(eq(vehicles.userId, userId));\n        \n        const userActiveVehicles = userVehicles.filter(v => v.status === 'active');\n        \n        // Performance: Log removido\n        \n        // Buscar licenças do usuário e transportadores associados\n        let userLicenses = [];\n        if (transporterIds.length > 0) {\n          userLicenses = await db.select()\n            .from(licenseRequests)\n            .where(and(\n              eq(licenseRequests.isDraft, false),\n              or(\n                eq(licenseRequests.userId, userId),\n                inArray(licenseRequests.transporterId, transporterIds)\n              )\n            ));\n        } else {\n          userLicenses = await db.select()\n            .from(licenseRequests)\n            .where(and(\n              eq(licenseRequests.userId, userId),\n              eq(licenseRequests.isDraft, false)\n            ));\n        }\n        \n        // Performance: Log removido\n        \n        // APLICAR EXATAMENTE A MESMA FUNÇÃO expandedLicenses da página \"Licenças Emitidas\"\n        const expandedLicenses: any[] = [];\n        \n        userLicenses.forEach(license => {\n          // Para cada licença, expandir para uma linha por estado que tenha sido aprovado\n          license.states.forEach((state, index) => {\n            // Verifica se este estado específico foi aprovado\n            const stateStatusEntry = license.stateStatuses?.find(entry => entry.startsWith(`${state}:`));\n            const stateStatus = stateStatusEntry?.split(':')?.[1] || 'pending_registration';\n            const stateFileEntry = license.stateFiles?.find(entry => entry.startsWith(`${state}:`));\n            const stateFileUrl = stateFileEntry?.split(':')?.[1] || null;\n            \n            // Só incluir estados com status \"approved\"\n            if (stateStatus === 'approved') {\n              // Obter data de validade específica para este estado, se disponível\n              let stateValidUntil = license.validUntil ? license.validUntil.toString() : null;\n              \n              // Novo formato: \"estado:status:data_validade\"\n              if (stateStatusEntry && stateStatusEntry.split(':').length > 2) {\n                // Extrair data de validade do formato estado:status:data\n                stateValidUntil = stateStatusEntry.split(':')[2];\n              }\n              \n              // Obter número AET específico para este estado, se disponível\n              let stateAETNumber = null;\n              \n              // Verificar primeiro no array stateAETNumbers (formato \"SP:123456\")\n              if (license.stateAETNumbers && Array.isArray(license.stateAETNumbers)) {\n                const aetEntry = license.stateAETNumbers.find(entry => entry.startsWith(`${state}:`));\n                if (aetEntry) {\n                  const parts = aetEntry.split(':');\n                  if (parts.length >= 2) {\n                    stateAETNumber = parts[1];\n                  }\n                }\n              }\n              \n              // Se não encontrou no stateAETNumbers, tentar no campo aetNumber (legado)\n              if (!stateAETNumber && license.aetNumber) {\n                stateAETNumber = license.aetNumber;\n              }\n              \n              expandedLicenses.push({\n                id: license.id * 100 + index, // Gerar ID único para a linha\n                licenseId: license.id,\n                requestNumber: license.requestNumber,\n                type: license.type,\n                mainVehiclePlate: license.mainVehiclePlate,\n                state,\n                status: stateStatus,\n                stateStatus,\n                emissionDate: license.updatedAt ? license.updatedAt.toString() : null,\n                validUntil: stateValidUntil,\n                licenseFileUrl: license.licenseFileUrl,\n                stateFileUrl,\n                transporterId: license.transporterId || 0,\n                aetNumber: stateAETNumber // Usar o número AET específico do estado\n              });\n            }\n          });\n        });\n        \n        // Função getLicenseStatus IDÊNTICA à da página \"Licenças Emitidas\"\n        const getLicenseStatus = (validUntil: string | null): 'active' | 'expired' | 'expiring_soon' => {\n          if (!validUntil) return 'active';\n          \n          const validDate = new Date(validUntil);\n          const today = new Date();\n          \n          // Se a validade é antes de hoje (vencida)\n          if (validDate < today) {\n            return 'expired';\n          }\n          \n          // Se a validade é menos de 30 dias a partir de hoje\n          const diffInDays = Math.ceil((validDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n          if (diffInDays <= 30) {\n            return 'expiring_soon';\n          }\n          \n          return 'active';\n        };\n        \n        // Contar usando expandedLicenses (EXATAMENTE como na página \"Licenças Emitidas\")\n        const userIssuedLicensesCount = expandedLicenses.length;\n        const userExpiringLicensesCount = expandedLicenses.filter(l => getLicenseStatus(l.validUntil) === 'expiring_soon').length;\n        \n        console.log(`[DASHBOARD EXPANDEDLICENSES] Total: ${userIssuedLicensesCount}, A vencer: ${userExpiringLicensesCount}`);\n        \n        const userPendingLicenses = userLicenses.filter(license => {\n          if (!license.stateStatuses || license.stateStatuses.length === 0) return true;\n          return !license.stateStatuses.some(status => status.includes(':approved:'));\n        });\n        \n        // Buscar licenças recentes do usuário\n        let recentUserLicenses = [];\n        if (transporterIds.length > 0) {\n          recentUserLicenses = await db.select()\n            .from(licenseRequests)\n            .where(and(\n              eq(licenseRequests.isDraft, false),\n              or(\n                eq(licenseRequests.userId, userId),\n                inArray(licenseRequests.transporterId, transporterIds)\n              )\n            ))\n            .orderBy(desc(licenseRequests.createdAt))\n            .limit(5);\n        } else {\n          recentUserLicenses = await db.select()\n            .from(licenseRequests)\n            .where(and(\n              eq(licenseRequests.userId, userId),\n              eq(licenseRequests.isDraft, false)\n            ))\n            .orderBy(desc(licenseRequests.createdAt))\n            .limit(5);\n        }\n        \n        const transporterStats = {\n          issuedLicenses: userIssuedLicensesCount,\n          pendingLicenses: userPendingLicenses.length,\n          registeredVehicles: userVehicles.length,\n          activeVehicles: userActiveVehicles.length,\n          expiringLicenses: userExpiringLicensesCount,\n          recentLicenses: recentUserLicenses.map(license => ({\n            id: license.id,\n            requestNumber: license.requestNumber,\n            type: license.type,\n            mainVehiclePlate: license.mainVehiclePlate,\n            states: license.states,\n            status: license.status,\n            createdAt: license.createdAt\n          }))\n        };\n        \n        console.log(`[DASHBOARD NEW] TRANSPORTADOR - Retornando:`, transporterStats);\n        res.json(transporterStats);\n      }\n    } catch (error) {\n      console.error('[DASHBOARD NEW] Erro:', error);\n      res.status(500).json({ message: 'Erro ao buscar estatísticas do dashboard' });\n    }\n  });\n\n  app.get('/api/dashboard/vehicle-stats', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const role = req.user!.role;\n      \n      // Cache otimizado para estatísticas de veículos\n      const cacheKey = `dashboard:vehicle-stats:${userId}:${role}`;\n      \n      const stats = await withCache(cacheKey, async () => {\n        return await storage.getVehicleStats(userId);\n      }, 3); // Cache por 3 minutos\n      \n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching vehicle stats:', error);\n      res.status(500).json({ message: 'Erro ao buscar estatísticas de veículos' });\n    }\n  });\n\n  app.get('/api/dashboard/state-stats', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const role = req.user!.role;\n      \n      // Cache otimizado para estatísticas por estado\n      const cacheKey = `dashboard:state-stats:${userId}:${role}`;\n      \n      const stats = await withCache(cacheKey, async () => {\n        return await storage.getStateStats(userId);\n      }, 5); // Cache por 5 minutos (dados menos voláteis)\n      \n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching state stats:', error);\n      res.status(500).json({ message: 'Erro ao buscar estatísticas por estado' });\n    }\n  });\n  \n  // Endpoint otimizado para busca de transportadores (para formulários)\n  app.get('/api/transporters/search', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const { search = '', limit = '20' } = req.query;\n      \n      let transporters = [];\n      const maxLimit = Math.min(parseInt(limit as string), 50); // Otimizado: máximo 50 para melhor performance\n      \n      // Obter transportadores vinculados ao usuário (não todos do sistema)\n      let userTransporters = [];\n      if (isAdministrativeRole(user.role as UserRole)) {\n        // Usuários administrativos veem todos os transportadores\n        userTransporters = await storage.getAllTransporters();\n      } else {\n        // Usuários comuns veem apenas transportadores vinculados\n        userTransporters = await storage.getUserTransporters(user.id);\n      }\n      \n      // Buscar transportadores com base no termo de busca\n      if (typeof search === 'string' && search.trim().length > 0) {\n        const searchTerm = search.trim().toLowerCase();\n        \n        transporters = userTransporters.filter(transporter => {\n          // Busca por nome (case insensitive)\n          const nameMatch = transporter.name.toLowerCase().includes(searchTerm);\n          \n          // Busca por CNPJ/CPF (apenas números)\n          const numericSearch = searchTerm.replace(/\\D/g, '');\n          const documentMatch = numericSearch && transporter.documentNumber && \n                               transporter.documentNumber.replace(/\\D/g, '').includes(numericSearch);\n          \n          // Busca por nome fantasia\n          const tradeNameMatch = transporter.tradeName && \n                                transporter.tradeName.toLowerCase().includes(searchTerm);\n          \n          return nameMatch || documentMatch || tradeNameMatch;\n        }).slice(0, maxLimit);\n        \n      } else {\n        // Se não há termo de busca, retornar os transportadores do usuário (limitado)\n        transporters = userTransporters.slice(0, maxLimit);\n      }\n      \n      // Performance: Log removido\n      \n      res.json({\n        transporters,\n        total: transporters.length,\n        limit: maxLimit\n      });\n      \n    } catch (error) {\n      console.error('[TRANSPORTER SEARCH] Erro:', error);\n      res.status(500).json({ \n        transporters: [],\n        error: 'Erro ao buscar transportadores' \n      });\n    }\n  });\n\n  // Endpoint para buscar transportadores vinculados ao usuário\n  app.get('/api/user/transporters', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const userId = user.id;\n      \n      console.log(`[DEBUG TRANSPORTERS] Usuário ${user.email} (ID: ${userId}, role: ${user.role}) buscando transportadores`);\n      \n      // Buscar todos os transportadores\n      const allTransporters = await storage.getAllTransporters();\n      console.log(`[DEBUG TRANSPORTERS] Total de transportadores no sistema: ${allTransporters.length}`);\n      \n      // Se for um usuário administrativo, retornar todos os transportadores\n      if (isAdminUser(user)) {\n        console.log(`[DEBUG TRANSPORTERS] Usuário admin - retornando todos os ${allTransporters.length} transportadores`);\n        return res.json(allTransporters);\n      }\n      \n      // Para usuários comuns, filtrar apenas os vinculados ao usuário atual\n      const userTransporters = allTransporters.filter(t => t.userId === userId);\n      console.log(`[DEBUG TRANSPORTERS] Usuário comum - encontrou ${userTransporters.length} transportadores vinculados de ${allTransporters.length} total`);\n      \n      if (userTransporters.length === 0) {\n        console.log(`[DEBUG TRANSPORTERS] IDs de transportadores disponíveis: ${allTransporters.map(t => `${t.id}:${t.userId || 'null'}`).join(', ')}`);\n        console.log(`[DEBUG TRANSPORTERS] Usuário ${userId} não encontrou transportadores. Verificando vinculações...`);\n      } else {\n        console.log(`[DEBUG TRANSPORTERS] Transportadores vinculados ao usuário ${userId}: ${userTransporters.map(t => `${t.name} (ID: ${t.id})`).join(', ')}`);\n      }\n      \n      res.json(userTransporters);\n    } catch (error) {\n      console.error('Error fetching user transporters:', error);\n      res.status(500).json({ message: 'Erro ao buscar transportadores do usuário' });\n    }\n  });\n  \n  // Endpoint para buscar um transportador específico por ID (acessível a todos usuários autenticados)\n  app.get('/api/transporters/:id', requireAuth, async (req, res) => {\n    try {\n      const transporterId = parseInt(req.params.id);\n      \n      const transporter = await storage.getTransporterById(transporterId);\n      if (!transporter) {\n        return res.status(404).json({ message: \"Transportador não encontrado\" });\n      }\n      \n      res.json(transporter);\n    } catch (error) {\n      console.error(\"Erro ao buscar transportador:\", error);\n      res.status(500).json({ message: \"Erro ao buscar transportador\" });\n    }\n  });\n  \n  // Endpoint público para acessar dados básicos de transportadores\n  // Usado pelo componente TransporterInfo para exibir informações em licenças\n  app.get('/api/public/transporters/:id', async (req, res) => {\n    try {\n      const transporterId = parseInt(req.params.id);\n      \n      const transporter = await storage.getTransporterById(transporterId);\n      if (!transporter) {\n        return res.status(404).json({ message: \"Transportador não encontrado\" });\n      }\n      \n      // Retorne apenas os dados públicos necessários incluindo filiais\n      const publicData = {\n        id: transporter.id,\n        name: transporter.name,\n        tradeName: transporter.tradeName,\n        personType: transporter.personType,\n        documentNumber: transporter.documentNumber,\n        city: transporter.city,\n        state: transporter.state,\n        email: transporter.email,\n        phone: transporter.phone,\n        subsidiaries: transporter.subsidiaries || []\n      };\n      \n      res.json(publicData);\n    } catch (error) {\n      console.error(\"Erro ao buscar transportador por ID (público):\", error);\n      res.status(500).json({ message: \"Erro ao buscar detalhes do transportador\" });\n    }\n  });\n\n  // Função auxiliar para verificar se um usuário tem papel administrativo\n  function isAdminUser(user: Express.User): boolean {\n    const adminRoles = ['admin', 'manager', 'supervisor', 'financial', 'operational'];\n    return adminRoles.includes(user.role);\n  }\n\n  function canManageTransporters(user: Express.User): boolean {\n    // Permitir para usuários operacionais, supervisores e admins\n    return user.role === 'operational' || \n           user.role === 'supervisor' || \n           user.role === 'admin' ||\n           user.isAdmin ||\n           hasPermission(user.role as UserRole, 'transporters', 'edit');\n  }\n\n  function canManageVehicleModels(user: Express.User): boolean {\n    return hasPermission(user.role as UserRole, 'vehicleModels', 'edit');\n  }\n\n  // Middleware para verificar permissões específicas\n  function requirePermission(module: keyof import(\"@shared/permissions\").ModulePermissions, action: keyof import(\"@shared/permissions\").Permission) {\n    return (req: any, res: any, next: any) => {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Não autenticado\" });\n      }\n\n      const userRole = req.user.role as UserRole;\n      if (!hasPermission(userRole, module, action)) {\n        return res.status(403).json({ message: \"Acesso negado - permissão insuficiente\" });\n      }\n\n      next();\n    };\n  }\n\n  // Middleware para verificar acesso a rotas específicas\n  function requireRouteAccess() {\n    return (req: any, res: any, next: any) => {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Não autenticado\" });\n      }\n\n      const userRole = req.user.role as UserRole;\n      const method = req.method;\n      const path = req.path;\n\n      if (!canAccessRoute(userRole, method, path)) {\n        return res.status(403).json({ message: \"Acesso negado - operação não permitida\" });\n      }\n\n      next();\n    };\n  }\n  \n  // Vehicles CRUD endpoints\n  app.get('/api/vehicles', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      let vehicles;\n      \n      // Se for usuário com papel administrativo, buscar todos os veículos\n      if (isAdminUser(user)) {\n        vehicles = await storage.getAllVehicles();\n      } else {\n        // Buscar transportadores vinculados ao usuário\n        const allTransporters = await storage.getAllTransporters();\n        const userTransporters = allTransporters.filter(t => t.userId === user.id);\n        \n        if (userTransporters.length > 0) {\n          // Se tem transportadores vinculados, buscar veículos associados a esses transportadores\n          vehicles = await storage.getVehiclesByUserId(user.id);\n        } else {\n          vehicles = await storage.getVehiclesByUserId(user.id);\n        }\n      }\n\n      // Enriquecer veículos com dados do transportador para exportações CSV\n      const allTransporters = await storage.getAllTransporters();\n      const vehiclesWithTransporter = vehicles.map(vehicle => {\n        const transporter = allTransporters.find(t => t.id === (vehicle as any).transporterId);\n        return {\n          ...vehicle,\n          transporter: transporter ? {\n            id: transporter.id,\n            name: transporter.name,\n            tradeName: transporter.tradeName,\n            documentNumber: transporter.documentNumber\n          } : null\n        };\n      });\n      \n      res.json(vehiclesWithTransporter);\n    } catch (error) {\n      console.error('Error fetching vehicles:', error);\n      res.status(500).json({ message: 'Erro ao buscar veículos' });\n    }\n  });\n\n  // Endpoint para busca paginada de veículos (otimizado para formulários)\n  app.get('/api/vehicles/search-paginated', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const search = (req.query.search as string) || '';\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = Math.min(parseInt(req.query.limit as string) || 10, 50); // Max 50 por página\n      const vehicleType = req.query.type as string;\n      const axleFilter = req.query.axles ? parseInt(req.query.axles as string) : null; // NOVO: Filtro de eixos\n      const offset = (page - 1) * limit;\n      \n      let allVehicles;\n      \n      // Determinar quais veículos o usuário pode acessar\n      if (isAdminUser(user)) {\n        allVehicles = await storage.getAllVehicles();\n      } else {\n        allVehicles = await storage.getVehiclesByUserId(user.id);\n      }\n      \n      // Filtrar por busca de texto (placa, marca, modelo)\n      let filteredVehicles = allVehicles;\n      if (search.trim()) {\n        const searchLower = search.toLowerCase();\n        filteredVehicles = allVehicles.filter(vehicle =>\n          vehicle.plate.toLowerCase().includes(searchLower) ||\n          (vehicle.brand && vehicle.brand.toLowerCase().includes(searchLower)) ||\n          (vehicle.model && vehicle.model.toLowerCase().includes(searchLower))\n        );\n      }\n      \n      // Filtrar por tipo de veículo se especificado\n      if (vehicleType) {\n        filteredVehicles = filteredVehicles.filter(vehicle => \n          vehicle.type === vehicleType\n        );\n      }\n      \n      // CRÍTICO: Filtrar por número de eixos se especificado\n      if (axleFilter !== null) {\n        const originalCount = filteredVehicles.length;\n        filteredVehicles = filteredVehicles.filter(vehicle => \n          vehicle.axleCount === axleFilter\n        );\n        // Performance: Log de filtro removido\n      }\n      \n      // Ordenar por placa\n      filteredVehicles.sort((a, b) => a.plate.localeCompare(b.plate));\n      \n      const total = filteredVehicles.length;\n      const paginatedVehicles = filteredVehicles.slice(offset, offset + limit);\n      const hasMore = offset + limit < total;\n      \n      // Performance: Log removido\n      \n      res.json({\n        vehicles: paginatedVehicles,\n        total,\n        hasMore,\n        page,\n        limit\n      });\n    } catch (error) {\n      console.error('Error in paginated vehicle search:', error);\n      res.status(500).json({ message: 'Erro ao buscar veículos' });\n    }\n  });\n  \n  // Buscar veículo por ID\n  app.get('/api/vehicles/:id([0-9]+)', async (req, res) => {\n    try {\n      const vehicleId = parseInt(req.params.id);\n      \n      const vehicle = await storage.getVehicleById(vehicleId);\n      if (!vehicle) {\n        return res.status(404).json({ message: 'Veículo não encontrado' });\n      }\n      \n      // Definir explicitamente o content-type\n      res.setHeader('Content-Type', 'application/json');\n      res.json(vehicle);\n    } catch (error) {\n      console.error('Error fetching vehicle by ID:', error);\n      res.status(500).json({ message: 'Erro ao buscar veículo pelo ID' });\n    }\n  });\n\n  // Buscar veículo por placa\n  app.get('/api/vehicles/by-plate/:plate', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const plate = req.params.plate.toUpperCase();\n      \n      // Buscar veículos do usuário\n      const vehicles = await storage.getVehiclesByUserId(userId);\n      \n      // Encontrar o veículo com a placa correspondente\n      const vehicle = vehicles.find(v => v.plate.toUpperCase() === plate);\n      \n      if (!vehicle) {\n        return res.status(404).json({ message: 'Veículo não encontrado' });\n      }\n      \n      res.json(vehicle);\n    } catch (error) {\n      console.error('Error fetching vehicle by plate:', error);\n      res.status(500).json({ message: 'Erro ao buscar veículo pela placa' });\n    }\n  });\n  \n  // Endpoint público para buscar veículo por placa (para uso em licenças)\n  app.get('/api/public/vehicle-by-plate/:plate', async (req, res) => {\n    try {\n      const plate = req.params.plate.toUpperCase();\n      \n      console.log(`Buscando veículo com a placa: ${plate}`);\n      \n      // Buscar todos os veículos\n      const allVehicles = await storage.getAllVehicles();\n      console.log(`Total de veículos encontrados: ${allVehicles.length}`);\n      \n      // Buscar todas as placas disponíveis para debug\n      const availablePlates = allVehicles.map(v => v.plate);\n      console.log('Placas disponíveis:', availablePlates.join(', '));\n      \n      // Encontrar o veículo com a placa correspondente\n      const vehicle = allVehicles.find(v => v.plate.toUpperCase() === plate);\n      \n      if (!vehicle) {\n        console.log(`Veículo não encontrado com a placa ${plate}`);\n        return res.status(404).json({ message: 'Veículo não encontrado' });\n      }\n      \n      console.log(`Veículo encontrado:`, vehicle);\n      res.json(vehicle);\n    } catch (error) {\n      console.error('Error fetching vehicle by plate (public):', error);\n      res.status(500).json({ message: 'Erro ao buscar veículo pela placa' });\n    }\n  });\n  \n  // Endpoint para buscar todos os veículos (para sugestões de placas)\n  // Mantemos a rota original que requer autenticação\n  app.get('/api/vehicles/all', requireAuth, async (req, res) => {\n    try {\n      // Retorna uma lista simplificada de todos os veículos (apenas id, placa e tipo)\n      const vehicles = await storage.getAllVehicles();\n      const simplifiedVehicles = vehicles.map(v => ({\n        id: v.id,\n        plate: v.plate,\n        type: v.type\n      }));\n      res.json(simplifiedVehicles);\n    } catch (error) {\n      console.error('Error fetching all vehicles:', error);\n      res.status(500).json({ message: 'Erro ao buscar lista de veículos' });\n    }\n  });\n  \n  // Criamos uma nova rota pública específica para sugestões de placas\n  app.get('/api/public/vehicle-plates', async (req, res) => {\n    try {\n      // Retorna apenas as placas de todos os veículos, sem autenticação\n      console.log(\"Recebida requisição para sugestões públicas de placas\");\n      const vehicles = await storage.getAllVehicles();\n      console.log(`Encontrados ${vehicles.length} veículos para sugestões`);\n      \n      // Extraímos apenas as placas únicas\n      const uniquePlates = Array.from(new Set(vehicles.map(v => v.plate)));\n      console.log(`${uniquePlates.length} placas únicas disponíveis para sugestão`);\n      \n      res.json(uniquePlates);\n    } catch (error) {\n      console.error('Error fetching vehicle plates:', error);\n      res.status(500).json({ message: 'Erro ao buscar sugestões de placas' });\n    }\n  });\n\n  app.post('/api/vehicles', requireAuth, upload.single('crlvFile'), processVehicleData, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      \n      // Para usuários administrativos, não vincular o veículo a eles\n      // Deixar como \"Usuário undefined\" (userId = null)\n      const isAdministrativeUser = isAdminUser(currentUser);\n      const userId = isAdministrativeUser ? null : currentUser.id;\n      \n      console.log(`[VEHICLE CREATION] Usuário: ${currentUser.email} (${currentUser.role}), Administrativo: ${isAdministrativeUser}, userId assinado: ${userId}`);\n      \n      // Extrair dados do campo vehicleData (JSON string)\n      let vehicleData;\n      \n      // Já processado pelo middleware processVehicleData\n      vehicleData = { ...req.body };\n      delete vehicleData.vehicleData; // Remove o campo vehicleData se presente\n      console.log('Using processed vehicle data:', vehicleData);\n      \n      // Debug: log the request body\n      console.log('Vehicle data received:', vehicleData);\n      \n      // Forçar conversão de todos os campos numéricos\n      const processedData = {\n        ...vehicleData,\n        year: parseInt(vehicleData.year),\n        axleCount: parseInt(vehicleData.axleCount),\n        tare: parseFloat(vehicleData.tare),\n        crlvYear: vehicleData.crlvYear ? parseInt(vehicleData.crlvYear) : undefined\n      };\n\n      console.log('Data after conversion:', processedData);\n\n      // Validate vehicle data com dados já convertidos\n      const validationResult = insertVehicleSchema.safeParse(processedData);\n      if (!validationResult.success) {\n        console.log('Validation error:', validationResult.error);\n        const validationError = fromZodError(validationResult.error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      // Usar os dados validados\n      vehicleData = validationResult.data;\n      \n      // Add file URL if provided\n      let crlvUrl: string | undefined = undefined;\n      if (req.file) {\n        crlvUrl = `/uploads/${req.file.filename}`;\n      }\n      \n      const vehicle = await storage.createVehicle(userId, {\n        ...vehicleData,\n        crlvUrl\n      });\n      \n      // Invalidar cache relacionado a veículos\n      invalidateCache('vehicles', vehicle.userId || undefined);\n      \n      // Enviar notificação WebSocket para novo veículo criado\n      broadcastMessage({\n        type: 'LICENSE_UPDATE',\n        data: {\n          vehicleId: vehicle.id,\n          userId: vehicle.userId,\n          action: 'VEHICLE_CREATED',\n          createdAt: new Date().toISOString(),\n          vehicle: vehicle\n        }\n      });\n      \n      res.status(201).json(vehicle);\n    } catch (error) {\n      console.error('Error creating vehicle:', error);\n      res.status(500).json({ message: 'Erro ao criar veículo' });\n    }\n  });\n\n  app.put('/api/vehicles/:id', requireAuth, upload.single('crlvFile'), processVehicleData, async (req, res) => {\n    console.log('=== INICIO UPDATE VEHICLE ===');\n    console.log('req.params.id:', req.params.id);\n    console.log('req.body:', req.body);\n    console.log('req.file:', req.file);\n    \n    try {\n      const user = req.user!;\n      const userId = user.id;\n      const vehicleId = parseInt(req.params.id);\n      \n      console.log('User ID:', userId, 'Vehicle ID:', vehicleId);\n      \n      // Check if vehicle exists\n      const existingVehicle = await storage.getVehicleById(vehicleId);\n      if (!existingVehicle) {\n        return res.status(404).json({ message: 'Veículo não encontrado' });\n      }\n      \n      // Verificar se o usuário tem permissão para editar o veículo\n      // Usuários comuns podem editar apenas seus próprios veículos\n      // Administradores, Operacionais e Supervisores podem editar qualquer veículo\n      const isStaff = isAdminUser(user) || user.role === 'operational' || user.role === 'supervisor';\n      \n      if (!isStaff && existingVehicle.userId !== userId) {\n        console.log(`Usuário ${userId} (${user.role}) tentou editar veículo ${vehicleId} do usuário ${existingVehicle.userId}`);\n        return res.status(403).json({ message: 'Acesso negado' });\n      }\n      \n      console.log(`Usuário ${userId} (${user.role}) autorizado a editar veículo ${vehicleId}`);\n      \n      \n      // Extrair dados do campo vehicleData (JSON string)\n      let vehicleData;\n      \n      // Já processado pelo middleware processVehicleData\n      vehicleData = { ...req.body };\n      delete vehicleData.vehicleData; // Remove o campo vehicleData se presente\n      console.log('Using processed vehicle update data:', vehicleData);\n      \n      // Processar dados para validação - converter tipos conforme esperado pelo schema\n      const processedUpdateData = {\n        ...vehicleData,\n        ...(vehicleData.year && { year: parseInt(vehicleData.year) }),\n        ...(vehicleData.axleCount && { axleCount: parseInt(vehicleData.axleCount) }),\n        ...(vehicleData.tare && { tare: parseFloat(vehicleData.tare) }),\n        ...(vehicleData.crlvYear && { crlvYear: parseInt(vehicleData.crlvYear) })\n      };\n\n      console.log('Data after conversion for update:', processedUpdateData);\n\n      // Validate vehicle data\n      const updateValidationResult = insertVehicleSchema.partial().safeParse(processedUpdateData);\n      if (!updateValidationResult.success) {\n        console.log('Validation error on update:', updateValidationResult.error);\n        const validationError = fromZodError(updateValidationResult.error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      // Preparar dados para o storage com conversão de tipos explícita\n      console.log('Dados validados recebidos:', updateValidationResult.data);\n      \n      const storageData: any = {};\n      \n      // Copiar todos os campos validados\n      Object.keys(updateValidationResult.data).forEach(key => {\n        const value = (updateValidationResult.data as any)[key];\n        if (value !== undefined) {\n          // Converter tare especificamente para string\n          if (key === 'tare') {\n            console.log(`Convertendo tare de ${value} (${typeof value}) para string`);\n            storageData[key] = value.toString();\n          } else {\n            storageData[key] = value;\n          }\n        }\n      });\n      \n      // Add file URL if provided\n      if (req.file) {\n        storageData.crlvUrl = `/uploads/${req.file.filename}`;\n      }\n      \n      console.log('Dados preparados para storage:', storageData);\n      \n      const updatedVehicle = await storage.updateVehicle(vehicleId, storageData);\n      console.log('Veículo atualizado com sucesso:', updatedVehicle);\n      \n      // Invalidar cache relacionado a veículos\n      invalidateCache('vehicles', existingVehicle.userId || undefined);\n      \n      // Enviar notificação WebSocket para veículo atualizado\n      broadcastVehicleUpdate(updatedVehicle.id, 'updated', updatedVehicle);\n      \n      res.json(updatedVehicle);\n    } catch (error) {\n      console.error('Error updating vehicle:', error);\n      res.status(500).json({ message: 'Erro ao atualizar veículo' });\n    }\n  });\n\n  app.delete('/api/vehicles/:id', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const userId = user.id;\n      const vehicleId = parseInt(req.params.id);\n      \n      // Check if vehicle exists\n      const existingVehicle = await storage.getVehicleById(vehicleId);\n      if (!existingVehicle) {\n        return res.status(404).json({ message: 'Veículo não encontrado' });\n      }\n      \n      // Verificar se o usuário tem permissão para excluir o veículo\n      // Usuários comuns podem excluir apenas seus próprios veículos\n      // Administradores, Operacionais e Supervisores podem excluir qualquer veículo\n      const isStaff = isAdminUser(user) || user.role === 'operational' || user.role === 'supervisor';\n      \n      if (!isStaff && existingVehicle.userId !== userId) {\n        console.log(`Usuário ${userId} (${user.role}) tentou excluir veículo ${vehicleId} do usuário ${existingVehicle.userId}`);\n        return res.status(403).json({ message: 'Acesso negado' });\n      }\n      \n      console.log(`Usuário ${userId} (${user.role}) autorizado a excluir veículo ${vehicleId}`);\n      \n      \n      await storage.deleteVehicle(vehicleId);\n      \n      // Invalidar cache relacionado a veículos\n      invalidateCache('vehicles', existingVehicle.userId || undefined);\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting vehicle:', error);\n      res.status(500).json({ message: 'Erro ao excluir veículo' });\n    }\n  });\n\n  // License draft endpoints\n  app.get('/api/licenses/drafts', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      console.log(`[DRAFTS ENDPOINT] Usuário ${user.email} buscando rascunhos com parâmetros:`, req.query);\n      let allDrafts = [];\n      \n      // Se for usuário administrativo, buscar todos os rascunhos\n      if (isAdminUser(user)) {\n        console.log(`Usuário ${user.email} (${user.role}) tem acesso administrativo. Buscando todos os rascunhos.`);\n        \n        // Consulta simples direta no banco\n        const query = await db.execute(sql`\n          SELECT * FROM license_requests WHERE is_draft = true\n        `);\n        \n        // Mapear resultados da consulta SQL direta para o formato esperado\n        allDrafts = query.rows.map(row => {\n          // Converter campos tipo array\n          let states = row.states;\n          if (typeof states === 'string' && states.startsWith('{') && states.endsWith('}')) {\n            states = states.substring(1, states.length - 1).split(',');\n          }\n          \n          return {\n            ...row,\n            id: Number(row.id),\n            userId: Number(row.user_id),\n            transporterId: Number(row.transporter_id),\n            isDraft: row.is_draft === true,\n            tractorUnitId: row.tractor_unit_id ? Number(row.tractor_unit_id) : null,\n            firstTrailerId: row.first_trailer_id ? Number(row.first_trailer_id) : null,\n            secondTrailerId: row.second_trailer_id ? Number(row.second_trailer_id) : null,\n            dollyId: row.dolly_id ? Number(row.dolly_id) : null,\n            flatbedId: row.flatbed_id ? Number(row.flatbed_id) : null,\n            requestNumber: row.request_number,\n            status: row.status,\n            states: states,\n            createdAt: row.created_at,\n            updatedAt: row.updated_at,\n            comments: row.comments,\n            cargoType: row.cargo_type,\n            mainVehiclePlate: row.main_vehicle_plate,\n            type: row.type,\n            length: row.length,\n            width: row.width,\n            height: row.height,\n            additionalPlates: row.additional_plates || [],\n            additionalPlatesDocuments: row.additional_plates_documents || [],\n          }\n        });\n      } else {\n        console.log(`Usuário ${user.email} (${user.role}) tem acesso comum. Buscando apenas seus rascunhos.`);\n        \n        // Buscar rascunhos por userId\n        const userDraftsQuery = await db.execute(sql`\n          SELECT * FROM license_requests WHERE is_draft = true AND user_id = ${user.id}\n        `);\n        \n        // Buscar transportadores do usuário individualmente\n        const transportersQuery = await db.execute(sql`\n          SELECT id FROM transporters WHERE user_id = ${user.id}\n        `);\n        \n        const transporterIds = transportersQuery.rows.map(t => Number(t.id));\n        console.log(`[DEBUG RASCUNHOS] Transportadores associados ao usuário ${user.id}: ${transporterIds.join(', ')}`);\n        \n        // Mapear resultados do usuário para o formato de objeto\n        const userDrafts = userDraftsQuery.rows.map(row => {\n          // Converter campos tipo array\n          let states = row.states;\n          if (typeof states === 'string' && states.startsWith('{') && states.endsWith('}')) {\n            states = states.substring(1, states.length - 1).split(',');\n          }\n          \n          return {\n            ...row,\n            id: Number(row.id),\n            userId: Number(row.user_id),\n            transporterId: Number(row.transporter_id),\n            isDraft: row.is_draft === true,\n            tractorUnitId: row.tractor_unit_id ? Number(row.tractor_unit_id) : null,\n            firstTrailerId: row.first_trailer_id ? Number(row.first_trailer_id) : null,\n            secondTrailerId: row.second_trailer_id ? Number(row.second_trailer_id) : null,\n            dollyId: row.dolly_id ? Number(row.dolly_id) : null,\n            flatbedId: row.flatbed_id ? Number(row.flatbed_id) : null,\n            requestNumber: row.request_number,\n            status: row.status,\n            states: states,\n            createdAt: row.created_at,\n            updatedAt: row.updated_at,\n            comments: row.comments,\n            cargoType: row.cargo_type,\n            mainVehiclePlate: row.main_vehicle_plate,\n            type: row.type,\n            length: row.length,\n            width: row.width,\n            height: row.height,\n            additionalPlates: row.additional_plates || [],\n            additionalPlatesDocuments: row.additional_plates_documents || [],\n          }\n        });\n        \n        allDrafts = [...userDrafts];\n        \n        // Se houver transportadores associados, buscar rascunhos por cada transportador\n        for (const transporterId of transporterIds) {\n          const transporterDraftsQuery = await db.execute(sql`\n            SELECT * FROM license_requests WHERE is_draft = true AND transporter_id = ${transporterId}\n          `);\n          \n          const transporterDrafts = transporterDraftsQuery.rows.map(row => {\n            // Converter campos tipo array\n            let states = row.states;\n            if (typeof states === 'string' && states.startsWith('{') && states.endsWith('}')) {\n              states = states.substring(1, states.length - 1).split(',');\n            }\n            \n            return {\n              ...row,\n              id: Number(row.id),\n              userId: Number(row.user_id),\n              transporterId: Number(row.transporter_id),\n              isDraft: row.is_draft === true,\n              tractorUnitId: row.tractor_unit_id ? Number(row.tractor_unit_id) : null,\n              firstTrailerId: row.first_trailer_id ? Number(row.first_trailer_id) : null,\n              secondTrailerId: row.second_trailer_id ? Number(row.second_trailer_id) : null,\n              dollyId: row.dolly_id ? Number(row.dolly_id) : null,\n              flatbedId: row.flatbed_id ? Number(row.flatbed_id) : null,\n              requestNumber: row.request_number,\n              status: row.status,\n              states: states,\n              createdAt: row.created_at,\n              updatedAt: row.updated_at,\n              comments: row.comments,\n              cargoType: row.cargo_type,\n              mainVehiclePlate: row.main_vehicle_plate,\n              type: row.type,\n              length: row.length,\n              width: row.width,\n              height: row.height,\n              additionalPlates: row.additional_plates || [],\n              additionalPlatesDocuments: row.additional_plates_documents || [],\n            }\n          });\n          \n          console.log(`[DEBUG RASCUNHOS] Encontrados ${transporterDrafts.length} rascunhos para transportador ${transporterId}`);\n          allDrafts = [...allDrafts, ...transporterDrafts];\n        }\n        \n        // Remover duplicatas por ID\n        const uniqueMap = new Map();\n        allDrafts.forEach(draft => {\n          if (!uniqueMap.has(draft.id)) {\n            uniqueMap.set(draft.id, draft);\n          }\n        });\n        \n        allDrafts = Array.from(uniqueMap.values());\n      }\n      \n      // Verificar se deve incluir rascunhos de renovação\n      const shouldIncludeRenewalDrafts = req.query.includeRenewal === 'true';\n      \n      // Se não deve incluir rascunhos de renovação, filtrar aqueles que têm comentários sobre renovação\n      const drafts = shouldIncludeRenewalDrafts \n        ? allDrafts \n        : allDrafts.filter(draft => {\n            // Se o comentário menciona \"Renovação\", é um rascunho de renovação\n            return !(draft.comments && draft.comments.includes('Renovação'));\n          });\n      \n      // Performance: Logs de debug removidos\n      \n      res.json(drafts);\n    } catch (error) {\n      console.error('Error fetching license drafts:', error);\n      res.status(500).json({ message: 'Erro ao buscar rascunhos de licenças' });\n    }\n  });\n\n  app.post('/api/licenses/drafts', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const draftData = { ...req.body };\n      \n      console.log(\"Dados de rascunho recebidos:\", JSON.stringify(draftData, null, 2));\n      \n      // Sanitização mais rigorosa dos campos de dimensões com valores padrão\n      console.log(\"Rascunho: Sanitizando dados para tipo \" + draftData.type);\n      \n      // Valores padrão baseados no tipo de licença - prancha tem limites diferentes\n      const isPrancha = draftData.type === \"flatbed\";\n      \n      // Verificar width (largura)\n      if (draftData.width === undefined || draftData.width === null || draftData.width === \"\") {\n        draftData.width = isPrancha ? 320 : 260; // 3.20m para prancha, 2.60m para outros\n        console.log(`Aplicando valor padrão para largura: ${draftData.width}`);\n      } else {\n        // Garantir que é um número\n        draftData.width = Number(draftData.width);\n        console.log(`Convertendo largura para número: ${draftData.width}`);\n      }\n      \n      // Verificar height (altura)\n      if (draftData.height === undefined || draftData.height === null || draftData.height === \"\") {\n        draftData.height = isPrancha ? 495 : 440; // 4.95m para prancha, 4.40m para outros\n        console.log(`Aplicando valor padrão para altura: ${draftData.height}`);\n      } else {\n        // Garantir que é um número\n        draftData.height = Number(draftData.height);\n        console.log(`Convertendo altura para número: ${draftData.height}`);\n      }\n      \n      // Verificar cargoType (tipo de carga)\n      if (draftData.cargoType === undefined || draftData.cargoType === null || draftData.cargoType === \"\") {\n        draftData.cargoType = isPrancha ? \"indivisible_cargo\" : \"dry_cargo\";\n        console.log(`Aplicando valor padrão para tipo de carga: ${draftData.cargoType}`);\n      }\n      \n      // Validate draft data\n      try {\n        insertDraftLicenseSchema.parse(draftData);\n      } catch (error: any) {\n        const validationError = fromZodError(error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      // Generate a draft request number with AET format\n      const draftNumber = `AET-${String(Math.floor(Math.random() * 90000) + 10000)}`;\n      \n      // Garantir que os campos obrigatórios sejam enviados corretamente para o banco de dados\n      const sanitizedData = {\n        ...draftData,\n        width: draftData.width !== undefined ? Number(draftData.width) : null,\n        height: draftData.height !== undefined ? Number(draftData.height) : null,\n        cargoType: draftData.cargoType || null,\n        requestNumber: draftNumber,\n        isDraft: true,\n      };\n      \n      console.log(\"Dados sanitizados para envio ao banco:\", sanitizedData);\n      \n      const draft = await storage.createLicenseDraft(userId, sanitizedData);\n      \n      res.status(201).json(draft);\n    } catch (error) {\n      console.error('Error creating license draft:', error);\n      res.status(500).json({ message: 'Erro ao criar rascunho de licença' });\n    }\n  });\n\n  app.patch('/api/licenses/drafts/:id', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const draftId = parseInt(req.params.id);\n      \n      // Check if draft exists\n      const existingDraft = await storage.getLicenseRequestById(draftId);\n      if (!existingDraft) {\n        return res.status(404).json({ message: 'Rascunho não encontrado' });\n      }\n      \n      // Verificar acesso - usuários staff (admin, operacional, supervisor) podem editar qualquer rascunho\n      const isStaff = isAdminUser(user) || user.role === 'operational' || user.role === 'supervisor';\n      \n      if (!isStaff && existingDraft.userId !== user.id) {\n        console.log(`Usuário ${user.id} (${user.role}) tentou editar rascunho ${draftId} do usuário ${existingDraft.userId}`);\n        return res.status(403).json({ message: 'Acesso negado' });\n      }\n      \n      console.log(`Usuário ${user.id} (${user.role}) autorizado a editar rascunho ${draftId}`);\n      \n      \n      const draftData = { ...req.body };\n      \n      console.log(\"Dados para atualização de rascunho recebidos:\", JSON.stringify(draftData, null, 2));\n      \n      // Garantir que todos os campos obrigatórios não sejam nulos\n      // Sempre preservar o cargoType do existingDraft se não estiver presente no draftData\n      if (!draftData.cargoType && existingDraft.cargoType) {\n        draftData.cargoType = existingDraft.cargoType;\n        console.log(`Preservando cargoType existente: ${existingDraft.cargoType}`);\n      }\n      \n      if (draftData.type === \"flatbed\" || existingDraft.type === \"flatbed\") {\n        // Para prancha: verifica requisitos específicos\n        console.log(\"Atualização de rascunho: É prancha\");\n        if (!draftData.width) draftData.width = existingDraft.width || 260; // Manter valor existente ou valor padrão\n        if (!draftData.height) draftData.height = existingDraft.height || 440; // Manter valor existente ou valor padrão\n        if (!draftData.cargoType) draftData.cargoType = existingDraft.cargoType || \"indivisible_cargo\"; // Manter valor existente ou valor padrão\n      } else if (draftData.type || existingDraft.type) {\n        // Para não-prancha: verifica requisitos gerais\n        console.log(\"Atualização de rascunho: Não é prancha\");\n        if (!draftData.width) draftData.width = existingDraft.width || 260; // Manter valor existente ou valor padrão\n        if (!draftData.height) draftData.height = existingDraft.height || 440; // Manter valor existente ou valor padrão\n        if (!draftData.cargoType) draftData.cargoType = existingDraft.cargoType || \"dry_cargo\"; // Manter valor existente ou valor padrão\n      }\n      \n      // Validate draft data\n      try {\n        insertDraftLicenseSchema.partial().parse(draftData);\n      } catch (error: any) {\n        const validationError = fromZodError(error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      // Garantir que os campos obrigatórios sejam enviados corretamente para o banco de dados\n      const sanitizedData = {\n        ...draftData,\n        width: draftData.width !== undefined ? Number(draftData.width) : existingDraft.width,\n        height: draftData.height !== undefined ? Number(draftData.height) : existingDraft.height,\n        cargoType: draftData.cargoType || existingDraft.cargoType,\n      };\n      \n      console.log(\"Dados sanitizados para atualização do rascunho:\", sanitizedData);\n      \n      const updatedDraft = await storage.updateLicenseDraft(draftId, sanitizedData);\n      \n      res.json(updatedDraft);\n    } catch (error) {\n      console.error('Error updating license draft:', error);\n      res.status(500).json({ message: 'Erro ao atualizar rascunho de licença' });\n    }\n  });\n\n  app.delete('/api/licenses/drafts/:id', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const draftId = parseInt(req.params.id);\n      \n      // Check if draft exists\n      const existingDraft = await storage.getLicenseRequestById(draftId);\n      if (!existingDraft) {\n        return res.status(404).json({ message: 'Rascunho não encontrado' });\n      }\n      \n      // Verificar se é um rascunho\n      if (!existingDraft.isDraft) {\n        return res.status(403).json({ message: 'Este item não é um rascunho' });\n      }\n      \n      // Verificar acesso - usuários staff (admin, operacional, supervisor) podem excluir qualquer rascunho\n      const isStaff = isAdminUser(user) || user.role === 'operational' || user.role === 'supervisor';\n      \n      if (!isStaff && existingDraft.userId !== user.id) {\n        console.log(`Usuário ${user.id} (${user.role}) tentou excluir rascunho ${draftId} do usuário ${existingDraft.userId}`);\n        return res.status(403).json({ message: 'Acesso negado' });\n      }\n      \n      console.log(`Usuário ${user.id} (${user.role}) autorizado a excluir rascunho ${draftId}`);\n      \n      \n      await storage.deleteLicenseRequest(draftId);\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting license draft:', error);\n      res.status(500).json({ message: 'Erro ao excluir rascunho de licença' });\n    }\n  });\n\n  app.post('/api/licenses/drafts/:id/submit', requireAuth, async (req, res) => {\n    try {\n      // Performance: Logs de debug removidos\n      \n      const user = req.user!;\n      const draftId = parseInt(req.params.id);\n      \n      // Check if draft exists\n      const existingDraft = await storage.getLicenseRequestById(draftId);\n      if (!existingDraft) {\n        return res.status(404).json({ message: 'Rascunho não encontrado' });\n      }\n      \n      // Verificar se é um rascunho\n      if (!existingDraft.isDraft) {\n        return res.status(403).json({ message: 'Este item não é um rascunho ou já foi submetido' });\n      }\n      \n      // Verificar acesso - usuários staff (admin, operacional, supervisor) podem submeter qualquer rascunho\n      const isStaff = isAdminUser(user) || user.role === 'operational' || user.role === 'supervisor';\n      \n      if (!isStaff && existingDraft.userId !== user.id) {\n        return res.status(403).json({ message: 'Acesso negado' });\n      }\n      \n      // CORREÇÃO CRÍTICA: Usar os estados do req.body se disponíveis\n      const bodyData = req.body || {};\n      \n      // Mesclar dados do rascunho com dados do body\n      const draftData = { \n        ...existingDraft,\n        ...bodyData, // Dados do body têm prioridade\n        states: bodyData.states || existingDraft.states // USAR ESTADOS DO FRONTEND\n      };\n      \n      if (draftData.type === \"flatbed\") {\n        // Para prancha: verifica requisitos específicos\n        if (!draftData.width) draftData.width = 260; // 2.60m padrão\n        if (!draftData.height) draftData.height = 440; // 4.40m padrão\n        if (!draftData.cargoType) draftData.cargoType = \"indivisible_cargo\"; // Carga indivisível padrão\n      } else if (draftData.type) {\n        // Para não-prancha: verifica requisitos gerais\n        if (!draftData.width) draftData.width = 260; // 2.60m padrão\n        if (!draftData.height) draftData.height = 440; // 4.40m padrão\n        if (!draftData.cargoType) draftData.cargoType = \"dry_cargo\"; // Carga seca padrão\n      }\n      \n      // Atualizar o rascunho com TODOS os dados incluindo estados\n      console.log('Atualizando rascunho com estados:', draftData.states);\n      await storage.updateLicenseDraft(draftId, {\n        width: draftData.width,\n        height: draftData.height,\n        cargoType: draftData.cargoType,\n        states: draftData.states, // INCLUIR ESTADOS NA ATUALIZAÇÃO\n        comments: draftData.comments\n      });\n      \n      console.log(\"Rascunho sanitizado antes de submeter:\", draftData);\n      \n      // Generate a real request number\n      const requestNumber = `AET-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 9000) + 1000)}`;\n      \n      // Submit the draft as a real license request\n      const licenseRequest = await storage.submitLicenseDraft(draftId, requestNumber);\n      \n      console.log('Licença final submetida com estados:', licenseRequest.states);\n      \n      // CORREÇÃO: Enviar notificações WebSocket após submissão\n      console.log('📡 Enviando broadcast para licença submetida:', licenseRequest.id);\n      broadcastLicenseUpdate(licenseRequest.id, 'submitted', licenseRequest);\n      broadcastDashboardUpdate();\n      \n      res.json(licenseRequest);\n    } catch (error) {\n      console.error('Error submitting license draft:', error);\n      res.status(500).json({ message: 'Erro ao enviar solicitação de licença' });\n    }\n  });\n  \n  // Endpoint removido - duplicado abaixo\n\n  // Endpoint para verificar licenças vigentes por estado e placas (nova abordagem)\n  app.post('/api/licencas-vigentes', requireAuth, async (req: any, res: any) => {\n    try {\n      const { estado, placas } = req.body;\n      \n      if (!estado) {\n        return res.status(400).json({ message: 'Estado é obrigatório' });\n      }\n      \n      if (!placas || typeof placas !== 'object') {\n        return res.status(400).json({ message: 'Placas são obrigatórias' });\n      }\n      \n      console.log(`[VALIDAÇÃO ESTADO] Verificando licenças vigentes para estado: ${estado}`);\n      console.log(`[VALIDAÇÃO ESTADO] Placas:`, placas);\n      \n      // Construir condições dinâmicas baseadas nas placas disponíveis\n      const conditions = [];\n      const params = [estado];\n      let paramIndex = 2;\n      \n      if (placas.cavalo) {\n        conditions.push(`le.placa_unidade_tratora = $${paramIndex++}`);\n        params.push(placas.cavalo);\n      }\n      if (placas.primeiraCarreta) {\n        conditions.push(`le.placa_primeira_carreta = $${paramIndex++}`);\n        params.push(placas.primeiraCarreta);\n      }\n      if (placas.segundaCarreta) {\n        conditions.push(`le.placa_segunda_carreta = $${paramIndex++}`);\n        params.push(placas.segundaCarreta);\n      }\n      if (placas.dolly) {\n        conditions.push(`le.placa_dolly = $${paramIndex++}`);\n        params.push(placas.dolly);\n      }\n      if (placas.prancha) {\n        conditions.push(`le.placa_prancha = $${paramIndex++}`);\n        params.push(placas.prancha);\n      }\n      if (placas.reboque) {\n        conditions.push(`le.placa_reboque = $${paramIndex++}`);\n        params.push(placas.reboque);\n      }\n      \n      if (conditions.length === 0) {\n        // Performance: Log removido\n        return res.json(null);\n      }\n      \n      const query = `\n        SELECT \n          le.estado,\n          le.numero_licenca,\n          le.data_validade,\n          le.status,\n          le.placa_unidade_tratora,\n          le.placa_primeira_carreta,\n          le.placa_segunda_carreta,\n          le.placa_dolly,\n          le.placa_prancha,\n          le.placa_reboque\n        FROM licencas_emitidas le\n        WHERE le.estado = $1 \n          AND le.status = 'ativa'\n          AND le.data_validade > CURRENT_DATE\n          AND (${conditions.join(' OR ')})\n        ORDER BY le.data_validade DESC\n        LIMIT 1\n      `;\n      \n      // Performance: Logs removidos\n      \n      const result = await pool.query(query, params);\n      \n      if (result.rows.length > 0) {\n        const licenca = result.rows[0];\n        const now = new Date();\n        const validUntil = new Date(licenca.data_validade);\n        const diasRestantes = Math.ceil((validUntil.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        \n        // Performance: Log removido\n        \n        return res.json({\n          numero_licenca: licenca.numero_licenca,\n          data_validade: licenca.data_validade,\n          diasRestantes,\n          bloqueado: diasRestantes > 60,\n          placas: {\n            tratora: licenca.placa_unidade_tratora,\n            primeira: licenca.placa_primeira_carreta,\n            segunda: licenca.placa_segunda_carreta,\n            dolly: licenca.placa_dolly,\n            prancha: licenca.placa_prancha,\n            reboque: licenca.placa_reboque\n          }\n        });\n      } else {\n        // Performance: Log removido\n        return res.json(null);\n      }\n      \n    } catch (error) {\n      console.error('Erro ao verificar licenças vigentes:', error);\n      return res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // License request endpoints\n  app.get('/api/licenses', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      let allLicenses;\n      \n      // Se for usuário administrativo, buscar todas as licenças\n      if (isAdminUser(user)) {\n        console.log(`Usuário ${user.email} (${user.role}) tem acesso administrativo. Buscando todas as licenças.`);\n        allLicenses = await storage.getAllLicenseRequests();\n      } else {\n        console.log(`Usuário ${user.email} (${user.role}) tem acesso comum. Buscando apenas suas licenças.`);\n        \n        // Primeiro, obter os transportadores associados ao usuário\n        const userTransporters = await db.select()\n          .from(transporters)\n          .where(eq(transporters.userId, user.id));\n          \n        const transporterIds = userTransporters.map(t => t.id);\n        console.log(`[DEBUG ACOMPANHAR LICENÇAS] Transportadores associados ao usuário ${user.id}: ${transporterIds.join(', ')}`);\n        \n        // Buscar licenças onde o usuário é o dono OU o transportador está associado ao usuário\n        let licencasNoBanco = [];\n        \n        // Se houver transportadores associados, buscar licenças por transporterId também\n        if (transporterIds.length > 0) {\n          licencasNoBanco = await db.select()\n            .from(licenseRequests)\n            .where(\n              or(\n                eq(licenseRequests.userId, user.id),\n                inArray(licenseRequests.transporterId, transporterIds)\n              )\n            );\n            \n          console.log(`[DEBUG ACOMPANHAR LICENÇAS] Encontradas ${licencasNoBanco.length} licenças para usuário ${user.id} ou transportadores ${transporterIds.join(', ')}`);\n        } else {\n          // Se não houver transportadores, buscar apenas por userId\n          licencasNoBanco = await db.select()\n            .from(licenseRequests)\n            .where(eq(licenseRequests.userId, user.id));\n            \n          console.log(`[DEBUG ACOMPANHAR LICENÇAS] Encontradas ${licencasNoBanco.length} licenças para usuário ${user.id} sem transportadores associados`);\n        }\n        \n        allLicenses = licencasNoBanco;\n      }\n      \n      // Verificar se deve incluir rascunhos de renovação\n      const shouldIncludeRenewalDrafts = req.query.includeRenewal === 'true';\n      \n      // Filtrar rascunhos de renovação, a menos que solicitado explicitamente para incluí-los\n      const licenses = shouldIncludeRenewalDrafts \n        ? allLicenses \n        : allLicenses.filter(license => {\n            // Se é um rascunho e o comentário menciona \"Renovação\", é um rascunho de renovação\n            if (license.isDraft && license.comments && license.comments.includes('Renovação')) {\n              return false; // excluir rascunhos de renovação\n            }\n            return true; // manter todos os outros\n          });\n      \n      // Enriquecer licenças com dados do transportador para exportações CSV\n      const allTransporters = await storage.getAllTransporters();\n      const licensesWithTransporter = licenses.map(license => {\n        const transporter = allTransporters.find(t => t.id === license.transporterId);\n        return {\n          ...license,\n          transporter: transporter ? {\n            id: transporter.id,\n            name: transporter.name,\n            tradeName: transporter.tradeName,\n            documentNumber: transporter.documentNumber\n          } : null\n        };\n      });\n\n      console.log(`Total de licenças: ${allLicenses.length}, filtradas: ${licensesWithTransporter.length}, incluindo renovação: ${shouldIncludeRenewalDrafts}`);\n      \n      res.json(licensesWithTransporter);\n    } catch (error) {\n      console.error('Error fetching license requests:', error);\n      res.status(500).json({ message: 'Erro ao buscar solicitações de licenças' });\n    }\n  });\n\n  app.post('/api/licenses', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const licenseData = { ...req.body };\n      \n      console.log(\"Dados de licença recebidos:\", JSON.stringify(licenseData, null, 2));\n      console.log(\"Tipo de licença:\", licenseData.type);\n      console.log(\"Tipo de carga:\", licenseData.cargoType);\n      console.log(\"Comprimento:\", licenseData.length);\n      console.log(\"Largura:\", licenseData.width);\n      console.log(\"Altura:\", licenseData.height);\n      console.log(\"Comprimento da licença:\", licenseData.length);\n      console.log(\"Tipo do valor do comprimento:\", typeof licenseData.length);\n      \n      // Sanitização mais rigorosa dos campos de dimensões com valores padrão\n      console.log(\"Sanitizando dados para tipo \" + licenseData.type);\n      \n      // Valores padrão baseados no tipo de licença - prancha tem limites diferentes\n      const isPrancha = licenseData.type === \"flatbed\";\n      \n      // Verificar length (comprimento) - CONVERSÃO DE METROS PARA CENTÍMETROS\n      if (licenseData.length === undefined || licenseData.length === null || licenseData.length === \"\") {\n        licenseData.length = isPrancha ? 2600 : 2500; // 26.00m para prancha, 25.00m para outros (em centímetros)\n        console.log(`Aplicando valor padrão para comprimento: ${licenseData.length} cm`);\n      } else {\n        // Converter metros para centímetros (frontend envia em metros, BD armazena em centímetros)\n        const metersValue = Number(licenseData.length);\n        licenseData.length = metersValue * 100;\n        console.log(`Convertendo comprimento de ${metersValue}m para ${licenseData.length} cm`);\n      }\n      \n      // Verificar width (largura)\n      if (licenseData.width === undefined || licenseData.width === null || licenseData.width === \"\") {\n        licenseData.width = isPrancha ? 320 : 260; // 3.20m para prancha, 2.60m para outros\n        console.log(`Aplicando valor padrão para largura: ${licenseData.width}`);\n      } else {\n        // Garantir que é um número\n        licenseData.width = Number(licenseData.width);\n        console.log(`Convertendo largura para número: ${licenseData.width}`);\n      }\n      \n      // Verificar height (altura)\n      if (licenseData.height === undefined || licenseData.height === null || licenseData.height === \"\") {\n        licenseData.height = isPrancha ? 495 : 440; // 4.95m para prancha, 4.40m para outros\n        console.log(`Aplicando valor padrão para altura: ${licenseData.height}`);\n      } else {\n        // Garantir que é um número\n        licenseData.height = Number(licenseData.height);\n        console.log(`Convertendo altura para número: ${licenseData.height}`);\n      }\n      \n      // Verificar cargoType (tipo de carga)\n      if (licenseData.cargoType === undefined || licenseData.cargoType === null || licenseData.cargoType === \"\") {\n        licenseData.cargoType = isPrancha ? \"indivisible_cargo\" : \"dry_cargo\";\n        console.log(`Aplicando valor padrão para tipo de carga: ${licenseData.cargoType}`);\n      }\n      \n      console.log(\"Dados sanitizados para envio ao banco:\", licenseData);\n      \n      // Bypass validação temporariamente para entender o problema\n      try {\n        // Verificações mínimas ao invés da validação completa\n        if (!licenseData.transporterId) {\n          return res.status(400).json({ message: \"Um transportador deve ser selecionado\" });\n        }\n        \n        if (!licenseData.type) {\n          return res.status(400).json({ message: \"O tipo é obrigatório\" });\n        }\n        \n        if (!licenseData.states || licenseData.states.length === 0) {\n          return res.status(400).json({ message: \"Selecione pelo menos um estado\" });\n        }\n        \n        if (!licenseData.mainVehiclePlate) {\n          return res.status(400).json({ message: \"A placa principal é obrigatória\" });\n        }\n        \n        // Nenhuma validação ou conversão de dimensões no backend\n        // Todas as validações são feitas no frontend conforme o tipo específico\n        // Valores de comprimento, largura e altura são mantidos exatamente como enviados do frontend\n      } catch (error: any) {\n        console.error(\"Erro de validação manual:\", error);\n        return res.status(400).json({ message: error.message || \"Erro na validação\" });\n      }\n      \n      // Generate a request number\n      const requestNumber = `AET-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 9000) + 1000)}`;\n      \n      // Garantir que os campos obrigatórios sejam enviados corretamente para o banco de dados\n      // Conversão explícita de tipos para evitar problemas de nulos\n      const sanitizedData = {\n        ...licenseData,\n        width: licenseData.width !== undefined ? Number(licenseData.width) : null,\n        height: licenseData.height !== undefined ? Number(licenseData.height) : null,\n        cargoType: licenseData.cargoType || null,\n        requestNumber,\n        isDraft: false,\n      };\n      \n      console.log(\"Dados sanitizados para envio ao banco:\", sanitizedData);\n      \n      const licenseRequest = await storage.createLicenseRequest(userId, sanitizedData);\n      \n      console.log(\"Licença criada com sucesso! ID:\", licenseRequest.id, \"Estados:\", licenseRequest.states);\n      \n      // Enviar notificação WebSocket para nova licença\n      broadcastMessage({\n        type: 'LICENSE_UPDATE',\n        data: {\n          action: 'created',\n          license: licenseRequest,\n          userId: userId\n        }\n      });\n      \n      res.status(201).json(licenseRequest);\n    } catch (error) {\n      console.error('Error creating license request:', error);\n      res.status(500).json({ message: 'Erro ao criar solicitação de licença' });\n    }\n  });\n  \n  // Endpoint para enviar um pedido de licença (usado no formulário frontened)\n  app.post('/api/licenses/submit', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const userId = user.id;\n      let licenseData = { ...req.body };\n      \n      // Se é um rascunho existente, redireciona para a rota correspondente\n      if (licenseData.id) {\n        const draftId = licenseData.id;\n        \n        // Check if draft exists and belongs to the user\n        const existingDraft = await storage.getLicenseRequestById(draftId);\n        if (!existingDraft) {\n          return res.status(404).json({ message: 'Rascunho não encontrado' });\n        }\n        \n        if (existingDraft.userId !== userId) {\n          return res.status(403).json({ message: 'Acesso negado' });\n        }\n        \n        // Generate a real request number\n        const requestNumber = `AET-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 9000) + 1000)}`;\n        \n        // Submit the draft as a real license request\n        const licenseRequest = await storage.submitLicenseDraft(draftId, requestNumber);\n        \n        // Enviar notificação WebSocket para nova licença criada\n        broadcastMessage({\n          type: 'LICENSE_UPDATE',\n          data: {\n            licenseId: licenseRequest.id,\n            userId: licenseRequest.userId,\n            status: licenseRequest.status,\n            action: 'CREATED',\n            createdAt: new Date().toISOString(),\n            license: licenseRequest\n          }\n        });\n        \n        return res.json(licenseRequest);\n      }\n      \n      // Caso seja uma criação direta\n      // Definindo valores padrão para campos obrigatórios, se não existirem\n      if (!licenseData.status) {\n        licenseData.status = 'pending_registration';\n      }\n      \n      // Garantir que os estados estão corretos - priorizar o campo states do frontend\n      // Performance: Log removido\n      \n      if (!licenseData.states || !Array.isArray(licenseData.states)) {\n        licenseData.states = licenseData.requestedStates || [];\n      }\n      \n      console.log(\"Estados finais processados:\", licenseData.states);\n      \n      // Preparando estado das solicitações por estado\n      if (!licenseData.stateStatuses) {\n        licenseData.stateStatuses = licenseData.states.map((state: string) => `${state}:pending_registration`);\n      }\n      \n      // Ensure additionalPlates is properly formatted\n      licenseData.additionalPlates = licenseData.additionalPlates || [];\n      \n      // Generate a request number\n      const requestNumber = `AET-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 9000) + 1000)}`;\n      \n      // CONVERSÃO: Frontend envia em centímetros, PostgreSQL espera em metros\n      console.log('Valores ANTES da conversão:', {\n        length: licenseData.length,\n        width: licenseData.width, \n        height: licenseData.height\n      });\n      \n      // Converter de centímetros para metros se os valores parecem estar em centímetros\n      if (licenseData.length && licenseData.length > 100) {\n        licenseData.length = Number((licenseData.length / 100).toFixed(2)); // centímetros para metros\n      }\n      if (licenseData.width && licenseData.width > 50) {\n        licenseData.width = Number((licenseData.width / 100).toFixed(2)); // centímetros para metros  \n      }\n      if (licenseData.height && licenseData.height > 50) {\n        licenseData.height = Number((licenseData.height / 100).toFixed(2)); // centímetros para metros\n      }\n      \n      console.log('Valores DEPOIS da conversão (metros):', {\n        length: licenseData.length,\n        width: licenseData.width,\n        height: licenseData.height\n      });\n      \n      // Validate license data using the complete schema with conditional validations\n      try {\n        console.log('Validando dados da licença com schema completo...');\n        console.log('Dados a validar:', JSON.stringify(licenseData, null, 2));\n        \n        const validationResult = insertLicenseRequestSchema.safeParse(licenseData);\n        if (!validationResult.success) {\n          console.log('❌ VALIDATION ERROR:', validationResult.error);\n          const validationError = fromZodError(validationResult.error);\n          return res.status(400).json({ \n            message: validationError.message,\n            errors: validationResult.error.errors \n          });\n        }\n        \n        console.log('✅ Validação bem-sucedida');\n        // Use os dados validados\n        licenseData = validationResult.data;\n        \n      } catch (error: any) {\n        console.error('Validation error:', error);\n        return res.status(400).json({ message: error.message || \"Erro de validação\" });\n      }\n      \n      // Sanitização mais rigorosa dos campos de dimensões com valores padrão\n      console.log(\"Sanitizando dados para tipo \" + licenseData.type);\n      \n      // Valores padrão baseados no tipo de licença - prancha tem limites diferentes\n      const isPrancha = licenseData.type === \"flatbed\";\n      \n      // Verificar width (largura)\n      if (licenseData.width === undefined || licenseData.width === null || licenseData.width === \"\") {\n        licenseData.width = isPrancha ? 320 : 260; // 3.20m para prancha, 2.60m para outros\n        console.log(`Aplicando valor padrão para largura: ${licenseData.width}`);\n      } else {\n        // Garantir que é um número\n        licenseData.width = Number(licenseData.width);\n        console.log(`Convertendo largura para número: ${licenseData.width}`);\n      }\n      \n      // Verificar height (altura)\n      if (licenseData.height === undefined || licenseData.height === null || licenseData.height === \"\") {\n        licenseData.height = isPrancha ? 495 : 440; // 4.95m para prancha, 4.40m para outros\n        console.log(`Aplicando valor padrão para altura: ${licenseData.height}`);\n      } else {\n        // Garantir que é um número\n        licenseData.height = Number(licenseData.height);\n        console.log(`Convertendo altura para número: ${licenseData.height}`);\n      }\n      \n      // Verificar cargoType (tipo de carga)\n      if (licenseData.cargoType === undefined || licenseData.cargoType === null || licenseData.cargoType === \"\") {\n        licenseData.cargoType = isPrancha ? \"indivisible_cargo\" : \"dry_cargo\";\n        console.log(`Aplicando valor padrão para tipo de carga: ${licenseData.cargoType}`);\n      }\n      \n      // Garantir que os campos obrigatórios sejam enviados corretamente para o banco de dados\n      // Conversão explícita de tipos para evitar problemas de nulos\n      const sanitizedData = {\n        ...licenseData,\n        width: licenseData.width !== undefined ? Number(licenseData.width) : null,\n        height: licenseData.height !== undefined ? Number(licenseData.height) : null,\n        cargoType: licenseData.cargoType || null,\n        requestNumber,\n        isDraft: false,\n      };\n      \n      console.log('Creating license request with data:', JSON.stringify(sanitizedData, null, 2));\n      console.log('=== DADOS PARA O BANCO ===');\n      console.log('ESTADOS SENDO ENVIADOS PARA O BANCO:', sanitizedData.states);\n      console.log('Dados sanitizados completos:', JSON.stringify(sanitizedData, null, 2));\n      \n      // Validação removida - será feita no frontend ao selecionar estados\n\n      const licenseRequest = await storage.createLicenseRequest(userId, sanitizedData);\n      \n      console.log('=== RESULTADO DO BANCO ===');\n      console.log('License request saved to database:', JSON.stringify(licenseRequest, null, 2));\n      console.log('ESTADOS SALVOS NO BANCO:', licenseRequest.states);\n      console.log('Comparação - Enviado vs Salvo:', {\n        enviado: sanitizedData.states,\n        salvo: licenseRequest.states,\n        iguais: JSON.stringify(sanitizedData.states) === JSON.stringify(licenseRequest.states)\n      });\n      \n      // Criar registros individuais para cada estado na nova tabela state_licenses\n      \n      try {\n        for (const state of sanitizedData.states) {\n          await db.insert(stateLicenses).values({\n            licenseRequestId: licenseRequest.id,\n            state: state,\n            status: 'pending_registration',\n            comments: licenseRequest.comments || null,\n            selectedCnpj: null, // Será preenchido quando aprovado\n            licenseFileUrl: null, // Será preenchido quando aprovado\n            aetNumber: null, // Será preenchido quando aprovado\n            issuedAt: null, // Será preenchido quando aprovado\n            validUntil: null, // Será preenchido quando aprovado\n          });\n          console.log(`[NOVA ABORDAGEM] Registro criado para estado: ${state}`);\n        }\n        console.log(`[NOVA ABORDAGEM] Todos os ${sanitizedData.states.length} registros de estado criados com sucesso`);\n      } catch (error) {\n        console.error('[NOVA ABORDAGEM] Erro ao criar registros de estado:', error);\n        // Não falhar a criação da licença principal se houver erro nos registros de estado\n      }\n      \n      // Enviar notificação WebSocket para nova licença criada\n      broadcastLicenseUpdate(licenseRequest.id, 'created', licenseRequest);\n      broadcastDashboardUpdate();\n      \n      res.json(licenseRequest);\n    } catch (error: any) {\n      console.error('Error submitting license request:', error);\n      res.status(500).json({ message: 'Erro ao enviar solicitação de licença', error: String(error) });\n    }\n  });\n\n  // Renovar licença para um estado específico\n  app.post('/api/licenses/renew', requireAuth, async (req, res) => {\n    try {\n      const { licenseId, state } = req.body;\n      \n      if (!licenseId || !state) {\n        return res.status(400).json({ message: 'ID da licença e estado são obrigatórios' });\n      }\n      \n      const userId = req.user!.id;\n      \n      // Verificar se a licença existe\n      const originalLicense = await storage.getLicenseRequestById(licenseId);\n      if (!originalLicense) {\n        return res.status(404).json({ message: 'Pedido de licença não encontrado' });\n      }\n      \n      // Verificar se o usuário é o dono da licença ou tem papel administrativo\n      if (originalLicense.userId !== userId && !isAdminUser(req.user!)) {\n        return res.status(403).json({ message: 'Você não tem permissão para renovar esta licença' });\n      }\n      \n      // Verificar se o estado está presente na licença original\n      if (!originalLicense.states.includes(state)) {\n        return res.status(400).json({ message: `O estado ${state} não faz parte da licença original` });\n      }\n      \n      // Gerar número de pedido baseado no ano atual\n      const requestNumber = `AET-${new Date().getFullYear()}-${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n      \n      // Criar um novo rascunho baseado na licença original, mas apenas com o estado escolhido\n      // Aqui, precisamos garantir que os campos opcionais sejam tratados corretamente\n      const draftData: any = {\n        transporterId: originalLicense.transporterId || null,\n        mainVehiclePlate: originalLicense.mainVehiclePlate,\n        length: originalLicense.length || 0,\n        type: originalLicense.type,\n        // Valores padrão para campos opcionais\n        width: originalLicense.width || (originalLicense.type === \"flatbed\" ? 320 : 260),\n        height: originalLicense.height || (originalLicense.type === \"flatbed\" ? 495 : 440),\n        cargoType: originalLicense.cargoType || (originalLicense.type === \"flatbed\" ? \"indivisible_cargo\" : \"dry_cargo\"),\n        // Incluir apenas o estado específico sendo renovado\n        states: [state],\n        requestNumber,\n        isDraft: true,\n        comments: `Renovação da licença ${originalLicense.requestNumber} para o estado ${state}`,\n      };\n      \n      // Copiar campos de referência de veículos somente se existirem\n      if (originalLicense.tractorUnitId) draftData.tractorUnitId = originalLicense.tractorUnitId;\n      if (originalLicense.firstTrailerId) draftData.firstTrailerId = originalLicense.firstTrailerId;\n      if (originalLicense.dollyId) draftData.dollyId = originalLicense.dollyId;\n      if (originalLicense.secondTrailerId) draftData.secondTrailerId = originalLicense.secondTrailerId; \n      if (originalLicense.flatbedId) draftData.flatbedId = originalLicense.flatbedId;\n      \n      // Garantir que arrays existam ou sejam vazios\n      draftData.additionalPlates = originalLicense.additionalPlates || [];\n      draftData.additionalPlatesDocuments = originalLicense.additionalPlatesDocuments || [];\n      \n      // Logar os dados que serão enviados para criar o rascunho\n      console.log(\"[RENOVAÇÃO] Criando rascunho com os seguintes dados:\", JSON.stringify(draftData, null, 2));\n      \n      // Criar o novo rascunho\n      const newDraft = await storage.createLicenseDraft(userId, draftData);\n      \n      // Logar o rascunho criado\n      console.log(\"[RENOVAÇÃO] Rascunho criado com sucesso:\", JSON.stringify(newDraft, null, 2));\n      \n      // Enviar atualização WebSocket para notificar criação do rascunho de renovação\n      broadcastLicenseUpdate(newDraft.id, 'DRAFT_CREATED', newDraft);\n      \n      // Responder com o novo rascunho criado\n      res.status(201).json({\n        message: `Licença renovada com sucesso para o estado ${state}`,\n        draft: newDraft\n      });\n    } catch (error) {\n      console.error('Error renewing license:', error);\n      \n      // Logar os detalhes para diagnóstico\n      if (error instanceof Error) {\n        console.error('Error message:', error.message);\n        console.error('Error stack:', error.stack);\n      }\n      \n      // Verificar se é um erro conhecido e fornecer mensagem mais específica\n      const errorMessage = error instanceof Error \n        ? `Erro ao renovar licença: ${error.message}`\n        : 'Erro ao renovar licença';\n      \n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // ENDPOINT DE VALIDAÇÃO CRÍTICA PARA TODOS OS ESTADOS BRASILEIROS - PRODUÇÃO\n  app.post('/api/validacao-critica', requireAuth, async (req, res) => {\n    try {\n      // Performance: Log de validação removido\n      \n      const { estado, placas } = req.body;\n      \n      // Lista completa de estados brasileiros + órgãos federais para validação\n      const estadosValidos = [\n        'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', \n        'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', \n        'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO',\n        'DNIT', 'ANTT', 'PRF'  // Órgãos federais\n      ];\n      \n      // Validação robusta de entrada\n      if (!estado || !estadosValidos.includes(estado.toUpperCase())) {\n        // Performance: Log removido\n        return res.status(400).json({ \n          bloqueado: false, \n          error: 'Estado inválido ou não suportado',\n          estadosValidos: estadosValidos \n        });\n      }\n      \n      if (!placas || !Array.isArray(placas) || placas.length === 0) {\n        // Performance: Log removido\n        return res.status(400).json({ \n          bloqueado: false, \n          error: 'Lista de placas é obrigatória e deve conter ao menos uma placa',\n          recebido: { estado, placas }\n        });\n      }\n\n      // Normalizar estado para maiúsculo\n      const estadoNormalizado = estado.toUpperCase();\n      \n      // Normalizar e filtrar placas válidas\n      const placasNormalizadas = placas\n        .map(placa => typeof placa === 'string' ? placa.trim().toUpperCase() : '')\n        .filter(placa => placa.length >= 6); // Placas brasileiras têm pelo menos 6 caracteres\n\n      if (placasNormalizadas.length === 0) {\n        // Performance: Log removido\n        return res.json({ bloqueado: false });\n      }\n\n      // Performance: Log removido\n\n      // Query SQL otimizada com múltiplos campos de placas e validação robusta\n      const query = `\n        SELECT \n          numero_licenca,\n          data_validade,\n          data_emissao,\n          placa_unidade_tratora,\n          placa_primeira_carreta,\n          placa_segunda_carreta,\n          placa_dolly,\n          placa_prancha,\n          placa_reboque,\n          status,\n          EXTRACT(DAY FROM (data_validade - CURRENT_DATE)) as dias_restantes,\n          EXTRACT(DAY FROM (CURRENT_DATE - data_emissao)) as dias_desde_emissao\n        FROM licencas_emitidas \n        WHERE UPPER(estado) = $1 \n          AND status = 'ativa'\n          AND data_validade > CURRENT_DATE\n          AND (\n            UPPER(placa_unidade_tratora) = ANY($2::text[]) OR\n            UPPER(placa_primeira_carreta) = ANY($2::text[]) OR\n            UPPER(placa_segunda_carreta) = ANY($2::text[]) OR\n            UPPER(placa_dolly) = ANY($2::text[]) OR\n            UPPER(placa_prancha) = ANY($2::text[]) OR\n            UPPER(placa_reboque) = ANY($2::text[])\n          )\n        ORDER BY data_validade DESC, data_emissao DESC\n        LIMIT 1\n      `;\n      \n      console.log(`[VALIDAÇÃO CRÍTICA] Executando validação para estado ${estadoNormalizado}`);\n      const result = await pool.query(query, [estadoNormalizado, placasNormalizadas]);\n      \n      console.log(`[VALIDAÇÃO CRÍTICA] Consulta executada. Registros encontrados: ${result.rows.length}`);\n      \n      if (result.rows.length > 0) {\n        const licenca = result.rows[0];\n        const dias = Math.floor(parseFloat(licenca.dias_restantes));\n        const diasDesdeEmissao = Math.floor(parseFloat(licenca.dias_desde_emissao));\n        \n        console.log(`[VALIDAÇÃO CRÍTICA] ${estadoNormalizado}: Licença ${licenca.numero_licenca}`);\n        console.log(`[VALIDAÇÃO CRÍTICA] Dias restantes: ${dias}, Status: ${licenca.status}`);\n        console.log(`[VALIDAÇÃO CRÍTICA] Emitida há: ${diasDesdeEmissao} dias`);\n        \n        // Aplicar regra dos 60 dias\n        if (dias > 60) {\n          console.log(`[VALIDAÇÃO CRÍTICA] ❌ ${estadoNormalizado} BLOQUEADO - ${dias} dias > 60`);\n          \n          // Coletar todas as placas da licença para informar o usuário\n          const placasLicenca = [\n            licenca.placa_unidade_tratora,\n            licenca.placa_primeira_carreta, \n            licenca.placa_segunda_carreta,\n            licenca.placa_dolly,\n            licenca.placa_prancha,\n            licenca.placa_reboque\n          ].filter(Boolean);\n          \n          return res.json({\n            bloqueado: true,\n            numero: licenca.numero_licenca,\n            validade: licenca.data_validade,\n            emissao: licenca.data_emissao,\n            diasRestantes: dias,\n            diasDesdeEmissao: diasDesdeEmissao,\n            placasConflitantes: placasLicenca,\n            estado: estadoNormalizado,\n            motivo: `Licença vigente com ${dias} dias restantes (> 60 dias)`\n          });\n        } else {\n          console.log(`[VALIDAÇÃO CRÍTICA] ⚠️ ${estadoNormalizado} PERMITIDO - ${dias} dias ≤ 60 (renovação)`);\n        }\n      }\n      \n      console.log(`[VALIDAÇÃO CRÍTICA] ✅ ${estadoNormalizado} LIBERADO - Sem licenças vigentes conflitantes`);\n      return res.json({ \n        bloqueado: false,\n        estado: estadoNormalizado,\n        placasVerificadas: placasNormalizadas.length,\n        motivo: 'Nenhuma licença vigente encontrada para as placas informadas'\n      });\n      \n    } catch (error) {\n      console.error('[VALIDAÇÃO CRÍTICA] ❌ ERRO CRÍTICO:', error);\n      console.error('[VALIDAÇÃO CRÍTICA] Stack trace:', (error as Error).stack);\n      \n      return res.status(500).json({ \n        bloqueado: false, // Em caso de erro, liberar para não bloquear o usuário\n        error: 'Erro interno na validação - liberando por segurança',\n        timestamp: new Date().toISOString(),\n        details: (error as Error).message \n      });\n    }\n  });\n\n  // ✅ ENDPOINT ESPECÍFICO PARA VALIDAÇÃO POR COMBINAÇÃO COMPLETA\n  app.post('/api/licencas-vigentes-by-combination', requireAuth, async (req, res) => {\n    try {\n      const { estado, composicao } = req.body;\n      \n      if (!estado) {\n        return res.status(400).json({ message: 'Estado é obrigatório' });\n      }\n      \n      if (!composicao || !composicao.cavalo || !composicao.carreta1) {\n        return res.status(400).json({ message: 'Composição mínima é obrigatória (cavalo, carreta1)' });\n      }\n      \n      // Identificar tipo de composição\n      const isBitrem = composicao.carreta2 && !composicao.dolly;\n      const isRodotrem = composicao.dolly && composicao.carreta2;\n      const isSimples = !composicao.carreta2 && !composicao.dolly; // Apenas cavalo + carreta1\n      const isDollyOnly = composicao.dolly && !composicao.carreta2; // Cavalo + carreta1 + dolly (sem carreta2)\n      \n      console.log(`[VALIDAÇÃO COMBINAÇÃO] Tipo detectado - Bitrem: ${isBitrem}, Rodotrem: ${isRodotrem}, Simples: ${isSimples}, DollyOnly: ${isDollyOnly}`);\n      \n      console.log(`[VALIDAÇÃO COMBINAÇÃO] Verificando composição específica no estado: ${estado}`);\n      \n      let query: string;\n      let queryParams: any[];\n      \n      if (isBitrem) {\n        console.log(`[VALIDAÇÃO COMBINAÇÃO] Composição BITREM: ${composicao.cavalo} + ${composicao.carreta1} + ${composicao.carreta2}`);\n        \n        // Query para bitrem (cavalo + carreta1 + carreta2, SEM dolly)\n        query = `\n          SELECT \n            le.estado, le.numero_licenca, le.data_validade,\n            le.placa_unidade_tratora, le.placa_primeira_carreta, \n            le.placa_segunda_carreta, le.placa_dolly,\n            EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n          FROM licencas_emitidas le\n          WHERE le.estado = $1 AND le.status = 'ativa' AND le.data_validade > CURRENT_DATE\n            AND UPPER(le.placa_unidade_tratora) = UPPER($2)\n            AND UPPER(le.placa_primeira_carreta) = UPPER($3)\n            AND UPPER(le.placa_segunda_carreta) = UPPER($4)\n            AND (le.placa_dolly IS NULL OR le.placa_dolly = '')\n          ORDER BY le.data_validade DESC LIMIT 1\n        `;\n        queryParams = [estado, composicao.cavalo, composicao.carreta1, composicao.carreta2];\n        \n      } else if (isRodotrem) {\n        console.log(`[VALIDAÇÃO COMBINAÇÃO] Composição RODOTREM: ${composicao.cavalo} + ${composicao.carreta1} + ${composicao.dolly} + ${composicao.carreta2}`);\n        \n        // Query para rodotrem (cavalo + carreta1 + dolly + carreta2)\n        query = `\n          SELECT \n            le.estado, le.numero_licenca, le.data_validade,\n            le.placa_unidade_tratora, le.placa_primeira_carreta, \n            le.placa_segunda_carreta, le.placa_dolly,\n            EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n          FROM licencas_emitidas le\n          WHERE le.estado = $1 AND le.status = 'ativa' AND le.data_validade > CURRENT_DATE\n            AND UPPER(le.placa_unidade_tratora) = UPPER($2)\n            AND UPPER(le.placa_primeira_carreta) = UPPER($3)\n            AND UPPER(le.placa_dolly) = UPPER($4)\n            AND UPPER(le.placa_segunda_carreta) = UPPER($5)\n          ORDER BY le.data_validade DESC LIMIT 1\n        `;\n        queryParams = [estado, composicao.cavalo, composicao.carreta1, composicao.dolly, composicao.carreta2];\n        \n      } else if (isSimples) {\n        console.log(`[VALIDAÇÃO COMBINAÇÃO] Composição SIMPLES: ${composicao.cavalo} + ${composicao.carreta1}`);\n        \n        // Query para composição simples (apenas cavalo + carreta1)\n        query = `\n          SELECT \n            le.estado, le.numero_licenca, le.data_validade,\n            le.placa_unidade_tratora, le.placa_primeira_carreta, \n            le.placa_segunda_carreta, le.placa_dolly,\n            EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n          FROM licencas_emitidas le\n          WHERE le.estado = $1 AND le.status = 'ativa' AND le.data_validade > CURRENT_DATE\n            AND UPPER(le.placa_unidade_tratora) = UPPER($2)\n            AND UPPER(le.placa_primeira_carreta) = UPPER($3)\n            AND (le.placa_segunda_carreta IS NULL OR le.placa_segunda_carreta = '')\n            AND (le.placa_dolly IS NULL OR le.placa_dolly = '')\n          ORDER BY le.data_validade DESC LIMIT 1\n        `;\n        queryParams = [estado, composicao.cavalo, composicao.carreta1];\n        \n      } else if (isDollyOnly) {\n        console.log(`[VALIDAÇÃO COMBINAÇÃO] Composição DOLLY ONLY: ${composicao.cavalo} + ${composicao.carreta1} + ${composicao.dolly}`);\n        \n        // Query para cavalo + carreta1 + dolly (sem carreta2)\n        query = `\n          SELECT \n            le.estado, le.numero_licenca, le.data_validade,\n            le.placa_unidade_tratora, le.placa_primeira_carreta, \n            le.placa_segunda_carreta, le.placa_dolly,\n            EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n          FROM licencas_emitidas le\n          WHERE le.estado = $1 AND le.status = 'ativa' AND le.data_validade > CURRENT_DATE\n            AND UPPER(le.placa_unidade_tratora) = UPPER($2)\n            AND UPPER(le.placa_primeira_carreta) = UPPER($3)\n            AND UPPER(le.placa_dolly) = UPPER($4)\n            AND (le.placa_segunda_carreta IS NULL OR le.placa_segunda_carreta = '')\n          ORDER BY le.data_validade DESC LIMIT 1\n        `;\n        queryParams = [estado, composicao.cavalo, composicao.carreta1, composicao.dolly];\n        \n      } else {\n        return res.status(400).json({ \n          message: 'Tipo de composição não reconhecido. Use: bitrem, rodotrem, simples ou dolly apenas.' \n        });\n      }\n      \n      const result = await pool.query(query, queryParams);\n      \n      if (result.rows.length > 0) {\n        const license = result.rows[0];\n        const daysUntilExpiry = parseInt(license.dias_restantes);\n        \n        console.log(`[VALIDAÇÃO COMBINAÇÃO] 🚫 COMBINAÇÃO IDÊNTICA ENCONTRADA: ${license.numero_licenca} - ${daysUntilExpiry} dias restantes`);\n        \n        if (daysUntilExpiry > 60) {\n          console.log(`[VALIDAÇÃO COMBINAÇÃO] Estado ${estado} BLOQUEADO: ${daysUntilExpiry} dias > 60 - COMBINAÇÃO IDÊNTICA`);\n          return res.json({\n            bloqueado: true,\n            estado: estado,\n            numero_licenca: license.numero_licenca,\n            data_validade: license.data_validade,\n            diasRestantes: daysUntilExpiry,\n            tipo_bloqueio: 'combinacao_identica',\n            composicao_encontrada: {\n              cavalo: license.placa_unidade_tratora,\n              carreta1: license.placa_primeira_carreta,\n              carreta2: license.placa_segunda_carreta,\n              dolly: license.placa_dolly || null\n            },\n            message: (() => {\n              if (isRodotrem) return `Combinação rodotrem idêntica encontrada na licença ${license.numero_licenca} (${daysUntilExpiry} dias restantes)`;\n              if (isBitrem) return `Combinação bitrem idêntica encontrada na licença ${license.numero_licenca} (${daysUntilExpiry} dias restantes)`;\n              if (isSimples) return `Combinação simples idêntica encontrada na licença ${license.numero_licenca} (${daysUntilExpiry} dias restantes)`;\n              if (isDollyOnly) return `Combinação com dolly idêntica encontrada na licença ${license.numero_licenca} (${daysUntilExpiry} dias restantes)`;\n              return `Combinação idêntica encontrada na licença ${license.numero_licenca} (${daysUntilExpiry} dias restantes)`;\n            })()\n          });\n        } else {\n          console.log(`[VALIDAÇÃO COMBINAÇÃO] Estado ${estado} LIBERADO: ${daysUntilExpiry} dias ≤ 60 - PODE RENOVAR`);\n          return res.json({\n            bloqueado: false,\n            estado: estado,\n            numero_licenca: license.numero_licenca,\n            data_validade: license.data_validade,\n            diasRestantes: daysUntilExpiry,\n            tipo_liberacao: 'renovacao_permitida',\n            message: `Combinação idêntica encontrada mas pode renovar (${daysUntilExpiry} dias restantes ≤ 60)`\n          });\n        }\n      }\n      \n      console.log(`[VALIDAÇÃO COMBINAÇÃO] ✅ Estado ${estado} LIBERADO - Combinação específica não encontrada`);\n      return res.json({\n        bloqueado: false,\n        estado: estado,\n        tipo_liberacao: 'combinacao_diferente',\n        message: `Combinação específica não encontrada no estado ${estado} - nova configuração permitida`\n      });\n      \n    } catch (error: any) {\n      console.error('[VALIDAÇÃO COMBINAÇÃO] ❌ ERRO:', error);\n      return res.status(500).json({ \n        bloqueado: false, // Em caso de erro, liberar para não bloquear o usuário\n        error: 'Erro na validação por combinação - liberando por segurança',\n        details: error.message \n      });\n    }\n  });\n\n  // ENDPOINT ESPECÍFICO POR ESTADO - VALIDAÇÃO DE COMBINAÇÃO COMPLETA\n  app.post('/api/licencas-vigentes-by-state', requireAuth, async (req, res) => {\n    try {\n      const { estado, placas, composicao } = req.body;\n      \n      if (!estado) {\n        return res.status(400).json({ message: 'Estado é obrigatório' });\n      }\n      \n      // Nova lógica: verificar se foi fornecida a composição completa\n      if (composicao && composicao.cavalo && composicao.carreta1 && composicao.carreta2) {\n        console.log(`[VALIDAÇÃO COMBINAÇÃO] Verificando composição específica no estado: ${estado}`);\n        console.log(`[VALIDAÇÃO COMBINAÇÃO] Cavalo: ${composicao.cavalo}, Carreta1: ${composicao.carreta1}, Carreta2: ${composicao.carreta2}`);\n        \n        // Query para verificar se a combinação EXATA já existe\n        const queryComposicao = `\n          SELECT \n            le.estado,\n            le.numero_licenca,\n            le.data_validade,\n            le.placa_unidade_tratora,\n            le.placa_primeira_carreta,\n            le.placa_segunda_carreta,\n            EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n          FROM licencas_emitidas le\n          WHERE le.estado = $1 \n            AND le.status = 'ativa'\n            AND le.data_validade > CURRENT_DATE\n            AND UPPER(le.placa_unidade_tratora) = UPPER($2)\n            AND UPPER(le.placa_primeira_carreta) = UPPER($3)\n            AND UPPER(le.placa_segunda_carreta) = UPPER($4)\n          ORDER BY le.data_validade DESC\n          LIMIT 1\n        `;\n        \n        const result = await pool.query(queryComposicao, [\n          estado, \n          composicao.cavalo, \n          composicao.carreta1, \n          composicao.carreta2\n        ]);\n        \n        if (result.rows.length > 0) {\n          const license = result.rows[0];\n          const daysUntilExpiry = parseInt(license.dias_restantes);\n          \n          console.log(`[VALIDAÇÃO COMBINAÇÃO] Combinação EXATA encontrada: ${license.numero_licenca} - ${daysUntilExpiry} dias restantes`);\n          \n          if (daysUntilExpiry > 60) {\n            console.log(`[VALIDAÇÃO COMBINAÇÃO] Estado ${estado} BLOQUEADO: combinação específica com ${daysUntilExpiry} dias > 60`);\n            return res.json({\n              bloqueado: true,\n              numero_licenca: license.numero_licenca,\n              data_validade: license.data_validade,\n              diasRestantes: daysUntilExpiry,\n              tipo_bloqueio: 'combinacao_exata',\n              composicao_conflitante: {\n                cavalo: license.placa_unidade_tratora,\n                carreta1: license.placa_primeira_carreta,\n                carreta2: license.placa_segunda_carreta\n              },\n              message: `Combinação específica (${composicao.cavalo} + ${composicao.carreta1} + ${composicao.carreta2}) já possui licença vigente`\n            });\n          } else {\n            console.log(`[VALIDAÇÃO COMBINAÇÃO] Estado ${estado} LIBERADO: combinação pode ser renovada (${daysUntilExpiry} dias ≤ 60)`);\n            return res.json({\n              bloqueado: false,\n              diasRestantes: daysUntilExpiry,\n              message: `Combinação pode ser renovada - restam ${daysUntilExpiry} dias`\n            });\n          }\n        } else {\n          console.log(`[VALIDAÇÃO COMBINAÇÃO] Estado ${estado} LIBERADO: combinação específica não encontrada`);\n          return res.json({\n            bloqueado: false,\n            tipo_liberacao: 'combinacao_diferente',\n            message: 'Combinação específica não possui licença vigente - pode solicitar'\n          });\n        }\n      }\n      \n      // Fallback para lógica antiga (compatibilidade)\n      if (!placas || !Array.isArray(placas) || placas.length === 0) {\n        return res.status(400).json({ message: 'Placas ou composição são obrigatórias' });\n      }\n      \n      console.log(`[VALIDAÇÃO BY STATE] Verificando estado: ${estado} com placas: ${placas.join(', ')}`);\n      \n      const query = `\n        SELECT \n          le.estado,\n          le.numero_licenca,\n          le.data_validade,\n          le.placa_unidade_tratora,\n          le.placa_primeira_carreta,\n          le.placa_segunda_carreta,\n          EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n        FROM licencas_emitidas le\n        WHERE le.estado = $1 \n          AND le.status = 'ativa'\n          AND le.data_validade > CURRENT_DATE\n          AND (\n            le.placa_unidade_tratora = ANY($2::text[]) OR\n            le.placa_primeira_carreta = ANY($2::text[]) OR\n            le.placa_segunda_carreta = ANY($2::text[])\n          )\n        ORDER BY le.data_validade DESC\n        LIMIT 1\n      `;\n      \n      const result = await pool.query(query, [estado, placas]);\n      \n      if (result.rows.length > 0) {\n        const license = result.rows[0];\n        const daysUntilExpiry = parseInt(license.dias_restantes);\n        \n        console.log(`[VALIDAÇÃO BY STATE] Licença encontrada: ${license.numero_licenca} - ${daysUntilExpiry} dias restantes`);\n        \n        if (daysUntilExpiry > 60) {\n          console.log(`[VALIDAÇÃO BY STATE] Estado ${estado} BLOQUEADO: ${daysUntilExpiry} dias > 60`);\n          return res.json({\n            bloqueado: true,\n            numero_licenca: license.numero_licenca,\n            data_validade: license.data_validade,\n            diasRestantes: daysUntilExpiry,\n            placas: {\n              tratora: license.placa_unidade_tratora,\n              primeira: license.placa_primeira_carreta,\n              segunda: license.placa_segunda_carreta\n            }\n          });\n        } else {\n          console.log(`[VALIDAÇÃO BY STATE] Estado ${estado} LIBERADO: ${daysUntilExpiry} dias ≤ 60`);\n          return res.json({\n            bloqueado: false,\n            diasRestantes: daysUntilExpiry,\n            message: `Pode renovar - restam ${daysUntilExpiry} dias`\n          });\n        }\n      } else {\n        console.log(`[VALIDAÇÃO BY STATE] Estado ${estado} LIBERADO: nenhuma licença ativa encontrada`);\n        return res.json({\n          bloqueado: false,\n          message: 'Nenhuma licença vigente encontrada'\n        });\n      }\n      \n    } catch (error) {\n      console.error('[VALIDAÇÃO BY STATE] Erro:', error);\n      res.status(500).json({ \n        message: 'Erro ao verificar licenças vigentes',\n        error: String(error)\n      });\n    }\n  });\n\n  // VALIDAÇÃO DEFINITIVA - BLOQUEIA PEDIDOS DUPLICADOS E EVITA CUSTOS\n  app.post('/api/licenses/check-existing', requireAuth, async (req, res) => {\n    try {\n      const { states, plates, composicao } = req.body;\n      \n      if (!states || !Array.isArray(states) || states.length === 0) {\n        return res.status(400).json({ message: 'Estados são obrigatórios' });\n      }\n      \n      if (!plates || !Array.isArray(plates) || plates.length === 0) {\n        return res.status(400).json({ message: 'Placas são obrigatórias' });\n      }\n      \n      console.log(`[VALIDAÇÃO DEFINITIVA] Verificando conflitos para estados: ${states.join(', ')} e placas: ${plates.join(', ')}`);\n      \n      // Nova lógica: se composição for fornecida, usar validação específica\n      if (composicao && composicao.cavalo && composicao.carreta1 && composicao.carreta2) {\n        console.log(`[VALIDAÇÃO DEFINITIVA] Usando validação por combinação específica:`, composicao);\n      }\n      \n      const conflicts = [];\n      \n      // Para cada estado, verificar licenças ativas na tabela licencas_emitidas\n      for (const state of states) {\n        console.log(`[VALIDAÇÃO DEFINITIVA] Verificando estado: ${state}`);\n        \n        let query: string;\n        let queryParams: any[];\n        \n        // Escolher query baseada na presença de composição\n        if (composicao && composicao.cavalo && composicao.carreta1 && composicao.carreta2) {\n          // Query para combinação específica\n          query = `\n            SELECT \n              le.estado,\n              le.numero_licenca,\n              le.data_validade,\n              le.placa_unidade_tratora,\n              le.placa_primeira_carreta,\n              le.placa_segunda_carreta,\n              le.pedido_id,\n              EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n            FROM licencas_emitidas le\n            WHERE le.estado = $1 \n              AND le.status = 'ativa'\n              AND le.data_validade > CURRENT_DATE\n              AND UPPER(le.placa_unidade_tratora) = UPPER($2)\n              AND UPPER(le.placa_primeira_carreta) = UPPER($3)\n              AND UPPER(le.placa_segunda_carreta) = UPPER($4)\n          `;\n          queryParams = [state, composicao.cavalo, composicao.carreta1, composicao.carreta2];\n          console.log(`[VALIDAÇÃO DEFINITIVA] Verificando combinação específica: ${composicao.cavalo} + ${composicao.carreta1} + ${composicao.carreta2}`);\n        } else {\n          // Query original para qualquer placa\n          query = `\n            SELECT \n              le.estado,\n              le.numero_licenca,\n              le.data_validade,\n              le.placa_unidade_tratora,\n              le.placa_primeira_carreta,\n              le.placa_segunda_carreta,\n              le.pedido_id,\n              EXTRACT(DAY FROM (le.data_validade - CURRENT_DATE)) as dias_restantes\n            FROM licencas_emitidas le\n            WHERE le.estado = $1 \n              AND le.status = 'ativa'\n              AND le.data_validade > CURRENT_DATE\n              AND (\n                le.placa_unidade_tratora = ANY($2::text[]) OR\n                le.placa_primeira_carreta = ANY($2::text[]) OR\n                le.placa_segunda_carreta = ANY($2::text[])\n              )\n          `;\n          queryParams = [state, plates];\n        }\n        \n        const result = await pool.query(query, queryParams);\n        \n        console.log(`[VALIDAÇÃO DEFINITIVA] Estado ${state}: encontradas ${result.rows.length} licenças ativas`);\n        \n        for (const license of result.rows) {\n          const daysUntilExpiry = parseInt(license.dias_restantes);\n          console.log(`[VALIDAÇÃO DEFINITIVA] Licença ${license.numero_licenca}: ${daysUntilExpiry} dias restantes`);\n          \n          // REGRA CRÍTICA: bloquear se tiver mais de 60 dias para evitar custos\n          if (daysUntilExpiry > 60) {\n            const tipoValidacao = composicao ? 'combinação específica' : 'placas individuais';\n            console.log(`[VALIDAÇÃO DEFINITIVA] Estado ${state} BLOQUEADO: ${daysUntilExpiry} dias > 60 - EVITANDO CUSTO DESNECESSÁRIO (${tipoValidacao})`);\n            conflicts.push({\n              state: state,\n              licenseNumber: license.numero_licenca,\n              expiryDate: license.data_validade,\n              daysUntilExpiry: daysUntilExpiry,\n              tipoValidacao: tipoValidacao,\n              conflictingPlates: [\n                license.placa_unidade_tratora,\n                license.placa_primeira_carreta,\n                license.placa_segunda_carreta\n              ].filter(Boolean),\n              canRenew: false\n            });\n          } else {\n            console.log(`[VALIDAÇÃO DEFINITIVA] Estado ${state} LIBERADO: ${daysUntilExpiry} dias ≤ 60 - PODE RENOVAR`);\n          }\n        }\n      }\n      \n      console.log(`[VALIDAÇÃO DEFINITIVA] Total de conflitos encontrados: ${conflicts.length}`);\n      \n      res.json({\n        hasConflicts: conflicts.length > 0,\n        conflicts,\n        message: conflicts.length > 0 \n          ? `Encontrados ${conflicts.length} conflito(s) em licenças vigentes`\n          : 'Nenhum conflito encontrado'\n      });\n      \n    } catch (error) {\n      console.error('[VALIDAÇÃO DEFINITIVA] Erro ao verificar licenças existentes:', error);\n      res.status(500).json({ \n        message: 'Erro ao verificar licenças existentes',\n        error: String(error)\n      });\n    }\n  });\n\n  // Endpoint para sincronizar todas as licenças aprovadas\n  app.post('/api/admin/sync-approved-licenses', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      if (!isAdminUser(user)) {\n        return res.status(403).json({ message: 'Acesso negado' });\n      }\n\n      console.log('Iniciando sincronização de licenças aprovadas...');\n\n      // Buscar todas as licenças com estados aprovados\n      const query = `\n        SELECT \n          lr.id,\n          lr.main_vehicle_plate,\n          lr.additional_plates,\n          lr.tractor_unit_id,\n          lr.first_trailer_id,\n          lr.second_trailer_id,\n          lr.dolly_id,\n          lr.flatbed_id,\n          UNNEST(string_to_array(unnest(lr.state_statuses), ':')) as state_data\n        FROM license_requests lr\n        WHERE array_length(lr.state_statuses, 1) > 0\n          AND EXISTS (\n            SELECT 1 FROM unnest(lr.state_statuses) as status\n            WHERE status LIKE '%:approved:%'\n          )\n      `;\n\n      const result = await pool.query(query);\n      let sincronizadas = 0;\n\n      // Processar cada licença aprovada\n      for (const row of result.rows) {\n        const stateStatuses = row.state_data;\n        if (!stateStatuses) continue;\n\n        // Parse do estado e status\n        const statusParts = stateStatuses.split(':');\n        if (statusParts.length >= 4 && statusParts[1] === 'approved') {\n          const estado = statusParts[0];\n          const dataValidade = statusParts[2];\n          const numeroAet = statusParts[3] || `AET-${estado}-${row.id}`;\n\n          try {\n            await sincronizarLicencaEmitida(row, estado, numeroAet, dataValidade);\n            sincronizadas++;\n          } catch (error) {\n            console.error(`Erro ao sincronizar licença ${row.id} estado ${estado}:`, error);\n          }\n        }\n      }\n\n      console.log(`Sincronização concluída: ${sincronizadas} licenças sincronizadas`);\n\n      res.json({\n        message: `Sincronização concluída com sucesso`,\n        licencasSincronizadas: sincronizadas\n      });\n\n    } catch (error) {\n      console.error('Erro na sincronização:', error);\n      res.status(500).json({ message: 'Erro na sincronização de licenças' });\n    }\n  });\n\n  app.get('/api/licenses/issued', requireAuth, async (req, res) => {\n    try {\n      console.log(\"[DEBUG LICENÇAS EMITIDAS] Início da rota\");\n      \n      const user = req.user!;\n      let issuedLicenses = [];\n      \n      // Se for usuário administrativo, buscar todas as licenças emitidas\n      if (isAdminUser(user)) {\n        console.log(`Usuário ${user.email} (${user.role}) tem acesso administrativo. Buscando todas as licenças emitidas.`);\n        \n        // Buscar diretamente no banco se há licenças com estado aprovado\n        const licencasNoBanco = await db.select().from(licenseRequests).where(eq(licenseRequests.isDraft, false));\n        console.log(`[DEBUG LICENÇAS EMITIDAS] Total de licenças não-rascunho no banco: ${licencasNoBanco.length}`);\n        \n        // Filtrar licenças com estado aprovado manualmente\n        const licencasAprovadas = licencasNoBanco.filter(lic => {\n          console.log(`[DEBUG LICENÇAS EMITIDAS] Avaliando licença #${lic.id} - stateStatuses: ${JSON.stringify(lic.stateStatuses)}`);\n          \n          // Verificar estados aprovados\n          const temEstadoAprovado = lic.stateStatuses && \n                                   Array.isArray(lic.stateStatuses) && \n                                   lic.stateStatuses.some(ss => ss.includes(':approved'));\n          \n          console.log(`[DEBUG LICENÇAS EMITIDAS] Licença #${lic.id} - Tem estado aprovado: ${temEstadoAprovado ? 'SIM' : 'NÃO'}`);\n          \n          return temEstadoAprovado;\n        });\n        \n        console.log(`[DEBUG LICENÇAS EMITIDAS] Total de licenças filtradas com estado aprovado: ${licencasAprovadas.length}`);\n        issuedLicenses = licencasAprovadas;\n      } else {\n        console.log(`Usuário ${user.email} (${user.role}) tem acesso comum. Buscando apenas suas licenças emitidas.`);\n        \n        // Para usuários comuns, buscar também diretamente do banco\n        // Primeiro, obter os transportadores associados ao usuário\n        const userTransporters = await db.select()\n          .from(transporters)\n          .where(eq(transporters.userId, user.id));\n          \n        const transporterIds = userTransporters.map(t => t.id);\n        console.log(`[DEBUG LICENÇAS EMITIDAS] Transportadores associados ao usuário ${user.id}: ${transporterIds.join(', ')}`);\n        \n        // Buscar licenças onde o usuário é o dono OU o transportador está associado ao usuário\n        let licencasNoBanco = [];\n        \n        // Se houver transportadores associados, buscar licenças por transporterId também\n        if (transporterIds.length > 0) {\n          licencasNoBanco = await db.select()\n            .from(licenseRequests)\n            .where(\n              and(\n                eq(licenseRequests.isDraft, false),\n                or(\n                  eq(licenseRequests.userId, user.id),\n                  inArray(licenseRequests.transporterId, transporterIds)\n                )\n              )\n            );\n            \n          console.log(`[DEBUG LICENÇAS EMITIDAS] Encontradas ${licencasNoBanco.length} licenças para usuário ${user.id} ou transportadores ${transporterIds.join(', ')}`);\n        } else {\n          // Se não houver transportadores, buscar apenas por userId\n          licencasNoBanco = await db.select()\n            .from(licenseRequests)\n            .where(\n              and(\n                eq(licenseRequests.isDraft, false),\n                eq(licenseRequests.userId, user.id)\n              )\n            );\n            \n          console.log(`[DEBUG LICENÇAS EMITIDAS] Encontradas ${licencasNoBanco.length} licenças para usuário ${user.id} sem transportadores associados`);\n        }\n        \n        // Filtrar licenças com estado aprovado manualmente\n        issuedLicenses = licencasNoBanco.filter((lic: any) => {\n          // Verificar estados aprovados\n          return lic.stateStatuses && \n                 Array.isArray(lic.stateStatuses) && \n                 lic.stateStatuses.some((ss: string) => ss.includes(':approved'));\n        });\n        \n        console.log(`[DEBUG LICENÇAS EMITIDAS] Total de licenças emitidas para o usuário ${user.id}: ${issuedLicenses.length}`);\n      }\n      \n      // Enriquecer licenças com dados do transportador para exportações CSV\n      const allTransporters = await storage.getAllTransporters();\n      console.log(`[DEBUG LICENÇAS EMITIDAS] Total transportadores carregados: ${allTransporters.length}`);\n      \n      const licensesWithTransporter = issuedLicenses.map(license => {\n        const transporter = allTransporters.find(t => t.id === license.transporterId);\n        console.log(`[DEBUG LICENÇAS EMITIDAS] Licença ${license.id} - transporterId: ${license.transporterId}, encontrado: ${transporter ? transporter.name : 'NÃO ENCONTRADO'}`);\n        return {\n          ...license,\n          transporter: transporter ? {\n            id: transporter.id,\n            name: transporter.name,\n            tradeName: transporter.tradeName,\n            documentNumber: transporter.documentNumber\n          } : null\n        };\n      });\n\n      // Log das licenças que serão retornadas\n      console.log(`[DEBUG LICENÇAS EMITIDAS] Retornando ${licensesWithTransporter.length} licenças emitidas`);\n      console.log(`[DEBUG LICENÇAS EMITIDAS] IDs: ${licensesWithTransporter.map((l: any) => l.id).join(', ')}`);\n      \n      res.json(licensesWithTransporter);\n    } catch (error) {\n      console.error('Error fetching issued licenses:', error);\n      res.status(500).json({ message: 'Erro ao buscar licenças emitidas' });\n    }\n  });\n\n  // Upload e importação em lote de licenças/pedidos via CSV\n  app.post('/api/admin/licenses/bulk-import', uploadCSV.single('csvFile'), requireAuth, async (req, res) => {\n    console.log('[BULK IMPORT DEBUG] Requisição recebida');\n    console.log('[BULK IMPORT DEBUG] Headers:', req.headers['content-type']);\n    console.log('[BULK IMPORT DEBUG] Body keys:', Object.keys(req.body || {}));\n    console.log('[BULK IMPORT DEBUG] File presente:', !!req.file);\n    \n    const user = (req as any).user;\n    if (!user) {\n      return res.status(401).json({ message: \"Não autenticado\" });\n    }\n\n    if (!req.file) {\n      console.log('[BULK IMPORT DEBUG] Nenhum arquivo encontrado no req.file');\n      console.log('[BULK IMPORT DEBUG] Multer error?:', req.body);\n      return res.status(400).json({ \n        message: \"Arquivo CSV não encontrado - verifique se o campo do formulário se chama 'csvFile'\",\n        success: false,\n        errors: [\"Nenhum arquivo foi enviado ou nome do campo incorreto\"]\n      });\n    }\n\n    console.log(`[BULK LICENSE IMPORT] Iniciando importação de licenças por usuário ${user.email} (role: ${user.role})`);\n\n    try {\n      const csvBuffer = req.file.buffer;\n      let csvString = csvBuffer.toString('utf-8');\n      \n      // Remover BOM se presente\n      if (csvString.charCodeAt(0) === 0xFEFF) {\n        csvString = csvString.substring(1);\n      }\n      \n      // Parse CSV\n      const lines = csvString.split('\\n').filter(line => line.trim());\n      if (lines.length < 2) {\n        return res.status(400).json({ \n          message: \"Arquivo CSV inválido - deve conter cabeçalho e pelo menos uma linha de dados\",\n          success: false,\n          errors: [\"Arquivo vazio ou apenas com cabeçalho\"]\n        });\n      }\n\n      const header = lines[0].split(';').map(col => col.trim());\n      \n      // Validar colunas obrigatórias\n      const requiredColumns = [\n        'transportador_cpf_cnpj',\n        'tipo_conjunto',\n        'cavalo_placa',\n        'estados',\n        'comprimento',\n        'largura',\n        'altura',\n        'peso_total'\n      ];\n\n      const missingColumns = requiredColumns.filter(col => !header.includes(col));\n      if (missingColumns.length > 0) {\n        return res.status(400).json({\n          message: `Colunas obrigatórias ausentes: ${missingColumns.join(', ')}`,\n          success: false,\n          errors: [`Colunas obrigatórias ausentes: ${missingColumns.join(', ')}`]\n        });\n      }\n\n      const results = {\n        success: true,\n        imported: 0,\n        errors: [] as string[],\n        warnings: [] as string[]\n      };\n\n      // Mapeamento de tipos de conjunto (case insensitive)\n      const vehicleSetTypeMap: Record<string, string> = {\n        'bitrem 6 eixos': 'bitrain_6_axles',\n        'bitrem 7 eixos': 'bitrain_7_axles', \n        'bitrem 9 eixos': 'bitrain_9_axles',\n        'rodotrem 7 eixos': 'roadtrain_7_axles',\n        'rodotrem 9 eixos': 'roadtrain_9_axles',\n        'prancha': 'flatbed',\n        'romeu e julieta': 'romeo_juliet'\n      };\n\n      // Obter todos os transportadores e veículos\n      const allTransporters = await storage.getAllTransporters();\n      const allVehicles = await storage.getAllVehicles();\n\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        if (!line.trim()) continue;\n\n        const data = line.split(';').map(col => col.trim());\n        const rowData: Record<string, string> = {};\n        \n        header.forEach((col, index) => {\n          rowData[col] = data[index] || '';\n        });\n\n        try {\n          // 1. Validar transportador\n          if (!rowData.transportador_cpf_cnpj) {\n            throw new Error(\"CPF/CNPJ do transportador é obrigatório\");\n          }\n\n          const transporterDoc = rowData.transportador_cpf_cnpj.replace(/\\D/g, '');\n          const transporter = allTransporters.find(t => \n            t.documentNumber?.replace(/\\D/g, '') === transporterDoc\n          );\n          \n          if (!transporter) {\n            throw new Error(`Transportador não encontrado: ${rowData.transportador_cpf_cnpj}`);\n          }\n\n          // 2. Validar tipo de conjunto\n          if (!rowData.tipo_conjunto) {\n            throw new Error(\"Tipo de conjunto é obrigatório\");\n          }\n          \n          const normalizedType = rowData.tipo_conjunto.toLowerCase().trim();\n          const licenseType = vehicleSetTypeMap[normalizedType];\n          \n          if (!licenseType) {\n            throw new Error(`Tipo de conjunto inválido: ${rowData.tipo_conjunto}. Valores aceitos: ${Object.keys(vehicleSetTypeMap).join(', ')}`);\n          }\n\n          // 3. Validar veículos obrigatórios\n          if (!rowData.cavalo_placa || rowData.cavalo_placa.length < 6) {\n            throw new Error(\"Placa do cavalo inválida (mínimo 6 caracteres)\");\n          }\n\n          const tractorVehicle = allVehicles.find(v => \n            v.plate.toUpperCase() === rowData.cavalo_placa.toUpperCase()\n          );\n          \n          if (!tractorVehicle) {\n            throw new Error(`Veículo cavalo não encontrado: ${rowData.cavalo_placa}`);\n          }\n\n          // 4. Validar estados\n          if (!rowData.estados) {\n            throw new Error(\"Estados são obrigatórios\");\n          }\n\n          const states = rowData.estados.split(',').map(s => s.trim()).filter(s => s);\n          if (states.length === 0) {\n            throw new Error(\"Pelo menos um estado deve ser informado\");\n          }\n\n          // 5. Validar dimensões (planilha em metros, BD em centímetros)\n          const lengthInMeters = parseFloat(rowData.comprimento?.replace(',', '.') || '0');\n          const widthInMeters = parseFloat(rowData.largura?.replace(',', '.') || '0');\n          const heightInMeters = parseFloat(rowData.altura?.replace(',', '.') || '0');\n          const totalWeight = parseFloat(rowData.peso_total?.replace(',', '.') || '0');\n\n          if (lengthInMeters <= 0 || widthInMeters <= 0 || heightInMeters <= 0 || totalWeight <= 0) {\n            throw new Error(\"Dimensões e peso devem ser valores positivos\");\n          }\n\n          // Converter de metros para centímetros (como espera o banco de dados)\n          const length = Math.round(lengthInMeters * 100); // 25.5m → 2550cm\n          const width = Math.round(widthInMeters * 100);   // 2.6m → 260cm\n          const height = Math.round(heightInMeters * 100); // 4.4m → 440cm\n\n          // 6. Buscar veículos adicionais baseado no tipo\n          let firstTrailerVehicle = null;\n          let secondTrailerVehicle = null;\n          let dollyVehicle = null;\n          let flatbedVehicle = null;\n\n          // Primeira carreta (obrigatória para bitrem e rodotrem)\n          if (licenseType.includes('bitrain') || licenseType.includes('roadtrain')) {\n            if (!rowData.primeira_carreta_placa) {\n              throw new Error(\"Primeira carreta é obrigatória para este tipo de conjunto\");\n            }\n\n            firstTrailerVehicle = allVehicles.find(v => \n              v.plate.toUpperCase() === rowData.primeira_carreta_placa.toUpperCase()\n            );\n            \n            if (!firstTrailerVehicle) {\n              throw new Error(`Primeira carreta não encontrada: ${rowData.primeira_carreta_placa}`);\n            }\n          }\n\n          // Segunda carreta (obrigatória para bitrem e rodotrem)\n          if (licenseType.includes('bitrain') || licenseType.includes('roadtrain')) {\n            if (!rowData.segunda_carreta_placa) {\n              throw new Error(\"Segunda carreta é obrigatória para este tipo de conjunto\");\n            }\n\n            secondTrailerVehicle = allVehicles.find(v => \n              v.plate.toUpperCase() === rowData.segunda_carreta_placa.toUpperCase()\n            );\n            \n            if (!secondTrailerVehicle) {\n              throw new Error(`Segunda carreta não encontrada: ${rowData.segunda_carreta_placa}`);\n            }\n          }\n\n          // Dolly (obrigatório para rodotrem)\n          if (licenseType.includes('roadtrain')) {\n            if (!rowData.dolly_placa) {\n              throw new Error(\"Dolly é obrigatório para rodotrem\");\n            }\n\n            dollyVehicle = allVehicles.find(v => \n              v.plate.toUpperCase() === rowData.dolly_placa.toUpperCase()\n            );\n            \n            if (!dollyVehicle) {\n              throw new Error(`Dolly não encontrado: ${rowData.dolly_placa}`);\n            }\n          }\n\n          // Prancha (obrigatória para prancha)\n          if (licenseType === 'flatbed') {\n            if (!rowData.prancha_placa) {\n              throw new Error(\"Prancha é obrigatória para este tipo de conjunto\");\n            }\n\n            flatbedVehicle = allVehicles.find(v => \n              v.plate.toUpperCase() === rowData.prancha_placa.toUpperCase()\n            );\n            \n            if (!flatbedVehicle) {\n              throw new Error(`Prancha não encontrada: ${rowData.prancha_placa}`);\n            }\n          }\n\n          // 7. Verificar licenças existentes para evitar duplicatas\n          const existingLicenses = await storage.getAllLicenseRequests();\n          const vehicleCombination = [\n            tractorVehicle.id,\n            firstTrailerVehicle?.id,\n            secondTrailerVehicle?.id,\n            dollyVehicle?.id,\n            flatbedVehicle?.id\n          ].filter(Boolean).sort().join('-');\n\n          const existingLicense = existingLicenses.find(license => {\n            const licenseCombination = [\n              license.tractorUnitId,\n              license.firstTrailerId,\n              license.secondTrailerId,\n              license.dollyId,\n              license.flatbedId\n            ].filter(Boolean).sort().join('-');\n            \n            return licenseCombination === vehicleCombination && \n                   license.status !== 'cancelled' &&\n                   states.some(state => license.states.includes(state));\n          });\n\n          if (existingLicense) {\n            results.warnings.push(`Linha ${i + 1}: Já existe licença similar (${existingLicense.requestNumber}) para esta combinação de veículos`);\n            continue;\n          }\n\n          // 8. Gerar número da licença\n          const requestNumber = `AET-${new Date().getFullYear()}-${Math.floor(Math.random() * 10000)}`;\n\n          // 9. Criar a licença\n          const newLicense = {\n            transporterId: transporter.id,\n            type: licenseType,\n            mainVehiclePlate: tractorVehicle.plate,\n            requestNumber,\n            \n            // Veículos\n            tractorUnitId: tractorVehicle.id,\n            firstTrailerId: firstTrailerVehicle?.id,\n            secondTrailerId: secondTrailerVehicle?.id,\n            dollyId: dollyVehicle?.id,\n            flatbedId: flatbedVehicle?.id,\n            \n            // Dimensões (em centímetros)\n            length: length, // Já convertido para cm\n            width: width,   // Já convertido para cm\n            height: height, // Já convertido para cm\n            totalWeight: totalWeight,\n            cargoType: 'dry_cargo' as const,\n            \n            // Campos obrigatórios\n            additionalPlates: [],\n            additionalPlatesDocuments: [],\n            \n            // Estados e metadados\n            states: states,\n            status: 'pending_registration' as const,\n            isDraft: false,\n            comments: rowData.observacoes || `Importado via planilha em ${new Date().toLocaleString('pt-BR')}`\n          };\n\n          await storage.createLicenseRequest(user.id, newLicense);\n          results.imported++;\n\n          console.log(`[BULK LICENSE IMPORT] Licença criada: ${newLicense.mainVehiclePlate} - ${licenseType}`);\n\n        } catch (error) {\n          const errorMessage = `Linha ${i + 1}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;\n          results.errors.push(errorMessage);\n          console.error(`[BULK LICENSE IMPORT] Erro linha ${i + 1}:`, error);\n        }\n      }\n\n      console.log(`[BULK LICENSE IMPORT] Concluído: ${results.imported} licenças importadas, ${results.errors.length} erros`);\n\n      return res.json({\n        message: `Importação concluída: ${results.imported} licenças importadas`,\n        ...results\n      });\n\n    } catch (error) {\n      console.error('[BULK LICENSE IMPORT] Erro geral:', error);\n      return res.status(500).json({\n        message: \"Erro interno do servidor\",\n        success: false,\n        errors: [error instanceof Error ? error.message : 'Erro desconhecido']\n      });\n    }\n  });\n\n  // Endpoint para baixar template da planilha de licenças\n  app.get('/api/admin/licenses/bulk-import/template', requireAuth, async (req, res) => {\n    const csvHeaders = [\n      'transportador_cpf_cnpj',\n      'tipo_conjunto',\n      'cavalo_placa',\n      'primeira_carreta_placa',\n      'segunda_carreta_placa',\n      'dolly_placa',\n      'prancha_placa',\n      'estados',\n      'comprimento',\n      'largura',\n      'altura',\n      'peso_total',\n      'observacoes'\n    ];\n\n    const exampleData = [\n      '12.345.678/0001-90',\n      'Bitrem 9 eixos',\n      'ABC1234',\n      'DEF5678',\n      'GHI9012',\n      '',\n      '',\n      'SP,MG,RJ',\n      '25.5',\n      '2.6',\n      '4.4',\n      '74.0',\n      'Licença para rota SP-RJ'\n    ];\n\n    const csvContent = [\n      csvHeaders.join(';'),\n      exampleData.join(';')\n    ].join('\\n');\n\n    res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"template_importacao_licencas.csv\"');\n    res.send('\\uFEFF' + csvContent); // BOM para UTF-8\n  });\n\n  // Endpoint para cadastro em massa de veículos via CSV\n  app.post(\"/api/vehicles/bulk-import\", requireAuth, uploadCSV.single('csvFile'), async (req, res) => {\n    try {\n      const user = req.user!;\n      \n      console.log('[BULK IMPORT] Iniciando importação:', {\n        hasFile: !!req.file,\n        fileName: req.file?.originalname,\n        fileSize: req.file?.size,\n        user: user.email\n      });\n\n      if (!req.file) {\n        console.log('[BULK IMPORT] Erro: Arquivo não encontrado');\n        return res.status(400).json({\n          success: false,\n          message: \"Arquivo CSV é obrigatório\"\n        });\n      }\n\n      const csvContent = req.file.buffer.toString('utf-8');\n      console.log('[BULK IMPORT] Conteúdo CSV (primeiros 200 chars):', csvContent.substring(0, 200));\n      \n      const lines = csvContent.split('\\n').filter(line => line.trim());\n      console.log('[BULK IMPORT] Número de linhas:', lines.length);\n      \n      if (lines.length < 2) {\n        console.log('[BULK IMPORT] Erro: CSV com menos de 2 linhas');\n        return res.status(400).json({\n          success: false,\n          message: \"Arquivo CSV deve conter pelo menos um cabeçalho e uma linha de dados\"\n        });\n      }\n\n      const header = lines[0].split(';').map(col => col.trim());\n      console.log('[BULK IMPORT] Header detectado:', header);\n      \n      const requiredColumns = [\n        'placa', 'tipo_veiculo', 'marca', 'modelo', 'ano_fabricacao',\n        'ano_crlv', 'renavam', 'cmt', 'tara', 'transportador_cpf_cnpj'\n      ];\n      const optionalColumns = ['eixo', 'tipo_carroceria']; // Eixo é opcional (padrão 2), tipo_carroceria é opcional\n\n      // Validar se todas as colunas obrigatórias estão presentes\n      const missingColumns = requiredColumns.filter(col => !header.includes(col));\n      console.log('[BULK IMPORT] Colunas obrigatórias:', requiredColumns);\n      console.log('[BULK IMPORT] Colunas faltando:', missingColumns);\n      \n      if (missingColumns.length > 0) {\n        console.log('[BULK IMPORT] Erro: Colunas faltando');\n        return res.status(400).json({\n          success: false,\n          message: `Colunas obrigatórias faltando: ${missingColumns.join(', ')}. Formato esperado: placa;tipo_veiculo;tipo_carroceria;marca;modelo;ano_fabricacao;ano_crlv;renavam;cmt;tara;eixo;transportador_cpf_cnpj`\n        });\n      }\n\n      const results = { inserted: 0, errors: [] as any[] };\n      const validVehicles = [];\n\n      // Mapear tipos de veículo aceitos\n      const vehicleTypeMap: Record<string, string> = {\n        'Unidade Tratora (Cavalo)': 'tractor_unit',\n        'Cavalo Mecânico': 'tractor_unit',\n        'Cavalo': 'tractor_unit',\n        'Primeira Carreta': 'semi_trailer',\n        'Segunda Carreta': 'semi_trailer',\n        'Semirreboque': 'semi_trailer',\n        'Carreta': 'semi_trailer',\n        'Reboque': 'trailer',\n        'Dolly': 'dolly',\n        'Prancha': 'flatbed',\n        'Caminhão': 'truck'\n      };\n\n      // Mapear tipos de carroceria aceitos (opcional)\n      const bodyTypeMap: Record<string, string> = {\n        'Aberta': 'open',\n        'Basculante': 'dump',\n        'Boiadeiro': 'cattle',\n        'Cana de Açúcar': 'sugar_cane',\n        'Container': 'container',\n        'Fechada': 'closed',\n        'Mecânico operacional': 'mechanical_operational',\n        'Plataforma': 'platform',\n        'Prancha': 'flatbed',\n        'Prancha - Cegonha': 'car_carrier',\n        'Prancha Extensiva': 'extendable_flatbed',\n        'Rodo Caçamba': 'dump_truck',\n        'Rollon Rollof': 'roll_on_roll_off',\n        'SILO': 'silo',\n        'Subestação Móvel': 'mobile_substation',\n        'Tanque': 'tank',\n        'Tran Toras': 'log_carrier',\n        'VTAV': 'vtav'\n      };\n\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        if (!line.trim()) continue;\n\n        const data = line.split(';').map(col => col.trim());\n        const rowData: Record<string, string> = {};\n        \n        header.forEach((col, index) => {\n          rowData[col] = data[index] || '';\n        });\n\n        try {\n          // Validações\n          if (!rowData.placa || rowData.placa.length < 6) {\n            throw new Error(\"Placa inválida (mínimo 6 caracteres)\");\n          }\n\n          if (!rowData.tipo_veiculo || !vehicleTypeMap[rowData.tipo_veiculo]) {\n            throw new Error(`Tipo de veículo inválido: ${rowData.tipo_veiculo}`);\n          }\n\n          if (!rowData.transportador_cpf_cnpj) {\n            throw new Error(\"CPF/CNPJ do transportador é obrigatório\");\n          }\n\n          // Verificar se o transportador existe\n          const transporterDoc = rowData.transportador_cpf_cnpj.replace(/\\D/g, '');\n          const allTransporters = await storage.getAllTransporters();\n          const transporter = allTransporters.find(t => \n            t.documentNumber?.replace(/\\D/g, '') === transporterDoc\n          );\n          \n          if (!transporter) {\n            throw new Error(`Transportador não encontrado: ${rowData.transportador_cpf_cnpj}`);\n          }\n\n          // Determinar userId para o veículo baseado no perfil do usuário e vinculação do transportador\n          let targetUserId = transporter.userId;\n          \n          // Se o usuário que está fazendo a importação é administrativo,\n          // não vincular veículo a ele, deixar como \"Usuário undefined\"\n          const isAdministrativeUser = isAdminUser(user);\n          \n          if (!transporter.userId) {\n            if (isAdministrativeUser) {\n              console.log(`[BULK IMPORT] Transportador ${transporter.name} não possui usuário vinculado. Usuário administrativo ${user.email} - deixando veículo sem vinculação (undefined)`);\n              targetUserId = null;\n            } else {\n              console.log(`[BULK IMPORT] Transportador ${transporter.name} não possui usuário vinculado. Usando usuário da importação: ${user.email}`);\n              targetUserId = user.id;\n            }\n          }\n\n          // Verificar se a placa já existe\n          const allVehicles = await storage.getAllVehicles();\n          const existingVehicle = allVehicles.find(v => \n            v.plate.toUpperCase() === rowData.placa.toUpperCase()\n          );\n          \n          if (existingVehicle) {\n            throw new Error(`Placa já cadastrada: ${rowData.placa}`);\n          }\n\n          // Preparar dados do veículo (conforme schema do banco)\n          // Usar o userId do transportador ou fallback para o usuário da importação\n          \n          // Determinar bodyType baseado no tipo_carroceria ou usar valor padrão baseado no tipo do veículo\n          let bodyType = null;\n          \n          console.log(`[BULK IMPORT] Processando tipo_carroceria para ${rowData.placa}: \"${rowData.tipo_carroceria}\"`);\n          \n          if (rowData.tipo_carroceria && bodyTypeMap[rowData.tipo_carroceria]) {\n            bodyType = bodyTypeMap[rowData.tipo_carroceria];\n            console.log(`[BULK IMPORT] Tipo carroceria mapeado: \"${rowData.tipo_carroceria}\" -> \"${bodyType}\"`);\n          } else {\n            // Valores padrão baseados no tipo do veículo se não especificado\n            const vehicleType = vehicleTypeMap[rowData.tipo_veiculo];\n            if (vehicleType === 'tractor_unit') {\n              bodyType = null; // Unidade tratora não tem carroceria\n            } else if (vehicleType === 'semi_trailer' || vehicleType === 'trailer') {\n              bodyType = 'container'; // Padrão para semirreboques/reboques\n            } else if (vehicleType === 'flatbed') {\n              bodyType = 'flatbed'; // Prancha\n            } else {\n              bodyType = 'closed'; // Padrão geral\n            }\n            console.log(`[BULK IMPORT] Tipo carroceria não especificado/inválido, usando padrão baseado no veículo \"${vehicleType}\": \"${bodyType}\"`);\n          }\n          \n          const vehicleData = {\n            plate: rowData.placa.toUpperCase(),\n            type: vehicleTypeMap[rowData.tipo_veiculo],\n            brand: rowData.marca || '',\n            model: rowData.modelo || '',\n            year: parseInt(rowData.ano_fabricacao) || new Date().getFullYear(),\n            crlvYear: parseInt(rowData.ano_crlv) || new Date().getFullYear(),\n            renavam: rowData.renavam || '',\n            cmt: parseFloat(rowData.cmt) || 0,\n            tare: parseFloat(rowData.tara) || 0,\n            axleCount: parseInt(rowData.eixo) || 2, // Valor padrão 2 se não informado\n            bodyType: bodyType,\n            status: 'pending_documents' as any,\n            ownershipType: 'proprio' as any,\n            transporterUserId: targetUserId // Usar o userId do transportador ou fallback para o usuário da importação\n          };\n\n          console.log('[BULK IMPORT] Veículo validado:', vehicleData);\n          validVehicles.push(vehicleData);\n\n        } catch (error: any) {\n          console.log('[BULK IMPORT] Erro na linha', i + 1, ':', error.message);\n          results.errors.push({\n            row: i + 1,\n            data: rowData,\n            error: error.message\n          });\n        }\n      }\n\n      console.log('[BULK IMPORT] Total de veículos válidos:', validVehicles.length);\n      console.log('[BULK IMPORT] Erros encontrados:', results.errors.length);\n\n      // Inserir veículos válidos no banco\n      for (const vehicleData of validVehicles) {\n        try {\n          console.log('[BULK IMPORT] Tentando criar veículo:', vehicleData.plate);\n          \n          // Usar o userId do transportador, não do usuário logado\n          const { transporterUserId, ...vehicleDataClean } = vehicleData;\n          const cleanVehicleData = {\n            ...vehicleDataClean,\n            bodyType: vehicleDataClean.bodyType || undefined\n          };\n          await storage.createVehicle(transporterUserId, cleanVehicleData);\n          \n          console.log('[BULK IMPORT] Veículo criado com sucesso para transportador:', vehicleData.plate);\n          results.inserted++;\n          \n          // Enviar notificação WebSocket sobre o novo veículo\n          broadcastMessage({\n            type: 'VEHICLE_UPDATE',\n            data: {\n              action: 'created',\n              vehicleId: null, // Será definido após criação\n              message: `Novo veículo importado: ${vehicleData.plate}`\n            }\n          });\n          \n        } catch (error: any) {\n          console.log('[BULK IMPORT] Erro ao criar veículo:', vehicleData.plate, error.message);\n          results.errors.push({\n            row: 0,\n            data: vehicleData,\n            error: `Erro ao salvar: ${error.message}`\n          });\n        }\n      }\n\n      // Notificar via WebSocket sobre novos veículos\n      if (results.inserted > 0) {\n        broadcastMessage({\n          type: 'VEHICLE_UPDATE',\n          data: { action: 'bulk_create', count: results.inserted }\n        });\n      }\n\n      res.json({\n        success: true,\n        inserted: results.inserted,\n        errors: results.errors,\n        validVehicles: validVehicles\n      });\n\n    } catch (error: any) {\n      console.error('Erro no upload CSV:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || \"Erro interno do servidor\"\n      });\n    }\n  });\n\n  // Endpoint para buscar o histórico de status de uma licença\n  app.get('/api/licenses/:id/status-history', requireAuth, async (req, res) => {\n    try {\n      const licenseId = parseInt(req.params.id);\n      \n      // Verifica se a licença existe\n      const license = await storage.getLicenseRequestById(licenseId);\n      if (!license) {\n        return res.status(404).json({ message: 'Licença não encontrada' });\n      }\n      \n      // Verifica se o usuário tem permissão para acessar essa licença\n      const isStaff = ['operational', 'supervisor', 'admin'].includes(req.user!.role);\n      if (!isStaff && license.userId !== req.user!.id) {\n        return res.status(403).json({ message: 'Sem permissão para acessar o histórico desta licença' });\n      }\n      \n      // Busca o histórico completo\n      const statusHistory = await storage.getStatusHistoryByLicenseId(licenseId);\n      \n      res.json(statusHistory);\n    } catch (error) {\n      console.error('Erro ao buscar histórico de status:', error);\n      res.status(500).json({ message: 'Erro ao buscar histórico de status' });\n    }\n  });\n  \n  // Endpoint para buscar o histórico de status de um estado específico na licença\n  app.get('/api/licenses/:id/status-history/:state', requireAuth, async (req, res) => {\n    try {\n      const licenseId = parseInt(req.params.id);\n      const state = req.params.state;\n      \n      // Verifica se a licença existe\n      const license = await storage.getLicenseRequestById(licenseId);\n      if (!license) {\n        return res.status(404).json({ message: 'Licença não encontrada' });\n      }\n      \n      // Verifica se o usuário tem permissão para acessar essa licença\n      const isStaff = ['operational', 'supervisor', 'admin'].includes(req.user!.role);\n      if (!isStaff && license.userId !== req.user!.id) {\n        return res.status(403).json({ message: 'Sem permissão para acessar o histórico desta licença' });\n      }\n      \n      // Verifica se o estado existe na licença\n      if (!license.states.includes(state)) {\n        return res.status(400).json({ message: 'Estado não encontrado na licença' });\n      }\n      \n      // Busca o histórico para o estado específico\n      const stateHistory = await storage.getStatusHistoryByState(licenseId, state);\n      \n      res.json(stateHistory);\n    } catch (error) {\n      console.error('Erro ao buscar histórico de status do estado:', error);\n      res.status(500).json({ message: 'Erro ao buscar histórico de status do estado' });\n    }\n  });\n\n  // Admin endpoints\n  // Endpoint para buscar todas as licenças - acessível para Admin, Operacional e Supervisor\n  // Rota para admin/operational obter todas as licenças\n  app.get('/api/admin/licenses', requireAuth, requirePermission('manageLicenses', 'view'), async (req, res) => {\n    try {\n      console.log('🚀 [ADMIN LICENSES] Iniciando busca otimizada para grande escala...');\n      const startTime = Date.now();\n      \n      // PAGINAÇÃO OTIMIZADA PARA 50K+ REGISTROS\n      const page = Math.max(1, parseInt(req.query.page as string) || 1);\n      const limit = Math.min(100, parseInt(req.query.limit as string) || 25); // Máx 100 por página\n      const offset = (page - 1) * limit;\n      \n      // FILTROS OTIMIZADOS\n      const searchTerm = (req.query.search as string)?.trim();\n      const statusFilter = req.query.status as string;\n      const stateFilter = req.query.state as string;\n      const transporterFilter = req.query.transporter as string;\n      const shouldIncludeRenewalDrafts = req.query.includeRenewal === 'true';\n      \n      console.log(`📊 [ADMIN LICENSES] Parâmetros: page=${page}, limit=${limit}, search=\"${searchTerm}\", status=\"${statusFilter}\"`);\n      \n      // QUERY OTIMIZADA COM ÍNDICES - BUSCA APENAS DADOS NECESSÁRIOS\n      let query = db.select({\n        id: licenseRequests.id,\n        userId: licenseRequests.userId,\n        transporterId: licenseRequests.transporterId,\n        requestNumber: licenseRequests.requestNumber,\n        type: licenseRequests.type,\n        mainVehiclePlate: licenseRequests.mainVehiclePlate,\n        states: licenseRequests.states,\n        status: licenseRequests.status,\n        stateStatuses: licenseRequests.stateStatuses,\n        createdAt: licenseRequests.createdAt,\n        updatedAt: licenseRequests.updatedAt,\n        isDraft: licenseRequests.isDraft,\n        comments: licenseRequests.comments,\n        validUntil: licenseRequests.validUntil,\n        issuedAt: licenseRequests.issuedAt,\n        aetNumber: licenseRequests.aetNumber\n      }).from(licenseRequests);\n      \n      // APLICAR FILTROS NO BANCO PARA PERFORMANCE\n      const conditions = [];\n      \n      // Filtro de rascunhos de renovação\n      if (!shouldIncludeRenewalDrafts) {\n        conditions.push(\n          or(\n            eq(licenseRequests.isDraft, false),\n            and(\n              eq(licenseRequests.isDraft, true),\n              or(\n                isNull(licenseRequests.comments),\n                not(ilike(licenseRequests.comments, '%Renovação%'))\n              )\n            )\n          )\n        );\n      }\n      \n      // Filtro de busca por placa ou número de pedido\n      if (searchTerm) {\n        conditions.push(\n          or(\n            ilike(licenseRequests.mainVehiclePlate, `%${searchTerm}%`),\n            ilike(licenseRequests.requestNumber, `%${searchTerm}%`)\n          )\n        );\n      }\n      \n      // Filtro de status\n      if (statusFilter && statusFilter !== 'all') {\n        conditions.push(eq(licenseRequests.status, statusFilter));\n      }\n      \n      // APLICAR TODAS AS CONDIÇÕES\n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n      \n      // BUSCAR CONTAGEM TOTAL (OTIMIZADA)\n      const countQuery = db.select({ count: count() }).from(licenseRequests);\n      if (conditions.length > 0) {\n        countQuery.where(and(...conditions));\n      }\n      \n      // EXECUTAR QUERIES EM PARALELO PARA PERFORMANCE\n      const [licenses, totalResult] = await Promise.all([\n        query.orderBy(desc(licenseRequests.createdAt)).limit(limit).offset(offset),\n        countQuery\n      ]);\n      \n      const total = totalResult[0].count;\n      const totalPages = Math.ceil(total / limit);\n      \n      console.log(`⚡ [ADMIN LICENSES] Query executada em ${Date.now() - startTime}ms - ${licenses.length}/${total} registros`);\n      \n      // BUSCAR TRANSPORTADORES APENAS DOS REGISTROS ATUAIS (OTIMIZADO)\n      const transporterIds = [...new Set(licenses.map(l => l.transporterId).filter(Boolean))];\n      const transportersMap = new Map();\n      \n      if (transporterIds.length > 0) {\n        const transportersData = await db.select({\n          id: transporters.id,\n          name: transporters.name,\n          tradeName: transporters.tradeName,\n          documentNumber: transporters.documentNumber\n        }).from(transporters).where(inArray(transporters.id, transporterIds));\n        \n        transportersData.forEach(t => {\n          transportersMap.set(t.id, t);\n        });\n      }\n      \n      // ENRIQUECER APENAS OS DADOS ATUAIS\n      const licensesWithTransporter = licenses.map(license => ({\n        ...license,\n        transporter: transportersMap.get(license.transporterId) || null\n      }));\n      \n      const endTime = Date.now();\n      console.log(`✅ [ADMIN LICENSES] Resposta preparada em ${endTime - startTime}ms - Performance otimizada para grande escala`);\n      \n      res.json({\n        data: licensesWithTransporter,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages,\n          hasNext: page < totalPages,\n          hasPrev: page > 1\n        },\n        performance: {\n          executionTime: endTime - startTime,\n          recordsPerSecond: Math.round((licenses.length / (endTime - startTime)) * 1000)\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching admin licenses (optimized):', error);\n      res.status(500).json({ message: 'Erro ao buscar licenças administrativas' });\n    }\n  });\n  \n  // Endpoint para excluir uma licença - acessível apenas para Admin\n  app.delete('/api/admin/licenses/:id', requireAdmin, async (req, res) => {\n    try {\n      const licenseId = parseInt(req.params.id);\n      \n      // Verificar se a licença existe\n      const existingLicense = await storage.getLicenseRequestById(licenseId);\n      if (!existingLicense) {\n        return res.status(404).json({ message: 'Licença não encontrada' });\n      }\n      \n      // Excluir a licença\n      await storage.deleteLicenseRequest(licenseId);\n      \n      res.status(200).json({ message: 'Licença excluída com sucesso' });\n    } catch (error: any) {\n      console.error('Erro ao excluir licença:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  // Rota para staff (operational/supervisor) obter todas as licenças\n  app.get('/api/staff/licenses', requireOperational, async (req, res) => {\n    try {\n      // Obter todas as licenças\n      const allLicenses = await storage.getAllLicenseRequests();\n      \n      // Verificar se deve incluir rascunhos de renovação (por padrão não inclui)\n      const shouldIncludeRenewalDrafts = req.query.includeRenewal === 'true';\n      \n      // Filtrar rascunhos de renovação, a menos que solicitado explicitamente para incluí-los\n      const licenses = shouldIncludeRenewalDrafts \n        ? allLicenses \n        : allLicenses.filter(license => {\n            // Se é um rascunho e o comentário menciona \"Renovação\", é um rascunho de renovação\n            if (license.isDraft && license.comments && license.comments.includes('Renovação')) {\n              return false; // excluir rascunhos de renovação\n            }\n            return true; // manter todos os outros\n          });\n      \n      console.log(`Total de licenças staff: ${allLicenses.length}, filtradas: ${licenses.length}, incluindo renovação: ${shouldIncludeRenewalDrafts}`);\n      \n      res.json(licenses);\n    } catch (error) {\n      console.error('Error fetching all license requests for staff:', error);\n      res.status(500).json({ message: 'Erro ao buscar todas as solicitações de licenças' });\n    }\n  });\n  \n  // Rota para admin check\n  app.get('/api/admin/check', requireAuth, (req, res) => {\n    const user = req.user!;\n    \n    if (user.isAdmin) {\n      res.json({ message: \"Acesso de administrador confirmado\" });\n    } else {\n      res.status(403).json({ message: \"Acesso negado\" });\n    }\n  });\n  \n  // Rotas para staff check\n  app.get('/api/staff/check-operational', requireAuth, (req, res) => {\n    const user = req.user!;\n    \n    if (user.role === 'operational' || user.role === 'supervisor' || user.role === 'manager' || user.role === 'financial' || user.role === 'admin') {\n      res.json({ message: \"Acesso operacional confirmado\" });\n    } else {\n      res.status(403).json({ message: \"Acesso negado. Perfil operacional necessário\" });\n    }\n  });\n  \n  app.get('/api/staff/check-supervisor', requireAuth, (req, res) => {\n    const user = req.user!;\n    \n    if (user.role === 'supervisor' || user.role === 'manager' || user.role === 'financial' || user.role === 'admin') {\n      res.json({ message: \"Acesso de supervisor confirmado\" });\n    } else {\n      res.status(403).json({ message: \"Acesso negado. Perfil de supervisor necessário\" });\n    }\n  });\n  \n  app.get('/api/staff/check-financial', requireAuth, (req, res) => {\n    const user = req.user!;\n    \n    if (user.role === 'financial' || user.role === 'manager' || user.role === 'admin') {\n      res.json({ message: \"Acesso financeiro confirmado\" });\n    } else {\n      res.status(403).json({ message: \"Acesso negado. Perfil financeiro necessário\" });\n    }\n  });\n  \n  /* Rota removida para evitar duplicação - já existe implementação abaixo\n  // Rota para obter usuários não-admin para seleção\n  app.get('/api/admin/non-admin-users', requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getNonAdminUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Erro ao buscar usuários não-admin:', error);\n      res.status(500).json({ message: 'Erro ao buscar usuários não-admin' });\n    }\n  });\n  */\n  \n  // Dashboard AET endpoint\n  app.get(\"/api/dashboard/aet\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as Express.User;\n      \n      // Verificar se o usuário tem permissão para acessar o dashboard AET\n      if (!isAdminUser(user) && user.role !== 'manager') {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const dashboardData = await storage.getDashboardAETData();\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Error fetching AET dashboard data:\", error);\n      res.status(500).json({ message: \"Erro ao buscar dados do dashboard AET\" });\n    }\n  });\n\n  // Dashboard Admin\n  app.get('/api/admin/dashboard/stats', requireAdmin, async (req, res) => {\n    try {\n      // Como é admin, vamos pegar as estatísticas gerais, não específicas de um usuário\n      const stats = await storage.getDashboardStats(0); // 0 = all users\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching admin dashboard stats:', error);\n      res.status(500).json({ message: 'Erro ao buscar estatísticas do dashboard administrativo' });\n    }\n  });\n\n  app.get('/api/admin/dashboard/vehicle-stats', requireAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getVehicleStats(0); // 0 = all users\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching admin vehicle stats:', error);\n      res.status(500).json({ message: 'Erro ao buscar estatísticas de veículos administrativo' });\n    }\n  });\n\n  app.get('/api/admin/dashboard/state-stats', requireAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getStateStats(0); // 0 = all users\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching admin state stats:', error);\n      res.status(500).json({ message: 'Erro ao buscar estatísticas por estado administrativo' });\n    }\n  });\n  \n  // Rota para admin obter todos os veículos\n  app.get('/api/admin/vehicles', requireAdmin, async (req, res) => {\n    try {\n      // Usar a função otimizada para buscar todos os veículos\n      const allVehicles = await storage.getAllVehicles();\n      res.json(allVehicles);\n    } catch (error) {\n      console.error(\"Erro ao buscar todos os veículos:\", error);\n      res.status(500).json({ message: \"Erro ao buscar todos os veículos\" });\n    }\n  });\n  \n  // Configuração do multer para upload de arquivos de veículos\n  const vehicleStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      // Usar o diretório de uploads externo com subpasta para veículos\n      const vehicleUploadDir = path.join(uploadDir, 'vehicles');\n      if (!fs.existsSync(vehicleUploadDir)) {\n        fs.mkdirSync(vehicleUploadDir, { recursive: true });\n      }\n      cb(null, vehicleUploadDir);\n    },\n    filename: (req, file, cb) => {\n      // Preservar o ID do veículo no nome do arquivo para facilitar substituição\n      const vehicleId = req.params.id || Date.now();\n      const ext = path.extname(file.originalname);\n      cb(null, `vehicle-${vehicleId}-crlv${ext}`);\n    }\n  });\n  \n  const vehicleFileFilter = (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n    // Aceitar apenas imagens e PDFs\n    if (file.mimetype.startsWith('image/') || file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  };\n  \n  const vehicleUpload = multer({ \n    storage: vehicleStorage,\n    fileFilter: vehicleFileFilter,\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB max file size\n    }\n  });\n\n  // Rota para admin atualizar um veículo específico\n  app.patch('/api/admin/vehicles/:id', requireAdmin, vehicleUpload.single('crlvFile'), async (req, res) => {\n    try {\n      const vehicleId = parseInt(req.params.id);\n      if (isNaN(vehicleId)) {\n        return res.status(400).json({ message: \"ID de veículo inválido\" });\n      }\n      \n      // Verificar se o veículo existe\n      const vehicle = await storage.getVehicleById(vehicleId);\n      if (!vehicle) {\n        return res.status(404).json({ message: \"Veículo não encontrado\" });\n      }\n      \n      // Tratar formulário multipart\n      let vehicleData: any = {};\n      \n      // Se os dados vierem como campo JSON\n      if (req.body.vehicleData) {\n        try {\n          if (typeof req.body.vehicleData === 'string' && req.body.vehicleData.trim().length > 0) {\n            vehicleData = JSON.parse(req.body.vehicleData);\n          } else {\n            console.error(\"Campo vehicleData está vazio ou não é uma string válida:\", req.body.vehicleData);\n            return res.status(400).json({ message: \"Dados do veículo estão vazios ou inválidos\" });\n          }\n        } catch (err) {\n          console.error(\"Erro ao processar JSON de dados do veículo:\", err);\n          console.error(\"Conteúdo do campo vehicleData:\", req.body.vehicleData);\n          return res.status(400).json({ message: \"Dados do veículo inválidos - JSON malformado\" });\n        }\n      } else {\n        // Caso contrário, usar campos individuais\n        const { plate, type, tare, crlvYear, status } = req.body;\n        \n        if (!plate || !type || !tare || !crlvYear || !status) {\n          return res.status(400).json({ message: \"Dados incompletos\" });\n        }\n        \n        vehicleData = {\n          plate,\n          type,\n          tare: Number(tare),\n          crlvYear: Number(crlvYear),\n          status\n        };\n      }\n      \n      // Verificar se há um novo arquivo CRLV\n      if (req.file) {\n        console.log(\"Arquivo CRLV recebido:\", req.file.filename);\n        \n        // Se o veículo já tinha um arquivo CRLV, excluir o arquivo antigo\n        if (vehicle.crlvUrl) {\n          try {\n            // Extrair o caminho físico do arquivo antigo\n            const oldFilePath = path.join(process.cwd(), vehicle.crlvUrl.replace(/^\\//, ''));\n            \n            // Verificar se o arquivo existe antes de tentar excluí-lo\n            if (fs.existsSync(oldFilePath)) {\n              fs.unlinkSync(oldFilePath);\n              console.log(\"Arquivo CRLV antigo excluído:\", oldFilePath);\n            }\n          } catch (err) {\n            console.error(\"Erro ao excluir arquivo CRLV antigo:\", err);\n            // Não interromper o processo se falhar ao excluir o arquivo antigo\n          }\n        }\n        \n        // Adicionar o caminho do novo arquivo aos dados do veículo\n        vehicleData.crlvUrl = `/uploads/vehicles/${req.file.filename}`;\n      }\n      \n      // Atualizar o veículo\n      const updatedVehicle = await storage.updateVehicle(vehicleId, vehicleData);\n      \n      res.json(updatedVehicle);\n    } catch (error) {\n      console.error(\"Erro ao atualizar veículo:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar veículo\" });\n    }\n  });\n  \n\n  \n  // Rota para verificar acesso supervisor\n  app.get('/api/staff/check-supervisor', requireAuth, (req, res) => {\n    const user = req.user!;\n    \n    if (user.role === 'supervisor' || user.isAdmin) {\n      res.json({ \n        message: \"Acesso de supervisor confirmado\",\n        role: user.role\n      });\n    } else {\n      res.status(403).json({ message: \"Acesso negado\" });\n    }\n  });\n  \n  // Rota para listar os perfis de usuário disponíveis\n  app.get('/api/roles', requireAuth, (req, res) => {\n    // Lista os valores definidos no enum\n    const roleValues = [\"user\", \"operational\", \"supervisor\", \"admin\", \"manager\"];\n    res.json({ roles: roleValues });\n  });\n  \n  // Endpoint público para listar usuários (restrito corretamente)\n  app.get('/api/users', requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Supervisores, managers e admins podem ver lista de usuários\n    if (!['supervisor', 'manager', 'admin'].includes(user.role)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    \n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Erro ao buscar usuários:\", error);\n      res.status(500).json({ message: \"Erro ao buscar usuários\" });\n    }\n  });\n\n  // Endpoint para criar usuários (compatibilidade - com validação correta)\n  app.post('/api/users', requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Supervisores, managers e admins podem criar usuários\n    if (!['supervisor', 'manager', 'admin'].includes(user.role)) {\n      return res.status(403).json({ message: \"Acesso negado - permissão insuficiente\" });\n    }\n    \n    try {\n      const { fullName, email, password, role = \"user\", phone = \"\" } = req.body;\n      \n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Este e-mail já está em uso\" });\n      }\n      \n      const hashedPassword = await hashPassword(password);\n      const newUser = await storage.createUser({\n        fullName,\n        email,\n        password: hashedPassword,\n        role,\n        phone,\n\n      });\n      \n      res.status(201).json(newUser);\n    } catch (error) {\n      console.error(\"Erro ao criar usuário:\", error);\n      res.status(500).json({ message: \"Erro ao criar usuário\" });\n    }\n  });\n\n  // Rota para listagem de usuários (transportadores) - admin panel\n  app.get('/api/admin/users', requireAuth, requirePermission('users', 'view'), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      console.log(`[DEBUG] Total de usuários recuperados: ${users.length}`);\n      \n      // Adicionar informações extras para melhorar a visualização no frontend\n      const enhancedUsers = users.map(user => {\n        // Formatar o perfil para exibição\n        const roleLabel = user.isAdmin ? \"Administrador\" : \n                         (user.role === \"operational\" ? \"Operacional\" :\n                          user.role === \"supervisor\" ? \"Supervisor\" :\n                          user.role === \"manager\" ? \"Gerente\" : \"Usuário\");\n        \n        return {\n          ...user,\n          roleLabel\n        };\n      });\n      \n      res.json(enhancedUsers);\n    } catch (error) {\n      console.error(\"Erro ao buscar usuários:\", error);\n      res.status(500).json({ message: \"Erro ao buscar usuários\" });\n    }\n  });\n  \n  // Rota para criação de usuários (transportadores)\n  app.post('/api/admin/users', requireAuth, requirePermission('users', 'create'), async (req, res) => {\n    try {\n      const { fullName, email, password, role = \"user\", phone = \"\" } = req.body;\n      \n      // Verificar se já existe um usuário com este e-mail\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Este e-mail já está em uso\" });\n      }\n      \n      // Criar o usuário\n      const hashedPassword = await hashPassword(password);\n      const newUser = await storage.createUser({\n        fullName,\n        email,\n        password: hashedPassword,\n        phone,\n        role: userRoleEnum.parse(role), // Garantir que o role seja válido\n      });\n      \n      // Remover a senha do objeto retornado\n      const { password: _, ...userWithoutPassword } = newUser;\n      \n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Erro ao criar usuário:\", error);\n      res.status(500).json({ message: \"Erro ao criar usuário\" });\n    }\n  });\n  \n  // Rota para atualização de usuários (transportadores)\n  app.patch('/api/admin/users/:id', requireAuth, requirePermission('users', 'edit'), async (req, res) => {\n    const userId = parseInt(req.params.id);\n    if (isNaN(userId)) {\n      return res.status(400).json({ message: \"ID de usuário inválido\" });\n    }\n    \n    try {\n      // Verificar se o usuário existe\n      const existingUser = await storage.getUser(userId);\n      if (!existingUser) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      const { fullName, email, password, isAdmin, role, phone } = req.body;\n      \n      // Verificar se o e-mail já está em uso por outro usuário\n      if (email !== existingUser.email) {\n        const userWithEmail = await storage.getUserByEmail(email);\n        if (userWithEmail && userWithEmail.id !== userId) {\n          return res.status(400).json({ message: \"Este e-mail já está em uso por outro usuário\" });\n        }\n      }\n      \n      // Preparar os dados para atualização\n      const updateData: any = {\n        fullName,\n        email,\n        phone,\n        isAdmin: !!isAdmin\n      };\n      \n      // Se o perfil for fornecido, atualizar\n      if (role) {\n        try {\n          updateData.role = userRoleEnum.parse(role);\n        } catch (error) {\n          return res.status(400).json({ message: \"Tipo de perfil inválido\" });\n        }\n      }\n      \n      // Se foi fornecida uma nova senha, hash ela\n      if (password) {\n        updateData.password = await hashPassword(password);\n      }\n      \n      // Atualizar o usuário\n      const updatedUser = await storage.updateUser(userId, updateData);\n      \n      // Remover a senha do objeto retornado\n      const { password: _, ...userWithoutPassword } = updatedUser;\n      \n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Erro ao atualizar usuário:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar usuário\" });\n    }\n  });\n  \n  // Rota para exclusão de usuários (transportadores) - APENAS ADMIN\n  app.delete('/api/admin/users/:id', requireAuth, requirePermission('users', 'delete'), async (req, res) => {\n    const userId = parseInt(req.params.id);\n    if (isNaN(userId)) {\n      return res.status(400).json({ message: \"ID de usuário inválido\" });\n    }\n    \n    // Impedir que o administrador exclua a si mesmo\n    if (userId === req.user!.id) {\n      return res.status(400).json({ message: \"Você não pode excluir sua própria conta\" });\n    }\n    \n    try {\n      // Verificar se o usuário existe\n      const existingUser = await storage.getUser(userId);\n      if (!existingUser) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      // Excluir o usuário\n      await storage.deleteUser(userId);\n      \n      res.json({ message: \"Usuário excluído com sucesso\" });\n    } catch (error) {\n      console.error(\"Erro ao excluir usuário:\", error);\n      res.status(500).json({ message: \"Erro ao excluir usuário\" });\n    }\n  });\n\n  // Rotas para transportadores\n  app.get('/api/admin/transporters', requireAuth, requirePermission('transporters', 'view'), async (req, res) => {\n    try {\n      const transporters = await storage.getAllTransporters();\n      res.json(transporters);\n    } catch (error) {\n      console.error(\"Erro ao buscar transportadores:\", error);\n      res.status(500).json({ message: \"Erro ao buscar transportadores\" });\n    }\n  });\n  \n  // Configuração do multer para upload de arquivos do transportador\n  const transporterStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      // Usar o diretório de uploads externo com subpasta para transportadores\n      const transporterUploadDir = path.join(uploadDir, 'transporter');\n      if (!fs.existsSync(transporterUploadDir)) {\n        fs.mkdirSync(transporterUploadDir, { recursive: true });\n      }\n      cb(null, transporterUploadDir);\n    },\n    filename: (req, file, cb) => {\n      // Cria um nome de arquivo único\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      const ext = path.extname(file.originalname);\n      cb(null, file.fieldname + '-' + uniqueSuffix + ext);\n    }\n  });\n  \n  const transporterUpload = multer({ storage: transporterStorage });\n\n  // Endpoint público para criar transportadores (com validação correta)\n  app.post('/api/transporters', requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode criar transportadores (todos exceto 'user')\n    if (user.role === 'user') {\n      return res.status(403).json({ message: \"Acesso negado - usuários transportadores não podem criar novos transportadores\" });\n    }\n    \n    try {\n      // Lógica básica de criação sem upload de arquivo\n      const newTransporter = await storage.createTransporter({\n        name: req.body.name || 'Novo Transportador',\n        documentNumber: req.body.documentNumber || '00000000000000',\n        email: req.body.email || 'teste@exemplo.com',\n        phone: req.body.phone || '(00) 00000-0000',\n        address: req.body.address || 'Endereço teste',\n        userId: user.id\n      });\n      \n      res.status(201).json(newTransporter);\n    } catch (error) {\n      console.error(\"Erro ao criar transportador:\", error);\n      res.status(500).json({ message: \"Erro ao criar transportador\" });\n    }\n  });\n\n  app.post('/api/admin/transporters', requireAuth, transporterUpload.any(), async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar transportadores\n    if (!canManageTransporters(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      // Validar dados do transportador\n      try {\n        const { \n          personType, name, documentNumber, email, phone, \n          tradeName, legalResponsible,\n          birthDate, nationality, idNumber, idIssuer, idState,\n          street, number, complement, district, zipCode, city, state,\n          subsidiaries, \n          contact1Name, contact1Phone, contact2Name, contact2Phone\n        } = req.body;\n        \n        // Verificar se já existe um transportador com este documento\n        const existingTransporter = await storage.getTransporterByDocument(documentNumber);\n        if (existingTransporter) {\n          return res.status(400).json({ message: \"Este CPF/CNPJ já está cadastrado\" });\n        }\n        \n        // Processar arquivos enviados\n        const files = req.files as Express.Multer.File[];\n        const documents: { type: string, url: string, filename: string }[] = [];\n        \n        if (files && files.length > 0) {\n          files.forEach((file) => {\n            const fileType = file.fieldname.replace('document_', '');\n            documents.push({\n              type: fileType,\n              url: `/uploads/transporter/${file.filename}`,\n              filename: file.originalname\n            });\n          });\n        }\n        \n        // Criar transportador com os dados específicos para o tipo (PJ ou PF)\n        const transporterData: any = {\n          personType,\n          name,\n          documentNumber,\n          email,\n          phone,\n          contact1Name: contact1Name || \"\",\n          contact1Phone: contact1Phone || \"\",\n          contact2Name: contact2Name || \"\",\n          contact2Phone: contact2Phone || \"\",\n          documents: JSON.stringify(documents)\n        };\n        \n        // Adicionar campos específicos de PJ\n        if (personType === \"pj\") {\n          transporterData.tradeName = tradeName;\n          transporterData.legalResponsible = legalResponsible;\n          \n          // Adicionar endereço\n          transporterData.street = street;\n          transporterData.number = number;\n          transporterData.complement = complement;\n          transporterData.district = district;\n          transporterData.zipCode = zipCode;\n          transporterData.city = city;\n          transporterData.state = state;\n          \n          // Processar subsidiárias (filiais)\n          if (subsidiaries) {\n            try {\n              const parsedSubsidiaries = JSON.parse(subsidiaries);\n              transporterData.subsidiaries = JSON.stringify(parsedSubsidiaries);\n            } catch (e) {\n              console.error(\"Erro ao processar subsidiárias:\", e);\n              transporterData.subsidiaries = '[]';\n            }\n          } else {\n            transporterData.subsidiaries = '[]';\n          }\n        } \n        // Adicionar campos específicos de PF\n        else if (personType === \"pf\") {\n          transporterData.birthDate = birthDate;\n          transporterData.nationality = nationality;\n          transporterData.idNumber = idNumber;\n          transporterData.idIssuer = idIssuer;\n          transporterData.idState = idState;\n        }\n        \n        const transporter = await storage.createTransporter(transporterData);\n        \n        // Enviar notificação em tempo real via WebSocket\n        broadcastMessage({\n          type: 'LICENSE_UPDATE',\n          data: {\n            type: 'TRANSPORTER_CREATED',\n            transporterId: transporter.id,\n            transporter: transporter\n          }\n        });\n        \n        res.status(201).json(transporter);\n      } catch (error) {\n        console.error(\"Erro ao validar dados do transportador:\", error);\n        return res.status(400).json({ message: \"Dados inválidos: \" + (error as Error).message });\n      }\n    } catch (error) {\n      console.error(\"Erro ao criar transportador:\", error);\n      res.status(500).json({ message: \"Erro ao criar transportador\" });\n    }\n  });\n  \n  app.get('/api/admin/transporters/:id', requireAdmin, async (req, res) => {\n    try {\n      const transporterId = parseInt(req.params.id);\n      \n      const transporter = await storage.getTransporterById(transporterId);\n      if (!transporter) {\n        return res.status(404).json({ message: \"Transportador não encontrado\" });\n      }\n      \n      res.json(transporter);\n    } catch (error) {\n      console.error(\"Erro ao buscar transportador:\", error);\n      res.status(500).json({ message: \"Erro ao buscar transportador\" });\n    }\n  });\n  \n  app.patch('/api/admin/transporters/:id', requireAuth, transporterUpload.any(), async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar transportadores\n    if (!canManageTransporters(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      const transporterId = parseInt(req.params.id);\n      \n      // Verificar se o transportador existe\n      const transporter = await storage.getTransporterById(transporterId);\n      if (!transporter) {\n        return res.status(404).json({ message: \"Transportador não encontrado\" });\n      }\n      \n      // Se está atualizando o documento, verificar se já existe outro transportador com este documento\n      if (req.body.documentNumber && req.body.documentNumber !== transporter.documentNumber) {\n        const existingTransporter = await storage.getTransporterByDocument(req.body.documentNumber);\n        if (existingTransporter && existingTransporter.id !== transporterId) {\n          return res.status(400).json({ message: \"Este CPF/CNPJ já está cadastrado para outro transportador\" });\n        }\n      }\n      \n      // Processar arquivos enviados\n      const files = req.files as Express.Multer.File[];\n      let existingDocuments: { type: string, url: string, filename: string }[] = [];\n      \n      // Tentar carregar documentos existentes\n      try {\n        if (transporter.documents && typeof transporter.documents === 'string' && transporter.documents.trim().length > 0) {\n          existingDocuments = JSON.parse(transporter.documents);\n        }\n      } catch (e) {\n        console.error(\"Erro ao processar documentos existentes:\", e);\n        console.error(\"Conteúdo do campo documents:\", transporter.documents);\n        existingDocuments = []; // Inicializar como array vazio em caso de erro\n      }\n      \n      // Adicionar novos documentos\n      if (files && files.length > 0) {\n        files.forEach((file) => {\n          const fileType = file.fieldname.replace('document_', '');\n          existingDocuments.push({\n            type: fileType,\n            url: `/uploads/transporter/${file.filename}`,\n            filename: file.originalname\n          });\n        });\n      }\n      \n      // Preparar dados para atualização\n      const transporterData: any = {\n        ...req.body,\n        documents: JSON.stringify(existingDocuments)\n      };\n      \n      // Processar subsidiárias se for PJ\n      if (transporterData.personType === \"pj\" && transporterData.subsidiaries) {\n        try {\n          if (typeof transporterData.subsidiaries === 'string' && transporterData.subsidiaries.trim().length > 0) {\n            const parsedSubsidiaries = JSON.parse(transporterData.subsidiaries);\n            transporterData.subsidiaries = JSON.stringify(parsedSubsidiaries);\n          } else {\n            transporterData.subsidiaries = '[]';\n          }\n        } catch (e) {\n          console.error(\"Erro ao processar subsidiárias:\", e);\n          console.error(\"Conteúdo do campo subsidiaries:\", transporterData.subsidiaries);\n          // Manter as subsidiárias existentes se houver erro\n          if (transporter.subsidiaries && typeof transporter.subsidiaries === 'string' && transporter.subsidiaries.trim().length > 0) {\n            transporterData.subsidiaries = transporter.subsidiaries;\n          } else {\n            transporterData.subsidiaries = '[]';\n          }\n        }\n      }\n      \n      // Atualizar transportador\n      const updatedTransporter = await storage.updateTransporter(transporterId, transporterData);\n      \n      // Enviar notificação em tempo real via WebSocket\n      broadcastMessage({\n        type: 'LICENSE_UPDATE',\n        data: {\n          type: 'TRANSPORTER_UPDATED',\n          transporterId: transporterId,\n          transporter: updatedTransporter\n        }\n      });\n      \n      res.json(updatedTransporter);\n    } catch (error) {\n      console.error(\"Erro ao atualizar transportador:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar transportador\" });\n    }\n  });\n  \n  app.delete('/api/admin/transporters/:id', requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar transportadores\n    if (!canManageTransporters(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      const transporterId = parseInt(req.params.id);\n      \n      // Verificar se o transportador existe\n      const transporter = await storage.getTransporterById(transporterId);\n      if (!transporter) {\n        return res.status(404).json({ message: \"Transportador não encontrado\" });\n      }\n      \n      await storage.deleteTransporter(transporterId);\n      \n      // Enviar notificação em tempo real via WebSocket\n      broadcastMessage({\n        type: 'LICENSE_UPDATE',\n        data: {\n          type: 'TRANSPORTER_DELETED',\n          transporterId: transporterId\n        }\n      });\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Erro ao excluir transportador:\", error);\n      res.status(500).json({ message: \"Erro ao excluir transportador\" });\n    }\n  });\n  \n  // Rota para vincular transportador a usuário\n  app.post('/api/admin/transporters/:id/link', requireAdmin, async (req, res) => {\n    try {\n      const transporterId = parseInt(req.params.id);\n      const { userId } = req.body;\n      \n      // Verificar se o transportador existe\n      const transporter = await storage.getTransporterById(transporterId);\n      if (!transporter) {\n        return res.status(404).json({ message: \"Transportador não encontrado\" });\n      }\n      \n      if (userId !== null) {\n        // Verificar se o usuário existe\n        const user = await storage.getUser(userId);\n        if (!user) {\n          return res.status(404).json({ message: \"Usuário não encontrado\" });\n        }\n      }\n      \n      // Vincular transportador ao usuário (ou desvincular se userId for null)\n      const updatedTransporter = await storage.linkTransporterToUser(transporterId, userId);\n      \n      res.json(updatedTransporter);\n    } catch (error) {\n      console.error(\"Erro ao vincular transportador a usuário:\", error);\n      res.status(500).json({ message: \"Erro ao vincular transportador a usuário\" });\n    }\n  });\n\n  // Endpoint para transferir veículos para outro usuário\n  app.post('/api/admin/vehicles/transfer', requireAdmin, async (req, res) => {\n    try {\n      const { vehicleIds, targetUserId } = req.body;\n      \n      if (!vehicleIds || !Array.isArray(vehicleIds) || vehicleIds.length === 0) {\n        return res.status(400).json({ message: \"Lista de veículos é obrigatória\" });\n      }\n      \n      if (!targetUserId) {\n        return res.status(400).json({ message: \"Usuário de destino é obrigatório\" });\n      }\n      \n      // Verificar se o usuário de destino existe\n      const targetUser = await storage.getUser(targetUserId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"Usuário de destino não encontrado\" });\n      }\n      \n      // Transferir veículos um por um\n      const transferredVehicles = [];\n      for (const vehicleId of vehicleIds) {\n        try {\n          const vehicle = await storage.getVehicleById(vehicleId);\n          if (vehicle) {\n            await storage.updateVehicle(vehicleId, { userId: targetUserId });\n            transferredVehicles.push(vehicleId);\n          }\n        } catch (error) {\n          console.error(`Erro ao transferir veículo ${vehicleId}:`, error);\n        }\n      }\n      \n      console.log(`[TRANSFER] ${transferredVehicles.length} veículos transferidos para usuário ${targetUserId}`);\n      \n      res.json({\n        success: true,\n        transferredCount: transferredVehicles.length,\n        transferredVehicles\n      });\n    } catch (error) {\n      console.error(\"Erro ao transferir veículos:\", error);\n      res.status(500).json({ message: \"Erro ao transferir veículos\" });\n    }\n  });\n\n  // Endpoint para listar todos os veículos (admin)\n  app.get('/api/vehicles/all', requireAdmin, async (req, res) => {\n    try {\n      const vehicles = await storage.getAllVehicles();\n      res.json(vehicles);\n    } catch (error) {\n      console.error(\"Erro ao buscar todos os veículos:\", error);\n      res.status(500).json({ message: \"Erro ao buscar veículos\" });\n    }\n  });\n  \n  // Rota para obter usuários não-admin para seleção\n  app.get('/api/admin/non-admin-users', requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getNonAdminUsers();\n      console.log(\"[DEBUG] Usuários não-admin recuperados:\", users.length);\n      \n      // Adicionar informações extras para melhorar a visualização no frontend\n      const enhancedUsers = users.map(user => {\n        // Formatar o perfil para exibição\n        const roleLabel = user.isAdmin ? \"Administrador\" : \n                         (user.role === \"operational\" ? \"Operacional\" :\n                          user.role === \"supervisor\" ? \"Supervisor\" :\n                          user.role === \"manager\" ? \"Gerente\" : \"Usuário\");\n        \n        return {\n          ...user,\n          roleLabel\n        };\n      });\n      \n      res.json(enhancedUsers);\n    } catch (error) {\n      console.error(\"Erro ao buscar usuários:\", error);\n      res.status(500).json({ message: \"Erro ao buscar usuários\" });\n    }\n  });\n\n  // Rota para atualizar o status de uma licença - acessível para Admin, Operacional e Supervisor\napp.patch('/api/admin/licenses/:id/status', requireOperational, upload.single('licenseFile'), async (req, res) => {\n    try {\n      const licenseId = parseInt(req.params.id);\n      const statusData: any = {\n        status: req.body.status as LicenseStatus,\n        comments: req.body.comments,\n      };\n      \n      // Add state if provided (agora é obrigatório)\n      if (req.body.state) {\n        statusData.state = req.body.state;\n      } else {\n        return res.status(400).json({ message: 'É obrigatório informar o estado para atualizar o status' });\n      }\n      \n      // Add aetNumber if provided\n      if (req.body.aetNumber) {\n        statusData.aetNumber = req.body.aetNumber;\n      }\n      \n      // Add validUntil if provided\n      if (req.body.validUntil) {\n        statusData.validUntil = new Date(req.body.validUntil).toISOString();\n      }\n      \n      // Add issuedAt if provided\n      if (req.body.issuedAt) {\n        statusData.issuedAt = new Date(req.body.issuedAt).toISOString();\n        console.log('[Routes] Data de emissão recebida:', req.body.issuedAt);\n        console.log('[Routes] Data de emissão convertida:', statusData.issuedAt);\n      } else {\n        console.log('[Routes] Nenhuma data de emissão recebida');\n      }\n      \n      // Add selectedCnpj if provided\n      console.log('Dados recebidos no body:', req.body);\n      console.log('selectedCnpj no body:', req.body.selectedCnpj);\n      console.log('Todos os campos do body:', Object.keys(req.body));\n      if (req.body.selectedCnpj) {\n        statusData.selectedCnpj = req.body.selectedCnpj;\n        console.log('selectedCnpj adicionado ao statusData:', statusData.selectedCnpj);\n      }\n      \n      // Validate status data\n      try {\n        updateLicenseStatusSchema.parse(statusData);\n      } catch (error: any) {\n        const validationError = fromZodError(error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      // Check if license exists\n      const existingLicense = await storage.getLicenseRequestById(licenseId);\n      if (!existingLicense) {\n        return res.status(404).json({ message: 'Licença não encontrada' });\n      }\n      \n      // Verifica se o estado está incluído na lista de estados da licença\n      if (statusData.state && !existingLicense.states.includes(statusData.state)) {\n        return res.status(400).json({ message: 'Estado não incluído na solicitação da licença' });\n      }\n      \n      // Add file se fornecido\n      let file: Express.Multer.File | undefined = undefined;\n      if (req.file) {\n        file = req.file;\n      }\n      \n      // Obter o status anterior do estado específico\n      const previousStateStatus = existingLicense.stateStatuses?.find(ss => \n        ss.startsWith(`${statusData.state}:`)\n      )?.split(':')?.[1] || 'pending';\n      \n      // Usar updateLicenseStateStatus para garantir que o arquivo e número AET \n      // sejam específicos para o estado selecionado\n      const updatedLicense = await storage.updateLicenseStateStatus({\n        licenseId,\n        state: statusData.state || '',\n        stateStatus: statusData.status,\n        comments: statusData.comments || '',\n        validUntil: statusData.validUntil,\n        issuedAt: statusData.issuedAt,\n        aetNumber: statusData.aetNumber,\n        selectedCnpj: statusData.selectedCnpj,\n        stateFile: file\n      });\n      \n      // Registrar mudança no histórico de status\n      await storage.createStatusHistory({\n        licenseId: updatedLicense.id,\n        state: statusData.state || '',\n        userId: req.user!.id,\n        oldStatus: previousStateStatus,\n        newStatus: statusData.status,\n        comments: statusData.comments || null,\n        createdAt: new Date()\n      });\n      \n      console.log(`Histórico de status criado para licença ${licenseId}, estado ${statusData.state}: ${previousStateStatus} -> ${statusData.status}`);\n      \n      // Se o status foi alterado para 'approved' ou 'released', sincronizar com licencas_emitidas\n      if ((statusData.status === 'approved' || statusData.status === 'released') && statusData.validUntil && statusData.aetNumber && statusData.state) {\n        try {\n          console.log(`[SINCRONIZAÇÃO AUTOMÁTICA] Licença ${licenseId} aprovada para estado ${statusData.state} - iniciando sincronização`);\n          await sincronizarLicencaEmitida(updatedLicense, statusData.state, statusData.aetNumber, statusData.validUntil);\n          console.log(`[SINCRONIZAÇÃO AUTOMÁTICA] Licença ${licenseId} sincronizada com sucesso para tabela licencas_emitidas`);\n        } catch (error) {\n          console.error(`[SINCRONIZAÇÃO AUTOMÁTICA] ERRO ao sincronizar licença ${licenseId}:`, error);\n          // Ainda assim continuar o processo, mas logar o erro crítico\n        }\n      }\n\n      // Enviar notificações WebSocket para atualização de status\n      broadcastLicenseUpdate(updatedLicense.id, 'status_changed', updatedLicense);\n      broadcastDashboardUpdate();\n      broadcastActivityLog({\n        licenseId: updatedLicense.id,\n        state: statusData.state || '',\n        oldStatus: previousStateStatus,\n        newStatus: statusData.status,\n        userId: req.user!.id,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json(updatedLicense);\n    } catch (error) {\n      console.error('Error updating license status:', error);\n      res.status(500).json({ message: 'Erro ao atualizar status da licença' });\n    }\n  });\n  \n  // Endpoint simples para atualizar apenas o CNPJ selecionado\n  app.patch('/api/admin/licenses/:id/selected-cnpj', requireOperational, async (req, res) => {\n    try {\n      const licenseId = parseInt(req.params.id);\n      const { selectedCnpj } = req.body;\n      \n      console.log('Atualizando CNPJ selecionado para licença:', licenseId, 'CNPJ:', selectedCnpj);\n      \n      await db.update(licenseRequests)\n        .set({ selectedCnpj: selectedCnpj || null })\n        .where(eq(licenseRequests.id, licenseId));\n      \n      res.json({ success: true, selectedCnpj });\n    } catch (error) {\n      console.error('Erro ao atualizar CNPJ selecionado:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Endpoint específico para salvar CNPJ por estado\n  app.patch('/api/admin/licenses/:id/state-cnpj', requireOperational, async (req, res) => {\n    try {\n      const licenseId = parseInt(req.params.id);\n      const { state, cnpj } = req.body;\n      \n      console.log('Atualizando CNPJ por estado - Licença:', licenseId, 'Estado:', state, 'CNPJ:', cnpj);\n      \n      // Buscar a licença atual\n      const [license] = await db.select().from(licenseRequests).where(eq(licenseRequests.id, licenseId));\n      if (!license) {\n        return res.status(404).json({ message: 'Licença não encontrada' });\n      }\n      \n      // Atualizar o array de CNPJs por estado\n      let stateCnpjs = [...(license.stateCnpjs || [])];\n      const newStateCnpj = `${state}:${cnpj}`;\n      const existingIndex = stateCnpjs.findIndex(s => s.startsWith(`${state}:`));\n      \n      if (existingIndex >= 0) {\n        stateCnpjs[existingIndex] = newStateCnpj;\n      } else {\n        stateCnpjs.push(newStateCnpj);\n      }\n      \n      console.log('Atualizando stateCnpjs:', stateCnpjs);\n      \n      await db.update(licenseRequests)\n        .set({ \n          stateCnpjs,\n          selectedCnpj: cnpj, // Também atualizar o campo global\n          updatedAt: new Date() \n        })\n        .where(eq(licenseRequests.id, licenseId));\n      \n      res.json({ success: true, state, cnpj, stateCnpjs });\n    } catch (error) {\n      console.error('Erro ao atualizar CNPJ por estado:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Endpoint específico para atualizar o status de um estado específico em uma licença\n  app.patch('/api/admin/licenses/:id/state-status', requireOperational, (req, res, next) => {\n    // Adicionar informações do AET ao request para o sistema de upload\n    req.body.state = req.body.state;\n    req.body.aetNumber = req.body.aetNumber;\n    req.body.validUntil = req.body.validUntil;\n    next();\n  }, upload.single('stateFile'), async (req, res) => {\n    console.log('=== ENDPOINT STATE-STATUS CHAMADO ===');\n    console.log('URL completa:', req.url);\n    console.log('Método:', req.method);\n    console.log('Params:', req.params);\n    console.log('Body completo:', req.body);\n    console.log('issuedAt no body:', req.body.issuedAt);\n    console.log('Tipo do issuedAt:', typeof req.body.issuedAt);\n    try {\n      const licenseId = parseInt(req.params.id);\n      \n      // Validar dados do status do estado\n      console.log('Dados recebidos no endpoint state-status:', req.body);\n      console.log('selectedCnpj recebido:', req.body.selectedCnpj);\n      console.log('stateCnpj recebido:', req.body.stateCnpj);\n      \n      const stateStatusData = {\n        licenseId,\n        state: req.body.state,\n        status: req.body.status,\n        comments: req.body.comments,\n        validUntil: req.body.validUntil,\n        issuedAt: req.body.issuedAt, // Incluir data de emissão\n        aetNumber: req.body.aetNumber, // Incluir número da AET\n        selectedCnpj: req.body.selectedCnpj, // Incluir CNPJ selecionado (global - legado)\n        stateCnpj: req.body.stateCnpj, // Incluir CNPJ específico para este estado\n      };\n      \n      console.log('stateStatusData final:', stateStatusData);\n      console.log('issuedAt no stateStatusData:', stateStatusData.issuedAt);\n      \n      try {\n        updateLicenseStateSchema.parse(stateStatusData);\n      } catch (error: any) {\n        const validationError = fromZodError(error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      // Verificar se a licença existe\n      const existingLicense = await storage.getLicenseRequestById(licenseId);\n      if (!existingLicense) {\n        return res.status(404).json({ message: 'Licença não encontrada' });\n      }\n      \n      // Verificar se o estado está incluído na lista de estados da licença\n      if (!existingLicense.states.includes(stateStatusData.state)) {\n        return res.status(400).json({ message: 'Estado não incluído na solicitação da licença' });\n      }\n\n      // Validação de unicidade e proteção do número AET\n      if (stateStatusData.aetNumber) {\n        console.log(`[VALIDAÇÃO AET] Validando número \"${stateStatusData.aetNumber}\" para estado ${stateStatusData.state}`);\n        \n        // 1. Verificar se já existe o número em outro estado da mesma licença\n        if (existingLicense.stateAETNumbers) {\n          const duplicateInSameLicense = existingLicense.stateAETNumbers.find((entry: string) => {\n            const [state, number] = entry.split(':');\n            return state !== stateStatusData.state && number === stateStatusData.aetNumber;\n          });\n          \n          if (duplicateInSameLicense) {\n            const [duplicateState] = duplicateInSameLicense.split(':');\n            console.log(`[VALIDAÇÃO AET] ❌ Número já usado no estado ${duplicateState} da mesma licença`);\n            return res.status(400).json({ \n              message: `O número \"${stateStatusData.aetNumber}\" já está sendo usado no estado ${duplicateState} desta licença` \n            });\n          }\n        }\n\n        // 2. Verificar se já existe o número em outras licenças (busca global)\n        const allLicenses = await db.select({\n          id: licenseRequests.id,\n          requestNumber: licenseRequests.requestNumber,\n          stateAETNumbers: licenseRequests.stateAETNumbers\n        }).from(licenseRequests)\n        .where(and(\n          ne(licenseRequests.id, licenseId),\n          isNotNull(licenseRequests.stateAETNumbers)\n        ));\n        \n        for (const license of allLicenses) {\n          if (license.stateAETNumbers && Array.isArray(license.stateAETNumbers)) {\n            const duplicate = license.stateAETNumbers.find((entry: string) => {\n              const [, number] = entry.split(':');\n              return number === stateStatusData.aetNumber;\n            });\n            \n            if (duplicate) {\n              console.log(`[VALIDAÇÃO AET] ❌ Número já usado na licença ${license.requestNumber}`);\n              return res.status(400).json({ \n                message: `O número \"${stateStatusData.aetNumber}\" já está sendo usado na licença ${license.requestNumber}` \n              });\n            }\n          }\n        }\n\n        // 3. Verificar se é tentativa de alterar número já tratado (status aprovado/under_review)\n        if (existingLicense.stateAETNumbers) {\n          const existingAetEntry = existingLicense.stateAETNumbers.find((entry: string) => \n            entry.startsWith(`${stateStatusData.state}:`)\n          );\n          \n          if (existingAetEntry) {\n            const [, existingNumber] = existingAetEntry.split(':');\n            \n            // Verificar se o estado já foi tratado (tem status aprovado ou em análise)\n            const currentStateStatus = existingLicense.stateStatuses?.find((status: string) => \n              status.startsWith(`${stateStatusData.state}:`)\n            );\n            \n            if (currentStateStatus) {\n              const [, currentStatus] = currentStateStatus.split(':');\n              const isAlreadyProcessed = ['approved', 'under_review', 'pending_approval'].includes(currentStatus);\n              \n              if (isAlreadyProcessed && existingNumber !== stateStatusData.aetNumber) {\n                console.log(`[VALIDAÇÃO AET] ❌ Tentativa de alterar número já tratado: ${existingNumber} → ${stateStatusData.aetNumber}`);\n                return res.status(400).json({ \n                  message: `Não é possível alterar o número AET \"${existingNumber}\" pois o estado ${stateStatusData.state} já foi tratado` \n                });\n              }\n            }\n          }\n        }\n        \n        console.log(`[VALIDAÇÃO AET] ✅ Número \"${stateStatusData.aetNumber}\" válido para estado ${stateStatusData.state}`);\n      }\n      \n      // Adicionar arquivo se fornecido\n      let file: Express.Multer.File | undefined = undefined;\n      if (req.file) {\n        file = req.file;\n      }\n      \n      // Obter o status anterior do estado específico\n      const previousStateStatus = existingLicense.stateStatuses?.find(ss => \n        ss.startsWith(`${stateStatusData.state}:`)\n      )?.split(':')?.[1] || 'pending';\n      \n      // Atualizar status do estado da licença\n      const updatedLicense = await storage.updateLicenseStateStatus({\n        licenseId: stateStatusData.licenseId,\n        state: stateStatusData.state!,\n        status: stateStatusData.status as LicenseStatus,\n        comments: stateStatusData.comments,\n        validUntil: stateStatusData.validUntil,\n        issuedAt: stateStatusData.issuedAt, // Incluir data de emissão\n        aetNumber: stateStatusData.aetNumber,\n        selectedCnpj: stateStatusData.selectedCnpj,\n        stateCnpj: stateStatusData.selectedCnpj, // Usar selectedCnpj como stateCnpj\n        file,\n      });\n      \n      // Registrar mudança no histórico de status\n      await storage.createStatusHistory({\n        licenseId: updatedLicense.id,\n        state: stateStatusData.state,\n        userId: req.user!.id,\n        oldStatus: previousStateStatus,\n        newStatus: stateStatusData.status,\n        comments: stateStatusData.comments || null,\n        createdAt: new Date()\n      });\n      \n      console.log(`Histórico de status criado para licença ${licenseId}, estado ${stateStatusData.state}: ${previousStateStatus} -> ${stateStatusData.status}`);\n      \n      // Enviar notificação em tempo real via WebSocket\n      broadcastMessage({\n        type: 'STATUS_UPDATE',\n        data: {\n          licenseId: updatedLicense.id,\n          state: stateStatusData.state,\n          status: stateStatusData.status,\n          updatedAt: new Date().toISOString(),\n          license: updatedLicense\n        }\n      });\n      \n      console.log(`Status da licença ${licenseId} para o estado ${stateStatusData.state} atualizado para ${stateStatusData.status}. Notificação enviada.`);\n      \n      res.json(updatedLicense);\n    } catch (error) {\n      console.error('Error updating license state status:', error);\n      res.status(500).json({ message: 'Erro ao atualizar status do estado da licença' });\n    }\n  });\n  \n  // Endpoint de teste para atualizar apenas dimensões de uma licença\n  app.post('/api/test/license-dimensions/:id', requireAdmin, async (req, res) => {\n    try {\n      const licenseId = parseInt(req.params.id);\n      const { width, height, cargoType } = req.body;\n      \n      console.log(`Atualizando licença ${licenseId} com dimensões:`, {\n        width, height, cargoType\n      });\n      \n      // Sanitizar os dados antes de atualizar\n      const updateData = {\n        width: width !== undefined ? Number(width).toString() : null,\n        height: height !== undefined ? Number(height).toString() : null,\n        cargoType: cargoType || null\n      };\n      \n      // Log para diagnóstico\n      console.log('Dados sanitizados para atualização:', JSON.stringify(updateData, null, 2));\n      \n      // Atualizar o banco de dados\n      const results = await db.update(licenseRequests)\n        .set(updateData)\n        .where(eq(licenseRequests.id, licenseId))\n        .returning();\n      \n      if (results.length === 0) {\n        return res.status(404).json({ error: 'Licença não encontrada' });\n      }\n      \n      console.log('Licença atualizada com sucesso:', JSON.stringify(results[0], null, 2));\n      \n      // Buscar a licença diretamente do banco para verificar se a atualização funcionou\n      const dbResults = await db.select()\n        .from(licenseRequests)\n        .where(eq(licenseRequests.id, licenseId));\n      \n      if (dbResults.length === 0) {\n        return res.status(404).json({ error: 'Não foi possível verificar a licença após atualização' });\n      }\n      \n      console.log('Licença verificada após atualização:', JSON.stringify(dbResults[0], null, 2));\n      \n      res.json({\n        updated: results[0],\n        verification: dbResults[0]\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar dimensões da licença:', error);\n      res.status(500).json({ error: String(error) });\n    }\n  });\n  \n  // Endpoint temporário para migrar os dados de aetNumber para stateAETNumbers\n  app.post('/api/admin/migrate-aet-numbers', requireAdmin, async (req, res) => {\n    try {\n      console.log('Iniciando migração de números AET...');\n      \n      // Buscar todas as licenças que têm número AET mas não têm stateAETNumbers\n      const licenses = await db.select().from(licenseRequests)\n        .where(sql`aet_number IS NOT NULL AND \n                   (state_aet_numbers IS NULL OR array_length(state_aet_numbers, 1) IS NULL)`);\n      \n      console.log(`Encontradas ${licenses.length} licenças para migração`);\n      \n      let migratedCount = 0;\n      \n      // Para cada licença, criar um array stateAETNumbers com os estados da licença\n      for (const license of licenses) {\n        if (!license.aetNumber || !license.states || license.states.length === 0) {\n          console.log(`Pulando licença ${license.id}: sem número AET ou estados definidos`);\n          continue;\n        }\n        \n        console.log(`Migrando licença ${license.id} com AET ${license.aetNumber}`);\n        \n        // Criar um array de stateAETNumbers\n        const stateAETNumbers = license.states.map(state => `${state}:${license.aetNumber}`);\n        \n        // Atualizar a licença\n        await db.update(licenseRequests)\n          .set({ stateAETNumbers })\n          .where(eq(licenseRequests.id, license.id));\n        \n        migratedCount++;\n        console.log(`Licença ${license.id} atualizada com stateAETNumbers:`, stateAETNumbers);\n      }\n      \n      res.json({ \n        message: `Migração concluída. ${migratedCount} licenças atualizadas de ${licenses.length} encontradas.` \n      });\n    } catch (error) {\n      console.error('Erro na migração de números AET:', error);\n      res.status(500).json({ message: 'Erro durante migração de números AET' });\n    }\n  });\n\n  // ===== VEHICLE MODELS ROUTES =====\n  // Endpoint público para consultar modelos de veículos (usado nos formulários)\n  app.get(\"/api/vehicle-models\", async (req, res) => {\n    try {\n      const models = await storage.getAllVehicleModels();\n      res.json(models);\n    } catch (error) {\n      console.error(\"Erro ao buscar modelos de veículos:\", error);\n      res.status(500).json({ message: \"Erro ao buscar modelos de veículos\" });\n    }\n  });\n\n  // Listar todos os modelos de veículos (apenas admin)\n  app.get(\"/api/admin/vehicle-models\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar modelos de veículos\n    if (!canManageVehicleModels(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      const models = await storage.getAllVehicleModels();\n      res.json(models);\n    } catch (error) {\n      console.error(\"Erro ao buscar modelos de veículos:\", error);\n      res.status(500).json({ message: \"Erro ao buscar modelos de veículos\" });\n    }\n  });\n\n  // Endpoint público para criar modelos de veículos (com validação correta)\n  app.post(\"/api/vehicle-models\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode criar modelos de veículos (operacional e acima)\n    if (!isAdminUser(user)) {\n      return res.status(403).json({ message: \"Acesso negado - permissão insuficiente\" });\n    }\n    \n    try {\n      const newModel = await storage.createVehicleModel({\n        brand: req.body.brand || 'Marca Teste',\n        model: req.body.model || 'Modelo Teste',\n        vehicleType: req.body.vehicleType || 'truck'\n      });\n      \n      res.status(201).json(newModel);\n    } catch (error) {\n      console.error(\"Erro ao criar modelo de veículo:\", error);\n      res.status(500).json({ message: \"Erro ao criar modelo de veículo\" });\n    }\n  });\n\n  // Criar novo modelo de veículo (apenas admin)\n  app.post(\"/api/admin/vehicle-models\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar modelos de veículos\n    if (!canManageVehicleModels(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      const vehicleModelData = insertVehicleModelSchema.parse(req.body);\n      const newModel = await storage.createVehicleModel(vehicleModelData);\n      res.status(201).json(newModel);\n    } catch (error) {\n      console.error(\"Erro ao criar modelo de veículo:\", error);\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erro ao criar modelo de veículo\" });\n      }\n    }\n  });\n\n  // Atualizar modelo de veículo (apenas admin) - PATCH\n  app.patch(\"/api/admin/vehicle-models/:id\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar modelos de veículos\n    if (!canManageVehicleModels(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      const id = parseInt(req.params.id);\n      const vehicleModelData = insertVehicleModelSchema.parse(req.body);\n      const updatedModel = await storage.updateVehicleModel(id, vehicleModelData);\n      \n      if (!updatedModel) {\n        return res.status(404).json({ message: \"Modelo de veículo não encontrado\" });\n      }\n      \n      res.json(updatedModel);\n    } catch (error) {\n      console.error(\"Erro ao atualizar modelo de veículo:\", error);\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erro ao atualizar modelo de veículo\" });\n      }\n    }\n  });\n\n  // Atualizar modelo de veículo (apenas admin) - PUT (compatibilidade com frontend)\n  app.put(\"/api/admin/vehicle-models/:id\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar modelos de veículos\n    if (!canManageVehicleModels(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      const id = parseInt(req.params.id);\n      const vehicleModelData = insertVehicleModelSchema.parse(req.body);\n      const updatedModel = await storage.updateVehicleModel(id, vehicleModelData);\n      \n      if (!updatedModel) {\n        return res.status(404).json({ message: \"Modelo de veículo não encontrado\" });\n      }\n      \n      res.json(updatedModel);\n    } catch (error) {\n      console.error(\"Erro ao atualizar modelo de veículo:\", error);\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erro ao atualizar modelo de veículo\" });\n      }\n    }\n  });\n\n  // Deletar modelo de veículo (apenas admin)\n  app.delete(\"/api/admin/vehicle-models/:id\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode gerenciar modelos de veículos\n    if (!canManageVehicleModels(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteVehicleModel(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Erro ao deletar modelo de veículo:\", error);\n      res.status(500).json({ message: \"Erro ao deletar modelo de veículo\" });\n    }\n  });\n\n  // ===== MÓDULO FINANCEIRO - BOLETOS =====\n\n  // Função auxiliar para verificar permissões financeiras\n  const canAccessFinancial = (user: any) => {\n    return user.role === \"admin\" || user.role === \"financial\" || user.role === \"manager\";\n  };\n\n  // Configuração do multer para upload de arquivos de boletos\n  const boletoStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      // Usar o diretório de uploads externo com subpasta para boletos\n      const boletoUploadDir = path.join(uploadDir, 'boletos');\n      if (!fs.existsSync(boletoUploadDir)) {\n        fs.mkdirSync(boletoUploadDir, { recursive: true });\n      }\n      cb(null, boletoUploadDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      const ext = path.extname(file.originalname);\n      cb(null, file.fieldname + '-' + uniqueSuffix + ext);\n    }\n  });\n\n  const boletoFileFilter = (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n    // Aceitar apenas PDFs para boletos\n    if (file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  };\n\n  const boletoUpload = multer({ \n    storage: boletoStorage,\n    fileFilter: boletoFileFilter,\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB max file size\n    }\n  });\n\n  // Rota de upload específica para boletos (chamada pelo frontend)\n  app.post(\"/api/upload/boleto\", requireAuth, boletoUpload.single('file'), async (req, res) => {\n    const user = req.user!;\n    \n    if (!canAccessFinancial(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"Nenhum arquivo enviado\" });\n      }\n\n      const fileUrl = `/uploads/boletos/${req.file.filename}`;\n      \n      res.json({ \n        success: true, \n        url: fileUrl,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size\n      });\n    } catch (error) {\n      console.error(\"Erro no upload do boleto:\", error);\n      res.status(500).json({ message: \"Erro ao fazer upload do arquivo\" });\n    }\n  });\n\n  // Endpoint para transportadores acessarem seus próprios boletos (admin pode ver todos)\n  app.get(\"/api/meus-boletos\", requireAuth, async (req, res) => {\n    const user = req.user!;\n\n    try {\n      // Admin, financial e manager podem ver todos os boletos\n      if (user.role === 'admin' || user.role === 'financial' || user.role === 'manager') {\n        const boletos = await storage.getAllBoletos();\n        \n        // Força refresh removendo cache\n        res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n        res.set('Pragma', 'no-cache');\n        res.set('Expires', '0');\n        \n        return res.json(boletos);\n      }\n      \n      // Para transportadores, buscar apenas seus boletos\n      const transporters = await storage.getAllTransporters();\n      const userTransporter = transporters.find(t => t.userId === user.id);\n      \n      if (!userTransporter) {\n        return res.status(404).json({ message: \"Transportador não encontrado para este usuário\" });\n      }\n\n      // Buscar boletos do transportador\n      const boletos = await storage.getBoletosByTransportadorId(userTransporter.id);\n      \n      // Força refresh removendo cache\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      \n      res.json(boletos);\n    } catch (error) {\n      console.error(\"Erro ao buscar boletos do usuário:\", error);\n      res.status(500).json({ message: \"Erro ao buscar seus boletos\" });\n    }\n  });\n\n  // Listar todos os boletos (supervisor, manager, admin, financial) com filtros\n  app.get(\"/api/boletos\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode acessar boletos\n    if (!['supervisor', 'financial', 'manager', 'admin'].includes(user.role)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n\n    try {\n      const { status, vencimento } = req.query;\n      let boletos = await storage.getAllBoletos();\n      \n      // Aplicar filtros\n      if (status && status !== 'todos') {\n        boletos = boletos.filter(boleto => boleto.status === status);\n      }\n      \n      if (vencimento) {\n        const hoje = new Date();\n        const seteDias = new Date(hoje.getTime() + 7 * 24 * 60 * 60 * 1000);\n        \n        switch (vencimento) {\n          case 'vencidos':\n            boletos = boletos.filter(boleto => \n              boleto.dataVencimento && new Date(boleto.dataVencimento) < hoje\n            );\n            break;\n          case 'vencendo':\n            boletos = boletos.filter(boleto => \n              boleto.dataVencimento && \n              new Date(boleto.dataVencimento) >= hoje && \n              new Date(boleto.dataVencimento) <= seteDias\n            );\n            break;\n          case 'futuros':\n            boletos = boletos.filter(boleto => \n              boleto.dataVencimento && new Date(boleto.dataVencimento) > seteDias\n            );\n            break;\n        }\n      }\n      \n      // Força refresh removendo cache\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      \n      res.json(boletos);\n    } catch (error) {\n      console.error(\"Erro ao buscar boletos:\", error);\n      res.status(500).json({ message: \"Erro ao buscar boletos\" });\n    }\n  });\n\n  // Buscar boleto por ID (apenas admin e financial)\n  app.get(\"/api/boletos/:id\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    if (!canAccessFinancial(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n\n    try {\n      const id = parseInt(req.params.id);\n      const boleto = await storage.getBoletoById(id);\n      \n      if (!boleto) {\n        return res.status(404).json({ message: \"Boleto não encontrado\" });\n      }\n      \n      res.json(boleto);\n    } catch (error) {\n      console.error(\"Erro ao buscar boleto:\", error);\n      res.status(500).json({ message: \"Erro ao buscar boleto\" });\n    }\n  });\n\n  // Buscar boletos por transportador (apenas admin e financial)\n  app.get(\"/api/transportadores/:id/boletos\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    if (!canAccessFinancial(user)) {\n      return res.status(403).json({ message: \"Acesso negado\" });\n    }\n\n    try {\n      const transportadorId = parseInt(req.params.id);\n      const boletos = await storage.getBoletosByTransportadorId(transportadorId);\n      res.json(boletos);\n    } catch (error) {\n      console.error(\"Erro ao buscar boletos do transportador:\", error);\n      res.status(500).json({ message: \"Erro ao buscar boletos do transportador\" });\n    }\n  });\n\n  // Criar novo boleto (apenas admin e financial)\n  app.post(\"/api/boletos\", requireAuth, async (req, res) => {\n    const user = req.user!;\n    \n    // Verificar se o usuário pode criar boletos\n    if (!['supervisor', 'financial', 'manager', 'admin'].includes(user.role)) {\n      return res.status(403).json({ message: \"Acesso negado - permissão insuficiente\" });\n    }\n\n    try {\n      // Os uploads já foram feitos separadamente via /api/upload/boleto\n      // Aqui recebemos apenas os dados do formulário incluindo as URLs dos arquivos\n      const validatedData = insertBoletoSchema.parse(req.body);\n      const boleto = await storage.createBoleto(validatedData);\n      \n      res.status(201).json(boleto);\n    } catch (error) {\n      console.error(\"Erro ao criar boleto:\", error);\n      if (error instanceof ZodError) {\n        res.status(400).json({ \n          message: \"Dados inválidos\", \n          errors: fromZodError(error).message \n        });\n      } else {\n        res.status(500).json({ message: \"Erro ao criar boleto\" });\n      }\n    }\n  });\n\n  // Atualizar boleto (apenas admin e financial)\n  app.put(\"/api/boletos/:id\", requireAuth, requirePermission('financial', 'edit'), async (req, res) => {\n\n    try {\n      const id = parseInt(req.params.id);\n      // Os uploads já foram feitos separadamente via /api/upload/boleto\n      // Aqui recebemos apenas os dados do formulário incluindo as URLs dos arquivos\n      const boleto = await storage.updateBoleto(id, req.body);\n      res.json(boleto);\n    } catch (error) {\n      console.error(\"Erro ao atualizar boleto:\", error);\n      if (error instanceof ZodError) {\n        res.status(400).json({ \n          message: \"Dados inválidos\", \n          errors: fromZodError(error).message \n        });\n      } else {\n        res.status(500).json({ message: \"Erro ao atualizar boleto\" });\n      }\n    }\n  });\n\n  // Deletar boleto (apenas admin e financial com DELETE específico)\n  app.delete(\"/api/boletos/:id\", requireAuth, requirePermission('financial', 'delete'), async (req, res) => {\n\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteBoleto(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Erro ao deletar boleto:\", error);\n      res.status(500).json({ message: \"Erro ao deletar boleto\" });\n    }\n  });\n\n  // ==========================================\n  // ENDPOINTS OTIMIZADOS PARA GRANDES VOLUMES DE DADOS\n  // ==========================================\n  \n  // Busca otimizada de veículos com paginação e filtros\n  app.get('/api/vehicles/search', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const {\n        search = '',\n        page = '1',\n        limit = '20',\n        type = '',\n        sortBy = 'created_at',\n        sortOrder = 'desc'\n      } = req.query;\n      \n      const pageNum = Math.max(1, parseInt(page as string));\n      const limitNum = Math.min(25, Math.max(5, parseInt(limit as string))); // Otimizado: máximo 25 por página para melhor performance\n      const offset = (pageNum - 1) * limitNum;\n      \n      console.log(`[SEARCH VEHICLES] Busca: \"${search}\", Página: ${pageNum}, Limite: ${limitNum}, Tipo: \"${type}\"`);\n      \n      // Construir consulta otimizada com índices\n      let baseQuery = sql`\n        SELECT v.*, u.email as user_email, u.full_name as user_name,\n               COUNT(*) OVER() as total_count\n        FROM vehicles v\n        LEFT JOIN users u ON v.user_id = u.id\n      `;\n      \n      const conditions = [];\n      const params = [];\n      \n      // Filtro por usuário (apenas próprios veículos se não for admin)\n      if (!isAdministrativeRole(user.role as UserRole)) {\n        conditions.push(sql`v.user_id = ${user.id}`);\n      }\n      \n      // Filtro por tipo de veículo\n      if (type) {\n        conditions.push(sql`v.type = ${type.toString()}`);\n      }\n      \n      // Filtro de busca otimizado com índices\n      if (search) {\n        const searchTerm = `%${search.toString().toUpperCase()}%`;\n        conditions.push(sql`(\n          UPPER(v.plate) LIKE ${searchTerm} OR \n          UPPER(v.brand) LIKE ${searchTerm} OR \n          UPPER(v.model) LIKE ${searchTerm}\n        )`);\n      }\n      \n      // Construir WHERE clause\n      if (conditions.length > 0) {\n        baseQuery = sql`${baseQuery} WHERE ${sql.join(conditions, sql` AND `)}`;\n      }\n      \n      // Ordenação segura com colunas que existem na tabela vehicles\n      const validSortFields = ['plate', 'brand', 'model', 'type', 'year', 'id'];\n      const sortField = validSortFields.includes(sortBy as string) ? sortBy as string : 'plate';\n      const order = sortOrder === 'asc' ? sql`ASC` : sql`DESC`;\n      \n      baseQuery = sql`${baseQuery} ORDER BY v.${sql.identifier(sortField)} ${order}`;\n      \n      // Paginação\n      baseQuery = sql`${baseQuery} LIMIT ${limitNum} OFFSET ${offset}`;\n      \n      const result = await db.execute(baseQuery);\n      const totalCount = result.rows.length > 0 ? parseInt(result.rows[0].total_count as string) : 0;\n      \n      res.json({\n        vehicles: result.rows,\n        pagination: {\n          page: pageNum,\n          limit: limitNum,\n          total: totalCount,\n          totalPages: Math.ceil(totalCount / limitNum),\n          hasNext: pageNum * limitNum < totalCount,\n          hasPrev: pageNum > 1\n        }\n      });\n    } catch (error) {\n      console.error('[SEARCH VEHICLES] Erro:', error);\n      res.status(500).json({ message: 'Erro na busca de veículos' });\n    }\n  });\n\n  \n  // Busca global otimizada com limites por tipo\n  app.get('/api/search/global', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const { q: searchTerm = '', limit = '10' } = req.query;\n      \n      if (!searchTerm || searchTerm.toString().length < 2) {\n        return res.json({ results: [] });\n      }\n      \n      const maxResults = Math.min(20, Math.max(5, parseInt(limit as string)));\n      const pattern = `%${searchTerm.toString().toUpperCase()}%`;\n      \n      console.log(`[GLOBAL SEARCH] Termo: \"${searchTerm}\", Limite: ${maxResults}`);\n      \n      // Busca otimizada em paralelo com índices\n      const promises = [];\n      \n      // 1. Busca de veículos (limitada por permissão)\n      let vehicleQuery = sql`\n        SELECT 'vehicle' as type, v.id, v.plate as title, \n               CONCAT(COALESCE(v.brand, ''), ' ', COALESCE(v.model, '')) as subtitle,\n               NULL as transporter_name\n        FROM vehicles v\n        WHERE UPPER(v.plate) LIKE ${pattern}\n      `;\n      \n      if (!isAdministrativeRole(user.role as UserRole)) {\n        vehicleQuery = sql`${vehicleQuery} AND v.user_id = ${user.id}`;\n      }\n      \n      vehicleQuery = sql`${vehicleQuery} ORDER BY v.plate LIMIT ${Math.floor(maxResults / 3)}`;\n      promises.push(db.execute(vehicleQuery));\n      \n      // 2. Busca de transportadores (limitada por permissão)\n      let transporterQuery = sql`\n        SELECT 'transporter' as type, t.id, t.name as title, \n               t.document_number as subtitle, t.name as transporter_name\n        FROM transporters t\n        WHERE UPPER(t.name) LIKE ${pattern} OR t.document_number LIKE ${pattern.replace('%', '').replace('%', '')}\n      `;\n      \n      if (!isAdministrativeRole(user.role as UserRole)) {\n        transporterQuery = sql`${transporterQuery} AND t.user_id = ${user.id}`;\n      }\n      \n      transporterQuery = sql`${transporterQuery} ORDER BY t.name LIMIT ${Math.floor(maxResults / 3)}`;\n      promises.push(db.execute(transporterQuery));\n      \n      // 3. Busca de licenças\n      let licenseQuery = sql`\n        SELECT 'license' as type, l.id, l.request_number as title, \n               l.status as subtitle, t.name as transporter_name\n        FROM license_requests l\n        LEFT JOIN transporters t ON l.transporter_id = t.id\n        WHERE l.request_number LIKE ${pattern} OR UPPER(l.main_vehicle_plate) LIKE ${pattern}\n      `;\n      \n      if (!isAdministrativeRole(user.role as UserRole)) {\n        licenseQuery = sql`${licenseQuery} AND l.user_id = ${user.id}`;\n      }\n      \n      licenseQuery = sql`${licenseQuery} ORDER BY l.created_at DESC LIMIT ${Math.floor(maxResults / 3)}`;\n      promises.push(db.execute(licenseQuery));\n      \n      const [vehicleResults, transporterResults, licenseResults] = await Promise.all(promises);\n      \n      const results = [\n        ...vehicleResults.rows,\n        ...transporterResults.rows,\n        ...licenseResults.rows\n      ].slice(0, maxResults);\n      \n      res.json({ results });\n    } catch (error) {\n      console.error('[GLOBAL SEARCH] Erro:', error);\n      res.status(500).json({ message: 'Erro na busca global' });\n    }\n  });\n  \n  // Busca otimizada de veículos por tipo específico para formulários de licença\n  app.get('/api/vehicles/by-type/:type', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const { type } = req.params;\n      const {\n        search = '',\n        limit = '50'\n      } = req.query;\n      \n      const maxResults = Math.min(100, Math.max(10, parseInt(limit as string)));\n      \n      console.log(`[VEHICLE BY TYPE] Tipo: ${type}, Busca: \"${search}\", Limite: ${maxResults}`);\n      \n      // Query otimizada para busca por tipo de veículo (sem JOIN desnecessário)\n      let vehicleQuery = sql`\n        SELECT v.id, v.plate, v.brand, v.model, v.year, v.tare::text, \n               v.axle_count, v.status\n        FROM vehicles v\n        WHERE v.type = ${type} AND v.status = 'active'\n      `;\n      \n      // Filtro por usuário se não for admin\n      if (!isAdministrativeRole(user.role as UserRole)) {\n        vehicleQuery = sql`${vehicleQuery} AND v.user_id = ${user.id}`;\n      }\n      \n      // Filtro de busca por placa\n      if (search) {\n        const searchPattern = `%${search.toString().toUpperCase()}%`;\n        vehicleQuery = sql`${vehicleQuery} AND UPPER(v.plate) LIKE ${searchPattern}`;\n      }\n      \n      vehicleQuery = sql`${vehicleQuery} \n        ORDER BY v.plate \n        LIMIT ${maxResults}`;\n      \n      const result = await db.execute(vehicleQuery);\n      \n      res.json({\n        vehicles: result.rows,\n        count: result.rows.length\n      });\n    } catch (error) {\n      console.error('[VEHICLE BY TYPE] Erro:', error);\n      res.status(500).json({ message: 'Erro na busca de veículos por tipo' });\n    }\n  });\n  \n  // Busca rápida de veículos por placa (para autocomplete) - ULTRA OTIMIZADA\n  app.get('/api/vehicles/search-plate', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const { q: searchTerm = '', type = '' } = req.query;\n      \n      const searchTermString = typeof searchTerm === 'string' ? searchTerm : String(searchTerm);\n      \n      if (!searchTerm || searchTermString.length < 2) {\n        return res.json({ vehicles: [] });\n      }\n      \n      const searchPattern = `%${searchTerm.toString().toUpperCase()}%`;\n      const typeFilter = type ? type.toString() : '';\n      \n      // Cache key única para cada busca\n      const cacheKey = `vehicle-search:${user.id}:${searchTerm}:${typeFilter}:${user.role}`;\n      \n      // Verificar cache primeiro\n      const cached = appCache.get(cacheKey);\n      if (cached) {\n        console.log(`[PLATE SEARCH CACHE HIT] Termo: \"${searchTerm}\", Tipo: \"${typeFilter}\"`);\n        return res.json(cached);\n      }\n      \n      console.log(`[PLATE SEARCH CACHE MISS] Termo: \"${searchTerm}\", Tipo: \"${typeFilter}\"`);\n      \n      // Consulta ULTRA otimizada para 50K+ registros com trigram\n      let vehicleQuery;\n      \n      // Para buscas curtas (2-3 chars), usar trigram que é mais rápido em volumes grandes\n      if (searchTermString.length <= 3) {\n        vehicleQuery = sql`\n          SELECT v.id, v.plate, v.brand, v.model, v.type, v.tare::text,\n                 v.axle_count, v.status,\n                 similarity(v.plate, ${searchTerm.toString().toUpperCase()}) as sim\n          FROM vehicles v\n          WHERE v.status = 'active' \n            AND v.plate % ${searchTermString.toUpperCase()}\n        `;\n      } else {\n        // Para buscas longas, usar índice UPPER otimizado\n        vehicleQuery = sql`\n          SELECT v.id, v.plate, v.brand, v.model, v.type, v.tare::text,\n                 v.axle_count, v.status, 1.0 as sim\n          FROM vehicles v\n          WHERE v.status = 'active' \n            AND UPPER(v.plate) LIKE ${searchPattern}\n        `;\n      }\n      \n      // Filtro por tipo (aplicado cedo para usar índice combinado)\n      if (typeFilter) {\n        vehicleQuery = sql`${vehicleQuery} AND v.type = ${typeFilter}`;\n      }\n      \n      // Filtro por usuário se não for admin\n      if (!isAdministrativeRole(user.role as UserRole)) {\n        vehicleQuery = sql`${vehicleQuery} AND v.user_id = ${user.id}`;\n      }\n      \n      // Ordenação otimizada para grandes volumes\n      if (searchTermString.length <= 3) {\n        vehicleQuery = sql`${vehicleQuery} \n          ORDER BY sim DESC, v.plate\n          LIMIT 12`;\n      } else {\n        vehicleQuery = sql`${vehicleQuery} \n          ORDER BY \n            CASE WHEN UPPER(v.plate) = ${searchTerm.toString().toUpperCase()} THEN 1 ELSE 2 END,\n            v.plate\n          LIMIT 12`;\n      }\n      \n      const startTime = Date.now();\n      const result = await db.execute(vehicleQuery);\n      const queryTime = Date.now() - startTime;\n      \n      console.log(`[PLATE SEARCH] Consulta executada em ${queryTime}ms - ${result.rows.length} resultados`);\n      \n      const response = { vehicles: result.rows };\n      \n      // Cache agressivo para volumes grandes: 2 minutos\n      appCache.set(cacheKey, response, 2);\n      \n      res.json(response);\n    } catch (error) {\n      console.error('[PLATE SEARCH] Erro:', error);\n      res.status(500).json({ message: 'Erro na busca de placas' });\n    }\n  });\n  \n  // Busca de unidades tratoras otimizada com cache\n  app.get('/api/vehicles/tractor-units', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const { search = '', limit = '50' } = req.query;\n      \n      const maxResults = Math.min(50, parseInt(limit as string)); // Reduzido para performance\n      const searchTerm = search.toString().toUpperCase();\n      \n      // Cache key para tractors\n      const cacheKey = `tractor-units:${user.id}:${searchTerm}:${user.role}`;\n      \n      // Verificar cache\n      const cached = appCache.get(cacheKey);\n      if (cached) {\n        console.log(`[TRACTOR CACHE HIT] Termo: \"${searchTerm}\"`);\n        return res.json(cached);\n      }\n      \n      console.log(`[TRACTOR CACHE MISS] Termo: \"${searchTerm}\"`);\n      \n      // Query especializada para tractors em volumes extremos\n      let query;\n      \n      if (searchTerm && searchTerm.length <= 3) {\n        // Usar trigram para buscas curtas em volumes grandes\n        query = sql`\n          SELECT v.id, v.plate, v.brand, v.model, v.year, v.tare::text,\n                 similarity(v.plate, ${searchTerm}) as sim\n          FROM vehicles v\n          WHERE v.type = 'tractor_unit' AND v.status = 'active'\n            AND v.plate % ${searchTerm}\n        `;\n      } else {\n        // Query tradicional otimizada\n        query = sql`\n          SELECT v.id, v.plate, v.brand, v.model, v.year, v.tare::text\n          FROM vehicles v\n          WHERE v.type = 'tractor_unit' AND v.status = 'active'\n        `;\n        \n        if (searchTerm) {\n          const searchPattern = `%${searchTerm}%`;\n          query = sql`${query} AND UPPER(v.plate) LIKE ${searchPattern}`;\n        }\n      }\n      \n      // Filtro de usuário\n      if (!isAdministrativeRole(user.role as UserRole)) {\n        query = sql`${query} AND v.user_id = ${user.id}`;\n      }\n      \n      // Ordenação e limite\n      if (searchTerm && searchTerm.length <= 3) {\n        query = sql`${query} ORDER BY sim DESC, v.plate LIMIT ${Math.min(25, maxResults)}`;\n      } else {\n        query = sql`${query} ORDER BY v.plate LIMIT ${Math.min(25, maxResults)}`;\n      }\n      \n      const startTime = Date.now();\n      const result = await db.execute(query);\n      const queryTime = Date.now() - startTime;\n      \n      console.log(`[TRACTOR UNITS] Consulta executada em ${queryTime}ms - ${result.rows.length} resultados`);\n      \n      const response = { vehicles: result.rows };\n      \n      // Cache por 1 minuto\n      appCache.set(cacheKey, response, 1);\n      \n      res.json(response);\n    } catch (error) {\n      console.error('[TRACTOR UNITS] Erro:', error);\n      res.status(500).json({ message: 'Erro na busca de unidades tratoras' });\n    }\n  });\n  \n  // Busca de semirreboques otimizada  \n  app.get('/api/vehicles/semi-trailers', requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const { search = '', limit = '50' } = req.query;\n      \n      const maxResults = Math.min(100, parseInt(limit as string));\n      \n      let query = sql`\n        SELECT v.id, v.plate, v.brand, v.model, v.year, v.tare,\n               t.name as transporter_name\n        FROM vehicles v\n        LEFT JOIN transporters t ON v.transporter_id = t.id\n        WHERE v.type = 'semi_trailer' AND v.status = 'active'\n      `;\n      \n      if (!isAdministrativeRole(user.role as UserRole)) {\n        query = sql`${query} AND v.user_id = ${user.id}`;\n      }\n      \n      if (search) {\n        const searchPattern = `%${search.toString().toUpperCase()}%`;\n        query = sql`${query} AND UPPER(v.plate) LIKE ${searchPattern}`;\n      }\n      \n      query = sql`${query} ORDER BY v.plate LIMIT ${maxResults}`;\n      \n      const result = await db.execute(query);\n      res.json({ vehicles: result.rows });\n    } catch (error) {\n      console.error('[SEMI TRAILERS] Erro:', error);\n      res.status(500).json({ message: 'Erro na busca de semirreboques' });\n    }\n  });\n\n  // Servir arquivos de upload da pasta externa\n  app.use('/uploads', express.static(uploadDir));\n  \n  // Log da configuração final de uploads\n  console.log(`[UPLOAD] Servindo arquivos de ${uploadDir} em /uploads`);\n\n  // ==========================================\n  // OBJECT STORAGE PARA IMAGENS\n  // ==========================================\n  \n  // Rota para servir arquivos públicos\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const { ObjectStorageService } = await import('./objectStorage');\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Rota para upload de objetos\n  app.post(\"/api/objects/upload\", requireAuth, async (req, res) => {\n    try {\n      const { ObjectStorageService } = await import('./objectStorage');\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Rota para servir objetos privados\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const { ObjectStorageService } = await import('./objectStorage');\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      res.status(404).json({ error: \"Object not found\" });\n    }\n  });\n\n  // ==========================================\n  // GESTÃO DE TIPOS DE CONJUNTO (ADMIN)\n  // ==========================================\n  \n  // Listar todos os tipos de conjunto (com cache)\n  app.get('/api/admin/vehicle-set-types', requireAuth, async (req, res) => {\n    try {\n      // Cache simples em memória por 5 minutos\n      const cacheKey = 'vehicle_set_types_cache';\n      const cacheTime = 5 * 60 * 1000; // 5 minutos\n      \n      // Forçar atualização se o cache existir mas for solicitado refresh\n      const forceRefresh = req.query.refresh === 'true';\n      \n      if (!forceRefresh && (global as any)[cacheKey] && (global as any)[`${cacheKey}_time`] > Date.now() - cacheTime) {\n        console.log('[VEHICLE SET TYPES] Retornando dados do cache');\n        return res.json((global as any)[cacheKey]);\n      }\n      \n      const { DEFAULT_VEHICLE_SET_TYPES } = await import('../shared/vehicle-set-types');\n      const { vehicleSetTypes } = await import('../shared/schema');\n      const { eq } = await import('drizzle-orm');\n      \n      // Buscar tipos personalizados do banco de dados\n      const customTypes = await db.select().from(vehicleSetTypes).where(eq(vehicleSetTypes.isActive, true));\n      \n      // Combinar tipos padrão com tipos personalizados\n      const allTypes = [\n        ...DEFAULT_VEHICLE_SET_TYPES,\n        ...customTypes.map(type => ({\n          ...type,\n          axleConfiguration: type.axleConfiguration as any,\n          dimensionLimits: type.dimensionLimits as any,\n          vehicleTypes: type.vehicleTypes as any,\n          createdAt: new Date(type.createdAt),\n          updatedAt: new Date(type.updatedAt),\n        }))\n      ];\n      \n      // Armazenar no cache\n      (global as any)[cacheKey] = allTypes;\n      (global as any)[`${cacheKey}_time`] = Date.now();\n      \n      console.log(`[VEHICLE SET TYPES] Retornando ${allTypes.length} tipos (${DEFAULT_VEHICLE_SET_TYPES.length} padrão + ${customTypes.length} personalizados)`);\n      console.log(`[VEHICLE SET TYPES] Tipos personalizados no banco:`, customTypes.map(t => ({name: t.name, label: t.label, isActive: t.isActive})));\n      res.json(allTypes);\n    } catch (error) {\n      console.error('[VEHICLE SET TYPES] Erro ao buscar tipos:', error);\n      res.status(500).json({ message: 'Erro ao buscar tipos de conjunto' });\n    }\n  });\n\n  // Criar novo tipo de conjunto\n  app.post('/api/admin/vehicle-set-types', requireAuth, async (req, res) => {\n    try {\n      console.log('[VEHICLE SET TYPES] Recebendo dados para criação:', req.body);\n      \n      // Validar se é um usuário admin\n      const user = req.user as any;\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Acesso negado. Apenas administradores podem criar tipos de conjunto.' });\n      }\n      \n      const { vehicleSetTypes } = await import('../shared/schema');\n      const { randomUUID } = await import('crypto');\n      const { eq } = await import('drizzle-orm');\n      \n      // Gerar ID único\n      const newId = randomUUID();\n      \n      // Calcular total de eixos automaticamente\n      const totalAxles = (req.body.axleConfiguration.tractorAxles || 0) + \n                        (req.body.axleConfiguration.firstTrailerAxles || 0) + \n                        (req.body.axleConfiguration.secondTrailerAxles || 0);\n      \n      const vehicleSetTypeData = {\n        id: newId,\n        name: req.body.name,\n        label: req.body.label,\n        description: req.body.description || null,\n        axleConfiguration: {\n          ...req.body.axleConfiguration,\n          totalAxles\n        },\n        dimensionLimits: req.body.dimensionLimits,\n        vehicleTypes: req.body.vehicleTypes,\n        iconPath: req.body.iconPath || null,\n        imageUrl: req.body.imageUrl || null,\n        isActive: req.body.isActive !== false, // Default true\n      };\n      \n      // Inserir no banco de dados\n      const [newType] = await db.insert(vehicleSetTypes)\n        .values(vehicleSetTypeData)\n        .returning();\n      \n      // Limpar cache GLOBAL forçadamente\n      (global as any)['vehicle_set_types_cache'] = null;\n      (global as any)['vehicle_set_types_cache_time'] = null;\n      delete (global as any)['vehicle_set_types_cache'];\n      delete (global as any)['vehicle_set_types_cache_time'];\n      \n      console.log('[VEHICLE SET TYPES] Cache limpo e tipo criado com sucesso:', newType.id);\n      \n      res.json({ \n        success: true, \n        message: 'Tipo de conjunto criado com sucesso',\n        data: newType \n      });\n    } catch (error) {\n      console.error('[VEHICLE SET TYPES] Erro ao criar tipo:', error);\n      res.status(500).json({ message: 'Erro ao criar tipo de conjunto' });\n    }\n  });\n\n  // Atualizar tipo de conjunto\n  app.put('/api/admin/vehicle-set-types/:id', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Acesso negado. Apenas administradores podem atualizar tipos de conjunto.' });\n      }\n      \n      const { vehicleSetTypes } = await import('../shared/schema');\n      const { eq } = await import('drizzle-orm');\n      const typeId = req.params.id;\n      \n      // Calcular total de eixos automaticamente\n      const totalAxles = (req.body.axleConfiguration.tractorAxles || 0) + \n                        (req.body.axleConfiguration.firstTrailerAxles || 0) + \n                        (req.body.axleConfiguration.secondTrailerAxles || 0);\n      \n      const updateData = {\n        name: req.body.name,\n        label: req.body.label,\n        description: req.body.description || null,\n        axleConfiguration: {\n          ...req.body.axleConfiguration,\n          totalAxles\n        },\n        dimensionLimits: req.body.dimensionLimits,\n        vehicleTypes: req.body.vehicleTypes,\n        iconPath: req.body.iconPath || null,\n        imageUrl: req.body.imageUrl || null,\n        isActive: req.body.isActive !== false,\n        updatedAt: new Date(),\n      };\n      \n      // Atualizar no banco de dados\n      const [updatedType] = await db.update(vehicleSetTypes)\n        .set(updateData)\n        .where(eq(vehicleSetTypes.id, typeId))\n        .returning();\n      \n      if (!updatedType) {\n        return res.status(404).json({ message: 'Tipo de conjunto não encontrado' });\n      }\n      \n      // Limpar cache GLOBAL forçadamente  \n      (global as any)['vehicle_set_types_cache'] = null;\n      (global as any)['vehicle_set_types_cache_time'] = null;\n      delete (global as any)['vehicle_set_types_cache'];\n      delete (global as any)['vehicle_set_types_cache_time'];\n      \n      console.log('[VEHICLE SET TYPES] Cache limpo e tipo atualizado com sucesso:', typeId);\n      \n      res.json({ \n        success: true, \n        message: 'Tipo de conjunto atualizado com sucesso',\n        data: updatedType \n      });\n    } catch (error) {\n      console.error('[VEHICLE SET TYPES] Erro ao atualizar tipo:', error);\n      res.status(500).json({ message: 'Erro ao atualizar tipo de conjunto' });\n    }\n  });\n\n  // Deletar tipo de conjunto\n  app.delete('/api/admin/vehicle-set-types/:id', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Acesso negado. Apenas administradores podem deletar tipos de conjunto.' });\n      }\n      \n      const { vehicleSetTypes } = await import('../shared/schema');\n      const { eq } = await import('drizzle-orm');\n      const typeId = req.params.id;\n      \n      // Verificar se o tipo existe\n      const existingType = await db.select().from(vehicleSetTypes).where(eq(vehicleSetTypes.id, typeId)).limit(1);\n      if (existingType.length === 0) {\n        return res.status(404).json({ message: 'Tipo de conjunto não encontrado' });\n      }\n      \n      // Deletar do banco de dados\n      await db.delete(vehicleSetTypes).where(eq(vehicleSetTypes.id, typeId));\n      \n      // Limpar cache\n      delete (global as any)['vehicle_set_types_cache'];\n      delete (global as any)['vehicle_set_types_cache_time'];\n      \n      console.log('[VEHICLE SET TYPES] Tipo deletado com sucesso:', typeId);\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error('[VEHICLE SET TYPES] Erro ao deletar tipo:', error);\n      res.status(500).json({ message: 'Erro ao deletar tipo de conjunto' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":275650},"client/src/components/ui/paginated-vehicle-selector.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Vehicle } from \"@shared/schema\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, ChevronDown, Search, Plus, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface PaginatedVehicleSelectorProps {\n  value?: number;\n  onSelect: (vehicleId: number | undefined, plate?: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  allowManualEntry?: boolean;\n  className?: string;\n  label?: string;\n  onCreateNew?: () => void;\n  vehicleType?: 'tractor_unit' | 'trailer' | 'semi_trailer' | 'dolly' | 'truck' | 'flatbed';\n  axleFilter?: number; // NOVO: Filtrar por número específico de eixos\n}\n\ninterface VehicleSearchResponse {\n  vehicles: Vehicle[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\nconst PAGE_SIZE = 10;\n\nexport function PaginatedVehicleSelector({\n  value,\n  onSelect,\n  placeholder = \"Digite a placa ou selecione...\",\n  disabled = false,\n  allowManualEntry = false,\n  className,\n  label,\n  onCreateNew,\n  vehicleType,\n  axleFilter,\n}: PaginatedVehicleSelectorProps) {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [highlightedIndex, setHighlightedIndex] = useState(-1);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [allVehicles, setAllVehicles] = useState<Vehicle[]>([]);\n  \n  const inputRef = useRef<HTMLInputElement>(null);\n  const listRef = useRef<HTMLUListElement>(null);\n  // Usar debounce hook como o transportador\n  const debouncedSearchTerm = useDebounce(inputValue, 300);\n\n  // Query para buscar veículos com paginação\n  const { data: vehicleData, isLoading, error } = useQuery<VehicleSearchResponse>({\n    queryKey: ['/api/vehicles/search-paginated', debouncedSearchTerm, currentPage, vehicleType, axleFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        search: debouncedSearchTerm,\n        page: currentPage.toString(),\n        limit: PAGE_SIZE.toString(),\n        ...(vehicleType && { type: vehicleType }),\n        ...(axleFilter && { axles: axleFilter.toString() }) // NOVO: Filtro de eixos\n      });\n      \n      console.log(`[PAGINATED VEHICLE] Buscando veículos - tipo: ${vehicleType}, busca: \"${debouncedSearchTerm}\", página: ${currentPage}`);\n      console.log(`[PAGINATED VEHICLE] URL completa: /api/vehicles/search?${params.toString()}`);\n      \n      const res = await fetch(`/api/vehicles/search-paginated?${params}`, {\n        credentials: \"include\"\n      });\n      \n      if (!res.ok) {\n        console.error(`[PAGINATED VEHICLE] Erro na requisição: ${res.status} ${res.statusText}`);\n        throw new Error(\"Erro ao buscar veículos\");\n      }\n      \n      const data = await res.json();\n      console.log(`[PAGINATED VEHICLE] Recebidos ${data.vehicles?.length || 0} veículos, hasNext: ${data.pagination?.hasNext}`);\n      console.log(`[PAGINATED VEHICLE] Total no servidor: ${data.pagination?.total}, página atual: ${data.pagination?.page}`);\n      \n      return data;\n    },\n    enabled: isOpen,\n    staleTime: 5 * 60 * 1000, // 5 minutos (otimizado)\n    gcTime: 10 * 60 * 1000, // 10 minutos (otimizado)\n  });\n\n  // Buscar veículo selecionado por ID\n  const { data: selectedVehicle } = useQuery<Vehicle>({\n    queryKey: ['/api/vehicles', value],\n    queryFn: async () => {\n      const res = await fetch(`/api/vehicles/${value}`, {\n        credentials: \"include\"\n      });\n      \n      if (!res.ok) {\n        throw new Error(\"Erro ao buscar veículo\");\n      }\n      \n      return res.json();\n    },\n    enabled: !!value && !allVehicles.find(v => v.id === value),\n    staleTime: 5 * 60 * 1000,\n  });\n\n  // Atualizar lista de veículos quando nova página carrega\n  useEffect(() => {\n    if (!vehicleData?.vehicles) return;\n    \n    console.log(`[PAGINATED VEHICLE] Página ${currentPage} recebeu ${vehicleData.vehicles.length} veículos`);\n    \n    if (currentPage === 1) {\n      setAllVehicles(vehicleData.vehicles);\n    } else {\n      setAllVehicles(prev => {\n        // Otimização: Limitar o número total de veículos em memória para evitar problemas de performance\n        const newVehicles = [...prev, ...vehicleData.vehicles];\n        return newVehicles.length > 1000 ? newVehicles.slice(-1000) : newVehicles;\n      });\n    }\n  }, [vehicleData?.vehicles, currentPage]);\n\n  // Sincronizar input apenas quando veículo é selecionado (não durante digitação)\n  useEffect(() => {\n    if (selectedVehicle && !isOpen) {\n      setInputValue(selectedVehicle.plate);\n    }\n  }, [selectedVehicle, isOpen]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value.toUpperCase();\n    setInputValue(newValue);\n    if (!isOpen) {\n      setIsOpen(true);\n    }\n    setHighlightedIndex(-1);\n    \n    // Limpar seleção se o input foi limpo\n    if (!newValue && value) {\n      onSelect(undefined);\n    }\n\n    // Se permitir entrada manual e não há veículo correspondente\n    if (allowManualEntry && newValue.length >= 3) {\n      const exactMatch = allVehicles.find(v => v.plate === newValue);\n      if (!exactMatch) {\n        onSelect(undefined, newValue);\n      }\n    }\n  };\n\n  const handleVehicleSelect = (vehicle: Vehicle) => {\n    onSelect(vehicle.id);\n    setInputValue(vehicle.plate);\n    setIsOpen(false);\n    setHighlightedIndex(-1);\n  };\n\n  const handleLoadMore = () => {\n    if (vehicleData?.pagination?.hasNext && !isLoading) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!isOpen) {\n      if (e.key === \"ArrowDown\" || e.key === \"Enter\") {\n        setIsOpen(true);\n        // Abrir dropdown automaticamente\n        return;\n      }\n      return;\n    }\n\n    switch (e.key) {\n      case \"ArrowDown\":\n        e.preventDefault();\n        setHighlightedIndex(prev => \n          prev < allVehicles.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case \"ArrowUp\":\n        e.preventDefault();\n        setHighlightedIndex(prev => prev > 0 ? prev - 1 : -1);\n        break;\n      case \"Enter\":\n        e.preventDefault();\n        if (highlightedIndex >= 0 && highlightedIndex < allVehicles.length) {\n          handleVehicleSelect(allVehicles[highlightedIndex]);\n        } else if (allVehicles.length === 1) {\n          handleVehicleSelect(allVehicles[0]);\n        }\n        break;\n      case \"Escape\":\n        setIsOpen(false);\n        setHighlightedIndex(-1);\n        break;\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent) => {\n    // Se o foco está indo para um elemento dentro do dropdown, não fechar\n    const relatedTarget = e.relatedTarget as HTMLElement;\n    if (relatedTarget && relatedTarget.closest('.paginated-dropdown-content')) {\n      return;\n    }\n    \n    setTimeout(() => {\n      setIsOpen(false);\n      setHighlightedIndex(-1);\n    }, 300);\n  };\n\n  // Função handleFocus não é mais necessária\n\n  // Scroll para item destacado\n  useEffect(() => {\n    if (highlightedIndex >= 0 && listRef.current) {\n      const highlightedElement = listRef.current.children[highlightedIndex] as HTMLElement;\n      if (highlightedElement) {\n        highlightedElement.scrollIntoView({\n          block: 'nearest',\n        });\n      }\n    }\n  }, [highlightedIndex]);\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {label && (\n        <label className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mb-2 block\">\n          {label}\n        </label>\n      )}\n      \n      <div className=\"relative\">\n        <Input\n          ref={inputRef}\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onBlur={handleBlur}\n          onFocus={() => setIsOpen(true)}\n          placeholder={placeholder}\n          disabled={disabled}\n          className={cn(\n            \"pr-10\",\n            error && \"border-red-500\"\n          )}\n        />\n        \n        <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n          {isLoading ? (\n            <Loader2 className=\"h-4 w-4 animate-spin text-gray-400\" />\n          ) : (\n            <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n          )}\n        </div>\n      </div>\n\n      {isOpen && (\n        <div \n          className=\"absolute z-[9999] w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-hidden\"\n          onMouseDown={(e) => e.preventDefault()} // Previne que o clique feche o dropdown\n          style={{ zIndex: 9999 }}\n        >\n          {isLoading && currentPage === 1 ? (\n            <div className=\"p-2 space-y-2\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-10 w-full\" />\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"p-4 text-center text-red-600\">\n              <p>Erro ao carregar veículos</p>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => window.location.reload()}\n                className=\"mt-2\"\n              >\n                Tentar novamente\n              </Button>\n            </div>\n          ) : !vehicleData && allVehicles.length === 0 ? (\n            <div className=\"p-4 text-center text-gray-500\">\n              <Search className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>Nenhuma placa encontrada</p>\n              <div className=\"text-xs mt-2 text-gray-400\">\n                Debug: allVehicles={allVehicles.length}, busca=\"{debouncedSearchTerm}\"\n              </div>\n              {onCreateNew && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={onCreateNew}\n                  className=\"mt-2\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Cadastrar novo veículo\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"flex flex-col max-h-60\">\n              <ul ref={listRef} className=\"overflow-y-auto flex-1\">\n                {allVehicles.map((vehicle, index) => (\n                  <li\n                    key={vehicle.id}\n                    onClick={() => handleVehicleSelect(vehicle)}\n                    className={cn(\n                      \"px-4 py-2 cursor-pointer hover:bg-gray-50 border-b border-gray-100 last:border-b-0\",\n                      highlightedIndex === index && \"bg-blue-50\",\n                      value === vehicle.id && \"bg-blue-100 font-medium\"\n                    )}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-gray-900\">\n                          {vehicle.plate}\n                        </div>\n                        {(vehicle.brand || vehicle.model) && (\n                          <div className=\"text-sm text-gray-500\">\n                            {[vehicle.brand, vehicle.model].filter(Boolean).join(' ')}\n                          </div>\n                        )}\n                      </div>\n                      {value === vehicle.id && (\n                        <Check className=\"h-4 w-4 text-blue-600\" />\n                      )}\n                    </div>\n                  </li>\n                ))}\n              </ul>\n              \n              {vehicleData?.pagination?.hasNext && (\n                <div className=\"p-2 border-t bg-gray-50\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleLoadMore}\n                    disabled={isLoading}\n                    className=\"w-full text-xs\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"h-3 w-3 mr-2 animate-spin\" />\n                        Carregando...\n                      </>\n                    ) : (\n                      <>\n                        Carregar mais ({vehicleData.pagination.total - allVehicles.length} restantes)\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12647},"client/src/components/licenses/license-form.tsx":{"content":"import React, { useEffect, useState, useRef, useMemo, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DimensionField } from \"./dimension-field\";\nimport {\n  insertLicenseRequestSchema,\n  insertDraftLicenseSchema,\n  brazilianStates,\n  licenseTypeEnum,\n  Vehicle,\n  LicenseRequest,\n  Transporter,\n  insertVehicleSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { CampoPlacaAdicional } from \"./placas-adicionais\";\nimport { VehicleSelectCard } from \"./vehicle-select-card\";\nimport {\n  LoaderCircle,\n  X,\n  Plus,\n  Truck,\n  Search,\n  Upload,\n  Building2,\n  Link as LinkIcon,\n  FileUp,\n  Check,\n  Shield,\n  Info,\n} from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport { useOnClickOutside } from \"@/hooks/use-on-click-outside\";\nimport { VehicleTypeImage } from \"@/components/ui/vehicle-type-image\";\nimport { PaginatedVehicleSelector } from \"@/components/ui/paginated-vehicle-selector\";\nimport { IntelligentVehicleSelector } from \"@/components/ui/intelligent-vehicle-selector\";\nimport { OptimizedTransporterSelector } from \"@/components/forms/optimized-transporter-selector\";\nimport { \n  validateCompleteComposition, \n  getAxleSpecificationSummary,\n  validateVehicleForPosition,\n  getLicenseTypeLabel,\n  AXLE_CONFIGURATIONS \n} from \"@/utils/vehicle-axle-validation\";\nimport { VehicleSetType } from \"@shared/vehicle-set-types\";\n\n\n\n// Tipos de carga por categoria\nconst NON_FLATBED_CARGO_TYPES = [\n  { value: \"dry_cargo\", label: \"Carga Seca\" },\n  { value: \"liquid_cargo\", label: \"Líquida\" },\n  { value: \"live_cargo\", label: \"Viva\" },\n  { value: \"sugar_cane\", label: \"Cana de Açúcar\" },\n];\n\nconst FLATBED_CARGO_TYPES = [\n  { value: \"indivisible_cargo\", label: \"Carga Indivisível\" },\n  { value: \"agricultural_machinery\", label: \"Máquinas Agrícolas\" },\n  { value: \"oversized\", label: \"SUPERDIMENSIONADA\" },\n];\n\n// Limites dimensionais\nconst DIMENSION_LIMITS = {\n  default: {\n    maxLength: 30.0,\n    minLength: 19.8,\n    maxWidth: 2.6,\n    maxHeight: 4.4,\n  },\n  flatbed: {\n    maxLength: 25.0,\n    minLength: 0,\n    maxWidth: 3.2,\n    maxHeight: 4.95,\n  },\n  agricultural_machinery: {\n    maxLength: 25.0,\n    minLength: 0,\n    maxWidth: 3.2,\n    maxHeight: 4.95,\n  },\n  oversized: {\n    // Sem limites pré-definidos\n    maxLength: 999.99,\n    minLength: 0,\n    maxWidth: 999.99,\n    maxHeight: 999.99,\n  },\n};\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface LicenseFormProps {\n  draft?: LicenseRequest | null;\n  onComplete: () => void;\n  onCancel: () => void;\n  preSelectedTransporterId?: number | null;\n}\n\nexport function LicenseForm({\n  draft,\n  onComplete,\n  onCancel,\n  preSelectedTransporterId,\n}: LicenseFormProps) {\n  const { toast } = useToast();\n  const [licenseType, setLicenseType] = useState<string>(draft?.type || \"\");\n  const [cargoType, setCargoType] = useState<string>(\"\");\n  const [showVehicleDialog, setShowVehicleDialog] = useState(false);\n  const [showRequiredFieldsWarning, setShowRequiredFieldsWarning] =\n    useState(false);\n  const [showThirdPartyConfirmation, setShowThirdPartyConfirmation] = useState(false);\n  const [pendingVehicleSelection, setPendingVehicleSelection] = useState<{\n    vehicleId: number;\n    fieldName: string;\n  } | null>(null);\n  \n  // Estados para confirmação de envio com veículos de terceiros\n  const [showSubmitConfirmation, setShowSubmitConfirmation] = useState(false);\n  const [pendingSubmitData, setPendingSubmitData] = useState<any>(null);\n  const [thirdPartyVehiclesInSubmit, setThirdPartyVehiclesInSubmit] = useState<string[]>([]);\n  \n  // Estados para validação de licenças\n  const [validatingState, setValidatingState] = useState<string | null>(null);\n  const [blockedStates, setBlockedStates] = useState<Record<string, any>>({});\n  const [stateValidationStatus, setStateValidationStatus] = useState<Record<string, 'loading' | 'valid' | 'blocked' | 'error'>>({});\n  const [preventiveValidationRunning, setPreventiveValidationRunning] = useState(false);\n\n  // Fetch vehicles for the dropdown selectors\n  const { data: vehicles, isLoading: isLoadingVehicles } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/vehicles\"],\n  });\n\n  // Fetch transporters linked to the user\n  const { data: transporters = [], isLoading: isLoadingTransporters } =\n    useQuery<Transporter[]>({\n      queryKey: [\"/api/user/transporters\"],\n    });\n\n  // Fetch vehicle set types (includes custom types)\n  const { data: vehicleSetTypes = [], isLoading: isLoadingVehicleSetTypes } = useQuery<VehicleSetType[]>({\n    queryKey: ['/api/admin/vehicle-set-types'],\n    staleTime: 2 * 60 * 1000, // 2 minutos de cache\n    refetchOnWindowFocus: true,\n  });\n\n  // Define basic vehicle lists\n  const tractorUnits = vehicles?.filter((v) => v.type === \"tractor_unit\") || [];\n  const trucks = vehicles?.filter((v) => v.type === \"truck\") || [];\n  const allSemiTrailers = vehicles?.filter((v) => v.type === \"semi_trailer\") || [];\n  const trailers = vehicles?.filter((v) => v.type === \"trailer\") || [];\n  const allDollys = vehicles?.filter((v) => v.type === \"dolly\") || [];\n  const flatbeds = vehicles?.filter((v) => v.type === \"flatbed\") || [];\n\n  // ✅ NOVA FUNÇÃO: Validação por combinação específica\n  const validateState = async (estado: string): Promise<boolean> => {\n    console.log(`[STATE VALIDATION] Iniciando validação para ${estado}, validating: ${validatingState}`);\n    \n    if (validatingState) {\n      console.log(`[STATE VALIDATION] Já validando ${validatingState} - ignorando ${estado}`);\n      return false;\n    }\n    \n    // Coletar placas do formulário\n    const watchedValues = form.watch();\n    \n    // ✅ NOVA LÓGICA: Verificar se temos combinação completa (Cavalo + Carreta1 + Carreta2)\n    let composicao = null;\n    \n    // Placa do cavalo/trator\n    let cavalo = null;\n    if (watchedValues.tractorUnitId) {\n      const tractor = vehicles?.find(v => v.id === watchedValues.tractorUnitId);\n      if (tractor?.plate) cavalo = tractor.plate;\n    } else if (watchedValues.mainVehiclePlate) {\n      cavalo = watchedValues.mainVehiclePlate;\n    }\n    \n    // Primeira carreta\n    let carreta1 = null;\n    if (watchedValues.firstTrailerId) {\n      const first = vehicles?.find(v => v.id === watchedValues.firstTrailerId);\n      if (first?.plate) carreta1 = first.plate;\n    }\n    \n    // Segunda carreta\n    let carreta2 = null;\n    if (watchedValues.secondTrailerId) {\n      const second = vehicles?.find(v => v.id === watchedValues.secondTrailerId);\n      if (second?.plate) carreta2 = second.plate;\n    }\n    \n    // Se temos combinação completa, usar validação específica\n    if (cavalo && carreta1 && carreta2) {\n      composicao = { cavalo, carreta1, carreta2 };\n      console.log(`[STATE VALIDATION] ✅ COMBINAÇÃO COMPLETA para ${estado}:`, composicao);\n    } else {\n      console.log(`[STATE VALIDATION] ⚠️ Combinação incompleta para ${estado} - usando validação tradicional`);\n      console.log(`[STATE VALIDATION] Cavalo: ${cavalo}, Carreta1: ${carreta1}, Carreta2: ${carreta2}`);\n      \n      // Fallback para validação tradicional por placas individuais\n      const placas = [];\n      if (cavalo) placas.push(cavalo);\n      if (carreta1) placas.push(carreta1);\n      if (carreta2) placas.push(carreta2);\n      \n      // Adicionar outras placas\n      if (watchedValues.dollyId) {\n        const dolly = vehicles?.find(v => v.id === watchedValues.dollyId);\n        if (dolly?.plate) placas.push(dolly.plate);\n      }\n      \n      if (watchedValues.flatbedId) {\n        const flatbed = vehicles?.find(v => v.id === watchedValues.flatbedId);\n        if (flatbed?.plate) placas.push(flatbed.plate);\n      }\n      \n      if (watchedValues.additionalPlates) {\n        watchedValues.additionalPlates.forEach((plate: string) => {\n          if (plate) placas.push(plate);\n        });\n      }\n      \n      if (placas.length === 0) {\n        console.log(`[STATE VALIDATION] Nenhuma placa - liberando ${estado}`);\n        return false;\n      }\n    }\n    \n    setValidatingState(estado);\n    \n    try {\n      // Escolher endpoint correto baseado no tipo de validação\n      const endpoint = composicao ? '/api/licencas-vigentes-by-combination' : '/api/validacao-critica';\n      const requestBody = composicao \n        ? { estado, composicao }\n        : { estado, placas: [cavalo, carreta1, carreta2].filter(Boolean) };\n      \n      console.log(`[STATE VALIDATION] Usando endpoint ${endpoint} para ${estado}`);\n      console.log(`[STATE VALIDATION] Request body:`, requestBody);\n      \n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(requestBody)\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      const result = await response.json();\n      console.log(`[STATE VALIDATION] Resultado para ${estado}:`, result);\n      \n      if (result.bloqueado && result.diasRestantes > 60) {\n        console.log(`[STATE VALIDATION] ${estado} BLOQUEADO - ${result.diasRestantes} dias > 60`);\n        if (composicao) {\n          console.log(`[STATE VALIDATION] 🚫 COMBINAÇÃO IDÊNTICA BLOQUEADA:`, result.composicao_encontrada);\n        }\n        \n        setBlockedStates(prev => ({ ...prev, [estado]: result }));\n        \n        // Remover estado da seleção se foi bloqueado\n        const currentStates = form.getValues().states || [];\n        if (currentStates.includes(estado)) {\n          console.log(`[STATE VALIDATION] Removendo ${estado} da seleção pois foi bloqueado`);\n          form.setValue('states', currentStates.filter(s => s !== estado));\n        }\n        \n        const message = composicao \n          ? `Combinação idêntica (${composicao.cavalo} + ${composicao.carreta1} + ${composicao.carreta2}) já possui licença vigente com ${result.diasRestantes} dias restantes.`\n          : `Já existe licença vigente (${result.numero_licenca || result.numero}) com ${result.diasRestantes} dias restantes.`;\n        \n        toast({\n          title: `Estado ${estado} bloqueado`,\n          description: message + \" Renovação permitida apenas com ≤60 dias.\",\n          variant: \"destructive\",\n          duration: 8000,\n        });\n        \n        return true; // bloqueado\n      }\n      \n      console.log(`[STATE VALIDATION] ${estado} LIBERADO`);\n      if (composicao && result.tipo_liberacao) {\n        console.log(`[STATE VALIDATION] ✅ Motivo: ${result.tipo_liberacao}`);\n      }\n      \n      // Limpar dos bloqueados se estava bloqueado antes\n      setBlockedStates(prev => {\n        const updated = { ...prev };\n        delete updated[estado];\n        return updated;\n      });\n      \n      return false; // liberado\n    } catch (error) {\n      console.error(`[STATE VALIDATION] Erro ao validar ${estado}:`, error);\n      return false; // em caso de erro, liberar\n    } finally {\n      setValidatingState(null);\n    }\n  };\n\n  // Define a schema that can be validated partially (for drafts)\n  const formSchema = draft?.isDraft\n    ? insertDraftLicenseSchema\n    : insertLicenseRequestSchema;\n\n  // Usar o transportador pré-selecionado quando disponível\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: draft\n      ? {\n          type: draft.type,\n          transporterId: draft.transporterId || undefined,\n          mainVehiclePlate: draft.mainVehiclePlate,\n          tractorUnitId: draft.tractorUnitId || undefined,\n          firstTrailerId: draft.firstTrailerId || undefined,\n          dollyId: draft.dollyId || undefined,\n          secondTrailerId: draft.secondTrailerId || undefined,\n          flatbedId: draft.flatbedId || undefined,\n          length: draft.length / 100, // Convert from cm to meters for display\n          width: draft.width ? draft.width / 100 : undefined, // Convert from cm to meters for display\n          height: draft.height ? draft.height / 100 : undefined, // Convert from cm to meters for display\n          additionalPlates: draft.additionalPlates || [],\n          additionalPlatesDocuments: draft.additionalPlatesDocuments || [],\n          states: draft.states,\n          isDraft: draft.isDraft,\n          comments: draft.comments || undefined,\n          cargoType: draft.cargoType || undefined, // Preservar o tipo de carga do rascunho\n        }\n      : {\n          type: \"\",\n          transporterId: preSelectedTransporterId || undefined, // Usar o transportador pré-selecionado\n          mainVehiclePlate: \"\",\n          tractorUnitId: undefined,\n          firstTrailerId: undefined,\n          dollyId: undefined,\n          secondTrailerId: undefined,\n          flatbedId: undefined,\n          length: undefined, // Valor não preenchido inicialmente\n          width: undefined, // Sem valor padrão inicialmente\n          height: undefined, // Sem valor padrão inicialmente\n          additionalPlates: [],\n          states: [],\n          additionalPlatesDocuments: [],\n          isDraft: true,\n          comments: \"\",\n          cargoType: undefined, // Adicionado para support ao tipo de carga\n        },\n  });\n\n  // Efeito para mostrar notificação quando tiver transportador pré-selecionado\n  useEffect(() => {\n    if (preSelectedTransporterId && transporters && transporters.length > 0) {\n      const selectedTransporter = transporters.find(\n        (t) => t.id === preSelectedTransporterId,\n      );\n      if (selectedTransporter) {\n        toast({\n          title: \"Transportador selecionado\",\n          description: `Usando ${selectedTransporter.name} como transportador para esta solicitação`,\n        });\n      }\n    }\n  }, [preSelectedTransporterId, transporters, toast]);\n\n  // Função para coletar todas as placas do formulário atual\n  const getFormPlates = () => {\n    const placas = [];\n    const watchedValues = form.watch();\n    \n    // Placa principal\n    if (watchedValues.mainVehiclePlate) {\n      placas.push(watchedValues.mainVehiclePlate);\n    }\n    \n    // Placas dos veículos selecionados\n    if (watchedValues.tractorUnitId) {\n      const tractor = vehicles?.find(v => v.id === watchedValues.tractorUnitId);\n      if (tractor?.plate) placas.push(tractor.plate);\n    }\n    \n    if (watchedValues.firstTrailerId) {\n      const first = vehicles?.find(v => v.id === watchedValues.firstTrailerId);\n      if (first?.plate) placas.push(first.plate);\n    }\n    \n    if (watchedValues.secondTrailerId) {\n      const second = vehicles?.find(v => v.id === watchedValues.secondTrailerId);\n      if (second?.plate) placas.push(second.plate);\n    }\n    \n    if (watchedValues.dollyId) {\n      const dolly = vehicles?.find(v => v.id === watchedValues.dollyId);\n      if (dolly?.plate) placas.push(dolly.plate);\n    }\n    \n    if (watchedValues.flatbedId) {\n      const flatbed = vehicles?.find(v => v.id === watchedValues.flatbedId);\n      if (flatbed?.plate) placas.push(flatbed.plate);\n    }\n    \n    // Placas adicionais\n    if (watchedValues.additionalPlates) {\n      watchedValues.additionalPlates.forEach((plate: string) => {\n        if (plate) placas.push(plate);\n      });\n    }\n    \n    return placas;\n  };\n\n  // ✅ BOTÃO MANUAL PARA VALIDAÇÃO PREVENTIVA (resolve o loop)\n  const validateAllStatesManual = async () => {\n    if (preventiveValidationRunning) return;\n    \n    const watchedValues = form.watch();\n    \n    // Verificar se temos combinação completa\n    const cavalo = watchedValues.tractorUnitId ? \n      vehicles?.find(v => v.id === watchedValues.tractorUnitId)?.plate || watchedValues.mainVehiclePlate :\n      watchedValues.mainVehiclePlate;\n    const carreta1 = watchedValues.firstTrailerId ? \n      vehicles?.find(v => v.id === watchedValues.firstTrailerId)?.plate : null;\n    const carreta2 = watchedValues.secondTrailerId ? \n      vehicles?.find(v => v.id === watchedValues.secondTrailerId)?.plate : null;\n    const dolly = watchedValues.dollyId ? \n      vehicles?.find(v => v.id === watchedValues.dollyId)?.plate : null;\n    \n    // Se não temos pelo menos cavalo + carreta1\n    if (!cavalo || !carreta1) {\n      toast({\n        title: \"Combinação incompleta\",\n        description: \"Selecione pelo menos Cavalo + Carreta 1 para validar estados\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    // Determinar tipo de composição\n    const isSimples = !carreta2 && !dolly;\n    const isBitrem = carreta2 && !dolly;\n    const isRodotrem = dolly && carreta2;\n    const isDollyOnly = dolly && !carreta2;\n    \n    // Aceitar qualquer configuração válida\n    if (!isSimples && !isBitrem && !isRodotrem && !isDollyOnly) {\n      toast({\n        title: \"Composição inválida\",\n        description: \"Configuração de veículos não reconhecida\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const tipoComposicao = isSimples ? \"SIMPLES\" : isBitrem ? \"BITREM\" : isRodotrem ? \"RODOTREM\" : \"DOLLY\";\n    console.log(`[MANUAL] Tipo de composição: ${tipoComposicao}`);\n    \n    console.log('[MANUAL] ✅ INICIANDO validação manual para combinação:', { cavalo, carreta1, carreta2, dolly });\n    \n    setPreventiveValidationRunning(true);\n    \n    // Marcar todos como carregando\n    const loadingStatus: Record<string, 'loading'> = {};\n    brazilianStates.forEach(state => {\n      loadingStatus[state.code] = 'loading';\n    });\n    setStateValidationStatus(loadingStatus);\n    \n    // Validar cada estado\n    const newStatus: Record<string, 'valid' | 'blocked' | 'error'> = {};\n    const newBlockedStates: Record<string, any> = {};\n    \n    for (const state of brazilianStates) {\n      try {\n        const response = await fetch('/api/licencas-vigentes-by-combination', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ estado: state.code, composicao: { cavalo, carreta1, carreta2, dolly } })\n        });\n        \n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}`);\n        }\n        \n        const result = await response.json();\n        \n        if (result.bloqueado && result.diasRestantes > 60) {\n          newStatus[state.code] = 'blocked';\n          newBlockedStates[state.code] = result;\n          console.log(`[MANUAL] ${state.code} bloqueado - ${result.diasRestantes} dias`);\n        } else {\n          newStatus[state.code] = 'valid';\n        }\n      } catch (error) {\n        newStatus[state.code] = 'error';\n        console.log(`[MANUAL] ${state.code} erro na validação:`, error);\n      }\n    }\n    \n    setStateValidationStatus(newStatus);\n    setBlockedStates(newBlockedStates);\n    setPreventiveValidationRunning(false);\n    \n    console.log('[MANUAL] ✅ Validação manual concluída');\n    \n    const blockedCount = Object.values(newStatus).filter(s => s === 'blocked').length;\n    const validCount = Object.values(newStatus).filter(s => s === 'valid').length;\n    \n    toast({\n      title: \"Validação concluída\",\n      description: `${validCount} estados disponíveis, ${blockedCount} bloqueados`\n    });\n  };\n  \n  // ✅ VALIDAÇÃO AUTOMÁTICA INTELIGENTE: Monitora mudanças nos veículos sem loops\n  const [lastValidatedCombination, setLastValidatedCombination] = useState<string>(\"\");\n  \n  // Função para obter combinação atual dos veículos\n  const getCurrentCombination = () => {\n    if (!vehicles || vehicles.length === 0) return { cavalo: \"\", carreta1: \"\", carreta2: \"\", dolly: \"\" };\n    \n    const tractorId = form.watch(\"tractorUnitId\");\n    const firstTrailerId = form.watch(\"firstTrailerId\");\n    const secondTrailerId = form.watch(\"secondTrailerId\");\n    const dollyId = form.watch(\"dollyId\");\n    \n    const tractor = vehicles.find(v => v.id === tractorId);\n    const firstTrailer = vehicles.find(v => v.id === firstTrailerId);\n    const secondTrailer = vehicles.find(v => v.id === secondTrailerId);\n    const dolly = vehicles.find(v => v.id === dollyId);\n    \n    return {\n      cavalo: tractor?.plate || \"\",\n      carreta1: firstTrailer?.plate || \"\",\n      carreta2: secondTrailer?.plate || \"\",\n      dolly: dolly?.plate || \"\"\n    };\n  };\n\n  // ✅ VALIDAÇÃO AUTOMÁTICA SILENCIOSA: Executa validação e aplica resultados automaticamente\n  const executeAutomaticValidation = useCallback(async () => {\n    console.log('[AUTO] 🎯 INICIO executeAutomaticValidation');\n    \n    if (!vehicles || vehicles.length === 0) {\n      console.log('[AUTO] ❌ Sem veículos disponíveis');\n      return;\n    }\n    \n    const currentCombination = getCurrentCombination();\n    console.log('[AUTO] 📋 Combinação atual:', currentCombination);\n    \n    // Verificar se tem configuração mínima\n    if (!currentCombination.cavalo || !currentCombination.carreta1) {\n      console.log('[AUTO] ⚠️ Configuração mínima não atendida - aguardando cavalo + carreta1');\n      return;\n    }\n    \n    console.log('[AUTO] 🚀 Executando validação automática silenciosa...');\n    setPreventiveValidationRunning(true);\n    \n    try {\n      // Determinar tipo de composição automaticamente\n      const hasSecondTrailer = !!currentCombination.carreta2;\n      const hasDolly = !!currentCombination.dolly;\n      \n      let tipoComposicao = \"SIMPLES\";\n      if (hasDolly && hasSecondTrailer) {\n        tipoComposicao = \"RODOTREM\";\n      } else if (hasDolly && !hasSecondTrailer) {\n        tipoComposicao = \"DOLLY_ONLY\";\n      } else if (!hasDolly && hasSecondTrailer) {\n        tipoComposicao = \"BITREM\";\n      }\n      \n      console.log(`[AUTO] Tipo de composição: ${tipoComposicao}`);\n      console.log('[AUTO] ✅ INICIANDO validação automática para combinação:', currentCombination);\n      \n      const newStatus: Record<string, string> = {};\n      const newBlockedStates: Record<string, any> = {};\n      \n      // Validar todos os estados em paralelo\n      const validationPromises = brazilianStates.map(async (state) => {\n        try {\n          const composicao = {\n            cavalo: currentCombination.cavalo,\n            carreta1: currentCombination.carreta1,\n            carreta2: currentCombination.carreta2 || undefined,\n            dolly: currentCombination.dolly || undefined\n          };\n          \n          const response = await fetch('/api/licencas-vigentes-by-combination', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              estado: state.code,\n              composicao\n            })\n          });\n          \n          const result = await response.json();\n          \n          if (result.bloqueado) {\n            newStatus[state.code] = 'blocked';\n            newBlockedStates[state.code] = result;\n            console.log(`[AUTO] ${state.code} bloqueado - ${result.dias_restantes || 'N/A'} dias`);\n          } else {\n            newStatus[state.code] = 'valid';\n            console.log(`[AUTO] ${state.code} liberado`);\n          }\n        } catch (error) {\n          newStatus[state.code] = 'error';\n          console.log(`[AUTO] ${state.code} erro na validação:`, error);\n        }\n      });\n      \n      // Aguardar todas as validações\n      await Promise.all(validationPromises);\n      \n      // Aplicar resultados\n      setStateValidationStatus(newStatus);\n      setBlockedStates(newBlockedStates);\n      \n      console.log('[AUTO] ✅ Validação automática concluída - status atualizado');\n      \n      // Remover estados bloqueados da seleção atual\n      const currentSelectedStates = form.getValues().states || [];\n      const blockedStatesCodes = Object.keys(newBlockedStates);\n      const newSelectedStates = currentSelectedStates.filter(state => !blockedStatesCodes.includes(state));\n      \n      if (newSelectedStates.length !== currentSelectedStates.length) {\n        console.log(`[AUTO] Removendo estados bloqueados da seleção:`, blockedStatesCodes);\n        form.setValue('states', newSelectedStates);\n      }\n    } catch (error) {\n      console.error('[AUTO] ❌ Erro na validação automática:', error);\n    } finally {\n      setPreventiveValidationRunning(false);\n    }\n  }, [vehicles, getCurrentCombination, setPreventiveValidationRunning, setStateValidationStatus, setBlockedStates, form]);\n  \n  useEffect(() => {\n    if (!vehicles || vehicles.length === 0) return;\n    \n    // Obter combinação atual\n    const currentCombination = getCurrentCombination();\n    const combinationKey = `${currentCombination.cavalo}-${currentCombination.carreta1}-${currentCombination.carreta2}-${currentCombination.dolly}`;\n    \n    // Só executar se:\n    // 1. Combinação mínima (cavalo + carreta1) \n    // 2. Combinação diferente da última validada\n    // 3. Não está executando validação\n    const hasMinimumCombination = currentCombination.cavalo && currentCombination.carreta1;\n    \n    if (hasMinimumCombination &&\n        combinationKey !== lastValidatedCombination &&\n        !preventiveValidationRunning) {\n      \n      console.log(`[AUTO] 🚀 Executando validação automática para nova combinação: ${combinationKey}`);\n      \n      // Marcar como validada ANTES de executar para evitar loops\n      setLastValidatedCombination(combinationKey);\n      \n      // Executar validação automática IMEDIATAMENTE (sem timeout)\n      executeAutomaticValidation();\n    }\n  }, [\n    form.watch(\"tractorUnitId\"),\n    form.watch(\"firstTrailerId\"), \n    form.watch(\"secondTrailerId\"),\n    form.watch(\"dollyId\"),\n    vehicles,\n    preventiveValidationRunning,\n    lastValidatedCombination,\n    executeAutomaticValidation\n  ]);\n\n  // ✅ LIMPEZA AUTOMÁTICA: Limpa validações quando combinação muda\n  useEffect(() => {\n    const subscription = form.watch((value, { name }) => {\n      if (name && (\n        name === 'tractorUnitId' ||\n        name === 'firstTrailerId' ||\n        name === 'secondTrailerId' ||\n        name === 'dollyId'\n      )) {\n        console.log(`[CLEANUP] Campo ${name} alterado - limpando validações antigas`);\n        setStateValidationStatus({});\n        setBlockedStates({});\n        // Resetar combinação validada para permitir nova validação\n        setLastValidatedCombination(\"\");\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [form]);\n\n  // Função para verificar e confirmar seleção de veículo de terceiro\n  const handleVehicleSelection = (vehicleId: number, fieldName: string) => {\n    const vehicle = vehicles?.find(v => v.id === vehicleId);\n    if (vehicle && vehicle.ownershipType === 'terceiro') {\n      // Se é veículo de terceiro, mostrar modal de confirmação\n      setPendingVehicleSelection({ vehicleId, fieldName });\n      setShowThirdPartyConfirmation(true);\n    } else {\n      // Se é veículo próprio, aplicar diretamente\n      form.setValue(fieldName as any, vehicleId);\n    }\n  };\n\n  // Função para confirmar a seleção de veículo de terceiro\n  const confirmThirdPartyVehicle = () => {\n    if (pendingVehicleSelection) {\n      form.setValue(pendingVehicleSelection.fieldName as any, pendingVehicleSelection.vehicleId);\n      setShowThirdPartyConfirmation(false);\n      setPendingVehicleSelection(null);\n    }\n  };\n\n  // Função para cancelar a seleção de veículo de terceiro\n  const cancelThirdPartyVehicle = () => {\n    setShowThirdPartyConfirmation(false);\n    setPendingVehicleSelection(null);\n  };\n\n  // Função para confirmar o envio com veículos de terceiros\n  const confirmSubmitWithThirdParty = async () => {\n    if (pendingSubmitData) {\n      try {\n        const url = draft ? `/api/licenses/drafts/${draft.id}/submit` : '/api/licenses';\n        const method = \"POST\";\n        const res = await apiRequest(method, url, pendingSubmitData);\n        const result = await res.json();\n        \n        toast({\n          title: \"Solicitação enviada\",\n          description: \"A solicitação de licença foi enviada com sucesso\",\n        });\n        onComplete();\n      } catch (error: any) {\n        toast({\n          title: \"Erro\",\n          description: error.message || \"Não foi possível enviar a solicitação\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setShowSubmitConfirmation(false);\n        setPendingSubmitData(null);\n        setThirdPartyVehiclesInSubmit([]);\n      }\n    }\n  };\n\n  // Função para cancelar o envio com veículos de terceiros\n  const cancelSubmitWithThirdParty = () => {\n    setShowSubmitConfirmation(false);\n    setPendingSubmitData(null);\n    setThirdPartyVehiclesInSubmit([]);\n  };\n\n  // Dynamic vehicle filters based on license type using dynamic validation\n  const semiTrailers = useMemo(() => {\n    if (!licenseType) return allSemiTrailers;\n    \n    return allSemiTrailers.filter((v) => {\n      const result = validateVehicleForPosition(v, 'firstTrailer', licenseType, vehicleSetTypes);\n      return result.isValid;\n    });\n  }, [allSemiTrailers, licenseType, vehicleSetTypes]);\n  \n  const dollys = useMemo(() => {\n    if (!licenseType) return allDollys;\n    \n    return allDollys.filter((v) => {\n      const result = validateVehicleForPosition(v, 'dolly', licenseType, vehicleSetTypes);\n      return result.isValid;\n    });\n  }, [allDollys, licenseType, vehicleSetTypes]);\n\n  // Watch for type changes to conditionally render fields\n  useEffect(() => {\n    const subscription = form.watch((value, { name }) => {\n      if (name === \"type\") {\n        setLicenseType(value.type as string);\n\n        // Reset cargo type when changing license type\n        form.setValue(\"cargoType\", undefined);\n        setCargoType(\"\");\n\n        // Aplicar valores padrão apenas para tipos que não são prancha\n        if (value.type === \"flatbed\") {\n          // Para pranchas, manter campos vazios\n          form.setValue(\"width\", undefined);\n          form.setValue(\"height\", undefined);\n        } else {\n          // Para outros tipos, aplicar valores padrão\n          form.setValue(\"width\", 2.6);\n          form.setValue(\"height\", 4.4);\n        }\n      }\n\n      if (name === \"cargoType\") {\n        setCargoType(value.cargoType as string);\n      }\n\n      // Set main vehicle plate based on tractor unit selection\n      if (name === \"tractorUnitId\" && value.tractorUnitId) {\n        const selectedVehicle = vehicles?.find(\n          (v) => v.id === value.tractorUnitId,\n        );\n        if (selectedVehicle) {\n          form.setValue(\"mainVehiclePlate\", selectedVehicle.plate);\n        }\n      }\n\n      // Apply dynamic validation based on license type and cargo type\n      const currentType = value.type as string;\n      const currentCargoType = value.cargoType as string;\n\n      // Ajustar validações de dimensões com base no tipo de conjunto e carga\n      if (\n        currentType &&\n        (name === \"type\" ||\n          name === \"cargoType\" ||\n          name === \"length\" ||\n          name === \"width\" ||\n          name === \"height\")\n      ) {\n        let limits = DIMENSION_LIMITS.default;\n\n        if (currentType === \"flatbed\") {\n          limits =\n            currentCargoType === \"oversized\"\n              ? DIMENSION_LIMITS.oversized\n              : DIMENSION_LIMITS.flatbed;\n        } else if (\n          currentCargoType === \"agricultural_machinery\" ||\n          currentCargoType === \"indivisible_cargo\"\n        ) {\n          limits = DIMENSION_LIMITS.agricultural_machinery;\n        }\n\n        // Verificar e validar dimensões atuais\n        const currentLength = form.getValues(\"length\");\n        const currentWidth = form.getValues(\"width\");\n        const currentHeight = form.getValues(\"height\");\n\n        if (currentType === \"flatbed\") {\n          // Para pranchas: aplicar validações específicas para prancha\n\n          // Validar comprimento para prancha\n          if (currentLength !== undefined && currentLength !== null) {\n            if (currentLength > limits.maxLength) {\n              form.setError(\"length\", {\n                type: \"manual\",\n                message: `O comprimento máximo para pranchas é ${limits.maxLength.toFixed(2).replace(\".\", \",\")} metros`,\n              });\n            } else {\n              form.clearErrors(\"length\");\n            }\n          }\n\n          // Validar largura para prancha\n          if (currentWidth !== undefined && currentWidth !== null) {\n            if (currentWidth > limits.maxWidth) {\n              form.setError(\"width\", {\n                type: \"manual\",\n                message: `A largura máxima para pranchas é ${limits.maxWidth.toFixed(2).replace(\".\", \",\")} metros`,\n              });\n            } else {\n              form.clearErrors(\"width\");\n            }\n          }\n\n          // Validar altura para prancha\n          if (currentHeight !== undefined && currentHeight !== null) {\n            if (currentHeight > limits.maxHeight) {\n              form.setError(\"height\", {\n                type: \"manual\",\n                message: `A altura máxima para pranchas é ${limits.maxHeight.toFixed(2).replace(\".\", \",\")} metros`,\n              });\n            } else {\n              form.clearErrors(\"height\");\n            }\n          }\n        } else {\n          // Para outros tipos que NÃO são prancha: aplicar validações\n\n          // Validar comprimento\n          if (currentLength !== undefined && currentLength !== null) {\n            if (currentLength < limits.minLength) {\n              form.setError(\"length\", {\n                type: \"manual\",\n                message: `O comprimento mínimo para este tipo de conjunto é ${limits.minLength.toFixed(2).replace(\".\", \",\")} metros`,\n              });\n            } else if (currentLength > limits.maxLength) {\n              form.setError(\"length\", {\n                type: \"manual\",\n                message: `O comprimento máximo para este tipo de conjunto é ${limits.maxLength.toFixed(2).replace(\".\", \",\")} metros`,\n              });\n            } else {\n              form.clearErrors(\"length\");\n            }\n          }\n\n          // Validar largura\n          if (currentWidth !== undefined && currentWidth !== null) {\n            if (currentWidth > limits.maxWidth) {\n              form.setError(\"width\", {\n                type: \"manual\",\n                message: `A largura máxima para este tipo de conjunto é ${limits.maxWidth.toFixed(2).replace(\".\", \",\")} metros`,\n              });\n            } else {\n              form.clearErrors(\"width\");\n            }\n          }\n\n          // Validar altura\n          if (currentHeight !== undefined && currentHeight !== null) {\n            if (currentHeight > limits.maxHeight) {\n              form.setError(\"height\", {\n                type: \"manual\",\n                message: `A altura máxima para este tipo de conjunto é ${limits.maxHeight.toFixed(2).replace(\".\", \",\")} metros`,\n              });\n            } else {\n              form.clearErrors(\"height\");\n            }\n          }\n        }\n\n        // Atualizar textos descritivos para as dimensões\n        const lengthDesc =\n          currentType === \"flatbed\" && currentCargoType === \"oversized\"\n            ? \"Digite o comprimento em metros (sem limite para carga superdimensionada)\"\n            : currentType === \"flatbed\"\n              ? `Digite o comprimento em metros - Comprimento Máximo ${limits.maxLength.toFixed(2).replace(\".\", \",\")} Metros`\n              : currentCargoType === \"agricultural_machinery\" ||\n                  currentCargoType === \"indivisible\"\n                ? `Digite o comprimento em metros - Comprimento Máximo ${limits.maxLength.toFixed(2).replace(\".\", \",\")} Metros`\n                : `Digite o comprimento em metros (min: ${limits.minLength.toFixed(2).replace(\".\", \",\")} - max: ${limits.maxLength.toFixed(2).replace(\".\", \",\")})`;\n\n        const widthDesc =\n          currentType === \"flatbed\" && currentCargoType === \"oversized\"\n            ? \"Informe a largura total do conjunto em metros (sem limite para carga superdimensionada)\"\n            : currentType === \"flatbed\"\n              ? `Informe a largura total do conjunto em metros - Largura Máxima ${limits.maxWidth.toFixed(2).replace(\".\", \",\")} metros`\n              : currentCargoType === \"agricultural_machinery\" ||\n                  currentCargoType === \"indivisible\"\n                ? `Informe a largura total do conjunto em metros - Largura Máxima ${limits.maxWidth.toFixed(2).replace(\".\", \",\")} metros`\n                : `Informe a largura total do conjunto em metros (max: ${limits.maxWidth.toFixed(2).replace(\".\", \",\")})`;\n\n        const heightDesc =\n          currentType === \"flatbed\" && currentCargoType === \"oversized\"\n            ? \"Informe a altura total do conjunto em metros (sem limite para carga superdimensionada)\"\n            : currentType === \"flatbed\"\n              ? `Informe a altura total do conjunto em metros - Altura Máxima ${limits.maxHeight.toFixed(2).replace(\".\", \",\")} metros`\n              : currentCargoType === \"agricultural_machinery\" ||\n                  currentCargoType === \"indivisible\"\n                ? `Informe a altura total do conjunto em metros - Altura Máxima ${limits.maxHeight.toFixed(2).replace(\".\", \",\")} metros`\n                : `Informe a altura total do conjunto em metros (max: ${limits.maxHeight.toFixed(2).replace(\".\", \",\")})`;\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [form, vehicles]);\n\n  // Handle form submissions\n  const saveAsDraftMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertDraftLicenseSchema>) => {\n      const url = draft\n        ? `/api/licenses/drafts/${draft.id}`\n        : \"/api/licenses/drafts\";\n      const method = draft ? \"PATCH\" : \"POST\";\n      const res = await apiRequest(method, url, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Rascunho salvo\",\n        description: \"O rascunho da licença foi salvo com sucesso\",\n      });\n      onComplete();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Não foi possível salvar o rascunho\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Função para verificar se há veículos não cadastrados\n  const checkForUnregisteredVehicles = (): string[] => {\n    const additionalPlates = form.getValues('additionalPlates') || [];\n    const unregisteredPlates: string[] = [];\n    \n    additionalPlates.forEach((plate: string) => {\n      if (plate && !vehicles?.some(v => v.plate === plate)) {\n        unregisteredPlates.push(plate);\n      }\n    });\n    \n    return unregisteredPlates;\n  };\n\n  // Função para verificar se há veículos de terceiros no pedido\n  const checkForThirdPartyVehicles = (data: z.infer<typeof insertLicenseRequestSchema>): string[] => {\n    const thirdPartyVehicles: string[] = [];\n    \n    // Verificar unidade tratora\n    if (data.tractorUnitId) {\n      const vehicle = vehicles?.find(v => v.id === data.tractorUnitId);\n      if (vehicle && vehicle.ownershipType === 'terceiro') {\n        thirdPartyVehicles.push(`${vehicle.plate} (Unidade Tratora)`);\n      }\n    }\n\n    // Verificar primeiro semi-reboque\n    if (data.firstTrailerId) {\n      const vehicle = vehicles?.find(v => v.id === data.firstTrailerId);\n      if (vehicle && vehicle.ownershipType === 'terceiro') {\n        thirdPartyVehicles.push(`${vehicle.plate} (Primeiro Semi-reboque)`);\n      }\n    }\n\n    // Verificar segundo semi-reboque\n    if (data.secondTrailerId) {\n      const vehicle = vehicles?.find(v => v.id === data.secondTrailerId);\n      if (vehicle && vehicle.ownershipType === 'terceiro') {\n        thirdPartyVehicles.push(`${vehicle.plate} (Segundo Semi-reboque)`);\n      }\n    }\n\n    // Verificar dolly\n    if (data.dollyId) {\n      const vehicle = vehicles?.find(v => v.id === data.dollyId);\n      if (vehicle && vehicle.ownershipType === 'terceiro') {\n        thirdPartyVehicles.push(`${vehicle.plate} (Dolly)`);\n      }\n    }\n    \n    return thirdPartyVehicles;\n  };\n\n  const submitRequestMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertLicenseRequestSchema>) => {\n      try {\n        // Verificar se há veículos não cadastrados antes de enviar\n        const unregisteredPlates = checkForUnregisteredVehicles();\n        \n        if (unregisteredPlates.length > 0) {\n          throw new Error(`Há veículos não cadastrados no pedido: ${unregisteredPlates.join(', ')}. Cadastre todos os veículos antes de finalizar o pedido.`);\n        }\n\n        // Verificar se há veículos de terceiros e mostrar aviso\n        const thirdPartyVehicles = checkForThirdPartyVehicles(data);\n        \n        if (thirdPartyVehicles.length > 0) {\n          // Preparar dados para confirmação no modal\n          setPendingSubmitData(data);\n          setThirdPartyVehiclesInSubmit(thirdPartyVehicles);\n          setShowSubmitConfirmation(true);\n          throw new Error('Aguardando confirmação do usuário para veículos de terceiros.');\n        }\n\n        // Adicionar log detalhado para debug\n        console.log(\"Enviando licença:\", JSON.stringify(data, null, 2));\n\n        // Se for tipo prancha, exibir informações completas\n        if (data.type === \"flatbed\") {\n          console.log(\"Detalhes da prancha:\", {\n            tipo: data.type,\n            carga: data.cargoType,\n            dimensoes: {\n              comprimento: data.length,\n              largura: data.width,\n              altura: data.height,\n            },\n            estados: data.states,\n            placaPrincipal: data.mainVehiclePlate,\n          });\n        }\n\n        // Usar o endpoint correto de submissão\n        const url = draft\n          ? `/api/licenses/drafts/${draft.id}/submit`\n          : \"/api/licenses/submit\";\n        const method = \"POST\";\n        console.log(`Enviando para endpoint: ${url}`);\n        console.log(\"Estados no payload final:\", data.states);\n        console.log(\"Payload completo:\", JSON.stringify(data, null, 2));\n        \n        const res = await apiRequest(method, url, data);\n        \n        // Verificar se a resposta foi bem-sucedida\n        if (!res.ok) {\n          const errorText = await res.text();\n          console.error(\"Erro da resposta do servidor:\", errorText);\n          throw new Error(`Erro ${res.status}: ${errorText || 'Erro desconhecido no servidor'}`);\n        }\n        \n        const result = await res.json();\n        console.log(\"Resposta do servidor:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"Erro ao enviar pedido:\", error);\n        console.error(\"Tipo do erro:\", typeof error);\n        console.error(\"Stack trace:\", error instanceof Error ? error.stack : 'Não disponível');\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Solicitação enviada com sucesso!\",\n        description:\n          \"Sua solicitação de licença foi processada e enviada corretamente.\",\n        variant: \"default\",\n        duration: 5000,\n      });\n\n      // Mostrar toast específico para pranchas\n      if (licenseType === \"flatbed\") {\n        toast({\n          title: \"Pedido de Prancha enviado\",\n          description:\n            \"Seu pedido para veículo tipo Prancha foi enviado com sucesso.\",\n          variant: \"default\",\n        });\n      }\n\n      onComplete();\n    },\n    onError: (error: Error) => {\n      console.error(\"Erro completo:\", error);\n\n      // Criar elemento de erro detalhado\n      const ErrorMessage = () => (\n        <div className=\"space-y-2\">\n          <div className=\"bg-red-950 text-red-100 p-2 rounded text-xs overflow-auto max-h-32\">\n            {error.message || \"Erro desconhecido ao processar o pedido\"}\n          </div>\n          <p className=\"text-sm mt-2\">\n            Tente selecionar um veículo diferente ou verificar os campos\n            obrigatórios.\n          </p>\n        </div>\n      );\n\n      toast({\n        title: \"Erro no envio do pedido\",\n        description: <ErrorMessage />,\n        variant: \"destructive\",\n        duration: 8000,\n      });\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof formSchema>) => {\n    // Adjust dimensions from meters to centimeters for storage\n    const dataToSubmit = {\n      ...values,\n      length: Math.round((values.length || 0) * 100), // Convert to centimeters\n      width: values.width ? Math.round(values.width * 100) : undefined, // Convert to centimeters if exists\n      height: values.height ? Math.round(values.height * 100) : undefined, // Convert to centimeters if exists\n    };\n\n    if (values.isDraft) {\n      // Cast to appropriate types to satisfy TypeScript\n      saveAsDraftMutation.mutate(dataToSubmit as any);\n    } else {\n      // Remove isDraft from payload when submitting a license request\n      const { isDraft, ...requestData } = dataToSubmit;\n      submitRequestMutation.mutate(requestData as any);\n    }\n  };\n\n  // Função para verificar se os campos obrigatórios estão preenchidos\n  const checkRequiredFields = () => {\n    const values = form.getValues();\n    const isWidthEmpty = values.width === undefined || values.width === null;\n    const isHeightEmpty = values.height === undefined || values.height === null;\n    const isCargoTypeEmpty = !values.cargoType;\n\n    // Adicionar log detalhado para debug\n    console.log(\"Valores do formulário:\", {\n      licenseType: values.type,\n      cargoType: values.cargoType,\n      width: values.width,\n      height: values.height,\n      length: values.length,\n    });\n\n    return isWidthEmpty || isHeightEmpty || isCargoTypeEmpty;\n  };\n\n  const handleSaveDraft = () => {\n    form.setValue(\"isDraft\", true);\n    form.handleSubmit(onSubmit)();\n  };\n\n  const handleSubmitRequest = () => {\n    // Acessar todos os valores do formulário\n    const values = form.getValues();\n\n    // Tratamento especial para veículos tipo Prancha\n    if (values.type === \"flatbed\") {\n      // Garantir que o formulário será enviado para tipo prancha, preenchendo valores padrão se necessário\n      if (!values.width)\n        form.setValue(\"width\", values.cargoType === \"oversized\" ? 4 : 3.2);\n      if (!values.height)\n        form.setValue(\"height\", values.cargoType === \"oversized\" ? 5 : 4.95);\n      if (!values.length)\n        form.setValue(\"length\", values.cargoType === \"oversized\" ? 30 : 25);\n      if (!values.cargoType) form.setValue(\"cargoType\", \"indivisible_cargo\");\n      if (!values.states || values.states.length === 0)\n        form.setValue(\"states\", [\"SP\"]);\n\n      // Garantir que há um veículo principal selecionado\n      if (!values.mainVehiclePlate && flatbeds.length > 0) {\n        const firstVehicle = flatbeds[0];\n        form.setValue(\"flatbedId\", firstVehicle.id);\n        form.setValue(\"mainVehiclePlate\", firstVehicle.plate);\n      }\n\n      // Mostrar toast informativo\n      toast({\n        title: \"Preparando envio\",\n        description: \"Processando pedido para veículo tipo Prancha...\",\n      });\n\n      // Agora que garantimos que tem os valores necessários, podemos continuar\n      setShowRequiredFieldsWarning(false);\n      form.setValue(\"isDraft\", false);\n\n      // Contornar qualquer validação e enviar de forma direta\n      setTimeout(() => {\n        // Debug: verificar estados antes da conversão (prancha)\n        const currentFormValues = form.getValues();\n        console.log(\"Estados no form.getValues() (prancha):\", currentFormValues.states);\n        \n        // Obter valores atualizados após as modificações\n        const updatedData = {\n          ...currentFormValues,\n          // Garantir que os estados selecionados são preservados\n          states: currentFormValues.states,\n          // Converter comprimento, largura e altura de metros para centímetros\n          length: Math.round((currentFormValues.length || 0) * 100),\n          width: Math.round((currentFormValues.width || 0) * 100),\n          height: Math.round((currentFormValues.height || 0) * 100),\n          isDraft: false,\n        };\n\n        // Remover isDraft do payload\n        const { isDraft, ...requestData } = updatedData;\n\n        // Debug final (prancha)\n        console.log(\"Estados no requestData final (prancha):\", requestData.states);\n        console.log(\"Enviando dados prancha:\", requestData);\n        console.log(\"Campo states especificamente (prancha):\", requestData.states, typeof requestData.states);\n        submitRequestMutation.mutate(requestData as any);\n      }, 500);\n    } else {\n      // Para outros tipos de veículos, manter a verificação normal\n      if (checkRequiredFields()) {\n        // Mostrar aviso e não prosseguir com a submissão\n        setShowRequiredFieldsWarning(true);\n\n        // Rolar para o topo para garantir que o usuário veja o aviso\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n\n        // Notificar o usuário através de toast\n        toast({\n          title: \"Campos obrigatórios\",\n          description:\n            \"Preencha todos os campos obrigatórios para enviar sua solicitação\",\n          variant: \"destructive\",\n        });\n\n        return;\n      }\n\n      // Se tudo estiver preenchido, continuar com a submissão\n      setShowRequiredFieldsWarning(false);\n      form.setValue(\"isDraft\", false);\n\n      // Enviar diretamente para evitar problemas de validação no modal\n      setTimeout(() => {\n        // Debug: verificar estados antes da conversão\n        const currentFormValues = form.getValues();\n        console.log(\"Estados no form.getValues():\", currentFormValues.states);\n        \n        const updatedData = {\n          ...currentFormValues,\n          // Garantir que os estados selecionados são preservados\n          states: currentFormValues.states,\n          // Converter comprimento, largura e altura de metros para centímetros\n          length: Math.round((currentFormValues.length || 0) * 100),\n          width: Math.round((currentFormValues.width || 0) * 100),\n          height: Math.round((currentFormValues.height || 0) * 100),\n          isDraft: false,\n        };\n\n        // Remover isDraft do payload\n        const { isDraft, ...requestData } = updatedData;\n\n        // Debug final  \n        console.log(\"Estados no requestData final:\", requestData.states);\n        console.log(\"Enviando dados:\", requestData);\n        console.log(\"Campo states especificamente:\", requestData.states, typeof requestData.states);\n        submitRequestMutation.mutate(requestData as any);\n      }, 300);\n    }\n  };\n\n  const isProcessing =\n    saveAsDraftMutation.isPending || submitRequestMutation.isPending;\n\n  // Mutation para criar um novo veículo\n  const createVehicleMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertVehicleSchema>) => {\n      const res = await apiRequest(\"POST\", \"/api/vehicles\", data);\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Veículo cadastrado\",\n        description: \"O veículo foi cadastrado com sucesso\",\n      });\n\n      // Atualizar a lista de veículos\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/vehicles\"],\n      });\n\n      setShowVehicleDialog(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Não foi possível cadastrar o veículo\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Formulário para cadastro de veículo\n  const vehicleForm = useForm<z.infer<typeof insertVehicleSchema>>({\n    resolver: zodResolver(insertVehicleSchema),\n    defaultValues: {\n      plate: \"\",\n      type: \"\",\n      brand: \"\",\n      model: \"\",\n      year: undefined,\n      axleCount: undefined,\n      renavam: \"\",\n      remarks: \"\",\n    },\n  });\n\n  const handleCreateVehicle = (data: z.infer<typeof insertVehicleSchema>) => {\n    createVehicleMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Aviso de campos obrigatórios não preenchidos */}\n        {showRequiredFieldsWarning && (\n          <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4 rounded-md\">\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <svg\n                  className=\"h-5 w-5 text-yellow-400\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-yellow-800\">\n                  Atenção! Campos obrigatórios não preenchidos\n                </h3>\n                <div className=\"mt-2 text-sm text-yellow-700\">\n                  <p>\n                    Os seguintes campos são obrigatórios para enviar a\n                    solicitação:\n                  </p>\n                  <ul className=\"list-disc pl-5 mt-1 space-y-1\">\n                    {form.getValues(\"width\") === undefined && (\n                      <li>Largura do conjunto</li>\n                    )}\n                    {form.getValues(\"height\") === undefined && (\n                      <li>Altura do conjunto</li>\n                    )}\n                    {!form.getValues(\"cargoType\") && <li>Tipo de carga</li>}\n                  </ul>\n                  <p className=\"mt-2\">\n                    Por favor, preencha todos os campos marcados como{\" \"}\n                    <span className=\"text-yellow-600 font-medium\">\n                      Obrigatório\n                    </span>{\" \"}\n                    antes de enviar.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <Dialog open={showVehicleDialog} onOpenChange={setShowVehicleDialog}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Cadastrar Novo Veículo</DialogTitle>\n              <DialogDescription>\n                Preencha as informações do veículo para adicioná-lo ao sistema\n              </DialogDescription>\n            </DialogHeader>\n\n            <Form {...vehicleForm}>\n              <form\n                onSubmit={vehicleForm.handleSubmit(handleCreateVehicle)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={vehicleForm.control}\n                  name=\"plate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Placa</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"ABC-1234\"\n                          {...field}\n                          className=\"uppercase\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={vehicleForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tipo de Veículo</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o tipo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"tractor_unit\">\n                            Unidade Tratora (Cavalo)\n                          </SelectItem>\n                          <SelectItem value=\"truck\">Caminhão</SelectItem>\n                          <SelectItem value=\"semi_trailer\">\n                            Semirreboque\n                          </SelectItem>\n                          <SelectItem value=\"trailer\">Reboque</SelectItem>\n                          <SelectItem value=\"dolly\">Dolly</SelectItem>\n                          <SelectItem value=\"flatbed\">Prancha</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={vehicleForm.control}\n                    name=\"brand\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Marca</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Marca\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={vehicleForm.control}\n                    name=\"model\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Modelo</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Modelo\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={vehicleForm.control}\n                    name=\"year\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Ano</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"2023\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) =>\n                              field.onChange(e.target.valueAsNumber)\n                            }\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={vehicleForm.control}\n                    name=\"axleCount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quantidade de Eixos</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"2\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) =>\n                              field.onChange(e.target.valueAsNumber)\n                            }\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={vehicleForm.control}\n                  name=\"renavam\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Renavam</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Renavam\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={vehicleForm.control}\n                  name=\"remarks\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Observações</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Observações sobre o veículo...\"\n                          className=\"resize-none\"\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowVehicleDialog(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createVehicleMutation.isPending}\n                  >\n                    {createVehicleMutation.isPending && (\n                      <LoaderCircle className=\"mr-2 h-4 w-4 animate-spin\" />\n                    )}\n                    Cadastrar Veículo\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n        <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n          <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n            <Building2 className=\"mr-2 h-5 w-5\" />\n            Dados do Transportador\n          </h3>\n\n          <div className=\"grid grid-cols-1 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"transporterId\"\n              render={({ field }) => (\n                <OptimizedTransporterSelector\n                  value={field.value}\n                  onValueChange={field.onChange}\n                  placeholder=\"Digite o nome ou CNPJ do transportador...\"\n                  label=\"Transportador\"\n                  required\n                />\n              )}\n            />\n          </div>\n        </div>\n\n        <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n          <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n            <Truck className=\"mr-2 h-5 w-5\" />\n            Tipo de Conjunto\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-medium\">\n                    Tipo de Conjunto\n                  </FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger className=\"h-10\">\n                        <SelectValue placeholder=\"Selecione um tipo\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {isLoadingVehicleSetTypes ? (\n                        <div className=\"flex items-center justify-center p-4\">\n                          <LoaderCircle className=\"h-4 w-4 animate-spin mr-2\" />\n                          <span className=\"text-sm text-gray-500\">Carregando tipos...</span>\n                        </div>\n                      ) : (\n                        vehicleSetTypes\n                          .filter(type => type.isActive) // Apenas tipos ativos\n                          .map((vehicleSetType) => (\n                            <SelectItem key={vehicleSetType.id} value={vehicleSetType.name}>\n                              <div className=\"flex items-center\">\n                                <VehicleTypeImage\n                                  type={vehicleSetType.name as any}\n                                  className=\"mr-2\"\n                                  iconSize={24}\n                                />\n                                <span>{vehicleSetType.label}</span>\n                              </div>\n                            </SelectItem>\n                          ))\n                      )}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Campo de Tipo de Carga - varia conforme tipo de conjunto */}\n            {licenseType && (\n              <FormField\n                control={form.control}\n                name=\"cargoType\"\n                render={({ field }) => {\n                  // Verificar se o campo está vazio\n                  const isEmpty = !field.value;\n\n                  return (\n                    <FormItem>\n                      <FormLabel className=\"text-base font-medium flex items-center\">\n                        Tipo de Carga\n                        {isEmpty && (\n                          <span className=\"ml-2 text-xs font-normal px-2 py-0.5 rounded-full bg-amber-100 text-amber-800\">\n                            Obrigatório\n                          </span>\n                        )}\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger\n                            className={`h-10 ${isEmpty ? \"border-amber-500 ring-1 ring-amber-500\" : \"\"}`}\n                          >\n                            <SelectValue placeholder=\"Selecione o tipo de carga\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {licenseType === \"flatbed\"\n                            ? FLATBED_CARGO_TYPES.map((option) => (\n                                <SelectItem\n                                  key={option.value}\n                                  value={option.value}\n                                >\n                                  {option.label}\n                                </SelectItem>\n                              ))\n                            : NON_FLATBED_CARGO_TYPES.map((option) => (\n                                <SelectItem\n                                  key={option.value}\n                                  value={option.value}\n                                >\n                                  {option.label}\n                                </SelectItem>\n                              ))}\n                        </SelectContent>\n                      </Select>\n\n                      {isEmpty && (\n                        <div className=\"mt-1 text-sm text-amber-600 font-medium\">\n                          Este campo é obrigatório. Por favor, selecione um tipo\n                          de carga.\n                        </div>\n                      )}\n\n                      <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                        {licenseType === \"flatbed\"\n                          ? \"Selecione o tipo de carga para este conjunto de prancha\"\n                          : \"Selecione o tipo de carga para este conjunto\"}\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  );\n                }}\n              />\n            )}\n\n\n\n            <FormField\n              control={form.control}\n              name=\"length\"\n              render={({ field }) => (\n                <DimensionField\n                  field={field}\n                  fieldType=\"comprimento\"\n                  label=\"Comprimento (metros)\"\n                  placeholder=\"Ex.: 19,80\"\n                  licenseType={licenseType}\n                  cargoType={form.watch(\"cargoType\")}\n                  description={\n                    licenseType === \"flatbed\"\n                      ? \"Digite o comprimento em metros\"\n                      : form.watch(\"cargoType\") === \"agricultural_machinery\" ||\n                          form.watch(\"cargoType\") === \"indivisible_cargo\"\n                        ? \"Digite o comprimento em metros - Comprimento Máximo 25,00 Metros\"\n                        : \"Digite o comprimento em metros (min: 19,80 - max: 30,00)\"\n                  }\n                />\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"width\"\n              render={({ field }) => (\n                <DimensionField\n                  field={field}\n                  fieldType=\"largura\"\n                  label=\"Largura do Conjunto (metros)\"\n                  placeholder={\n                    licenseType === \"flatbed\" ? \"Ex.: 3,20\" : \"Ex.: 2,60\"\n                  }\n                  licenseType={licenseType}\n                  cargoType={form.watch(\"cargoType\")}\n                  description={\n                    licenseType === \"flatbed\"\n                      ? \"Informe a largura total do conjunto em metros\"\n                      : form.watch(\"cargoType\") === \"agricultural_machinery\" ||\n                          form.watch(\"cargoType\") === \"indivisible_cargo\"\n                        ? \"Informe a largura total do conjunto em metros - Largura Máxima 3,20 metros\"\n                        : \"Informe a largura total do conjunto em metros (max: 2,60)\"\n                  }\n                />\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"height\"\n              render={({ field }) => (\n                <DimensionField\n                  field={field}\n                  fieldType=\"altura\"\n                  label=\"Altura do Conjunto (metros)\"\n                  placeholder={\n                    licenseType === \"flatbed\" ? \"Ex.: 4,95\" : \"Ex.: 4,40\"\n                  }\n                  licenseType={licenseType}\n                  cargoType={form.watch(\"cargoType\")}\n                  description={\n                    licenseType === \"flatbed\"\n                      ? \"Informe a altura total do conjunto em metros\"\n                      : form.watch(\"cargoType\") === \"agricultural_machinery\" ||\n                          form.watch(\"cargoType\") === \"indivisible_cargo\"\n                        ? \"Informe a altura total do conjunto em metros - Altura Máxima 4,95 metros\"\n                        : \"Informe a altura total do conjunto em metros (max: 4,40)\"\n                  }\n                />\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Painel de Especificações de Eixos - Posicionado após as dimensões básicas */}\n        {licenseType && licenseType !== 'flatbed' && licenseType !== 'romeo_and_juliet' && (() => {\n          // Verificar se o tipo tem configuração de eixos (não é flexível)\n          const customType = vehicleSetTypes?.find(type => type.name === licenseType);\n          if (customType) {\n            return !customType.axleConfiguration.isFlexible;\n          }\n          // Para tipos padrão, mostrar normalmente\n          return true;\n        })() && (\n          <div className=\"border border-blue-200 rounded-lg p-4 bg-blue-50 mb-6\">\n            <h4 className=\"text-sm font-medium text-blue-800 mb-3 flex items-center\">\n              <Info className=\"h-4 w-4 mr-2\" />\n              Especificações de Eixos para {(() => {\n                const customType = vehicleSetTypes?.find(type => type.name === licenseType);\n                return customType ? customType.label : getLicenseTypeLabel(licenseType);\n              })()}\n            </h4>\n            <div className=\"text-xs text-blue-700 whitespace-pre-line\">\n              {getAxleSpecificationSummary(licenseType, vehicleSetTypes)}\n            </div>\n            {(() => {\n              // Verificar se requer dolly usando configuração dinâmica\n              const config = vehicleSetTypes \n                ? vehicleSetTypes.find(type => type.name === licenseType) \n                : null;\n              const requiresDolly = config \n                ? config.axleConfiguration.requiresDolly \n                : AXLE_CONFIGURATIONS[licenseType as any]?.requiresDolly;\n              \n              return requiresDolly && (\n                <div className=\"mt-2 text-xs text-blue-800 font-medium\">\n                  ⚠️ Este tipo de licença requer um dolly na composição\n                </div>\n              );\n            })()}\n          </div>\n        )}\n\n        {/* Dynamic fields for Rodotrem 9 eixos */}\n        {licenseType === \"roadtrain_9_axles\" && (\n          <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n              <VehicleTypeImage\n                type=\"roadtrain_9_axles\"\n                className=\"mr-2\"\n                iconSize={32}\n              />\n              Composição Principal do Rodotrem\n            </h3>\n\n            {/* Unidade Tratora - Esta é a unidade principal que desbloqueia a linha de frente */}\n            <div className=\"mb-6\">\n              <FormField\n                control={form.control}\n                name=\"tractorUnitId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-medium\">\n                      Unidade Tratora (Cavalo Mecânico)\n                    </FormLabel>\n                    <FormControl>\n                      <IntelligentVehicleSelector\n                        vehicleType=\"tractor_unit\"\n                        licenseType={licenseType}\n                        position=\"tractor\"\n                        value={field.value}\n                        onSelect={(vehicleId) => {\n                          field.onChange(vehicleId);\n                          if (vehicleId) {\n                            handleVehicleSelection(vehicleId, 'tractorUnitId');\n                          }\n                        }}\n                        placeholder=\"Digite a placa ou selecione a unidade tratora\"\n                        disabled={isLoadingVehicles}\n                        className=\"h-10 bg-blue-50 border-blue-200\"\n                      />\n                    </FormControl>\n                    <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                      Esta é a unidade principal que irá puxar o conjunto\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Linha de Frente - Com destaque visual como componente principal */}\n            <div className=\"border border-red-300 rounded-md p-4 bg-red-50 mb-6\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-4 w-4 mr-1 text-red-600\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                  <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n                  <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n                </svg>\n                Linha de Frente (Componentes Principais)\n              </h4>\n\n              {/* Sequência lógica de componentes do Rodotrem - Usando listas suspensas */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstTrailerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"font-medium\">1ª Carreta</FormLabel>\n                      <FormControl>\n                        <IntelligentVehicleSelector\n                          vehicleType=\"semi_trailer\"\n                          licenseType={licenseType}\n                          position=\"firstTrailer\"\n                          value={field.value}\n                          onSelect={(vehicleId) => {\n                            field.onChange(vehicleId);\n                          }}\n                          placeholder=\"Digite a placa ou selecione a 1ª carreta\"\n                          disabled={isLoadingVehicles}\n                          className=\"h-10 bg-green-50 border-green-200\"\n                        />\n                      </FormControl>\n                      <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                        Primeiro semirreboque da composição\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"dollyId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"font-medium\">Dolly</FormLabel>\n                      <FormControl>\n                        <IntelligentVehicleSelector\n                          vehicleType=\"dolly\"\n                          licenseType={licenseType}\n                          position=\"dolly\"\n                          value={field.value}\n                          onSelect={(vehicleId) => {\n                            field.onChange(vehicleId);\n                          }}\n                          placeholder=\"Digite a placa ou selecione o dolly\"\n                          disabled={isLoadingVehicles}\n                          className=\"h-10 bg-amber-50 border-amber-200\"\n                        />\n                      </FormControl>\n                      <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                        Dispositivo de acoplamento\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"secondTrailerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"font-medium\">2ª Carreta</FormLabel>\n                      <FormControl>\n                        <IntelligentVehicleSelector\n                          vehicleType=\"semi_trailer\"\n                          licenseType={licenseType}\n                          position=\"secondTrailer\"\n                          value={field.value}\n                          onSelect={(vehicleId) => {\n                            field.onChange(vehicleId);\n                          }}\n                          placeholder=\"Digite a placa ou selecione a 2ª carreta\"\n                          disabled={isLoadingVehicles}\n                          className=\"h-10 bg-purple-50 border-purple-200\"\n                        />\n                      </FormControl>\n                      <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                        Segundo semirreboque da composição\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Resumo da composição */}\n            <div className=\"bg-gray-50 p-3 rounded-md border border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n                Composição selecionada:\n              </h4>\n              <div className=\"flex flex-col gap-3\">\n                {/* Veículos principais */}\n                <div className=\"flex flex-wrap gap-2\">\n                  <div className=\"text-xs font-medium text-gray-600 mr-1\">\n                    Veículos principais:\n                  </div>\n                  {form.watch(\"tractorUnitId\") && (\n                    <div className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">\n                        Unidade Principal:\n                      </span>{\" \"}\n                      {tractorUnits.find(\n                        (v) => v.id === form.watch(\"tractorUnitId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"firstTrailerId\") && (\n                    <div className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">1ª Carreta:</span>{\" \"}\n                      {semiTrailers.find(\n                        (v) => v.id === form.watch(\"firstTrailerId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"dollyId\") && (\n                    <div className=\"text-xs bg-amber-100 text-amber-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">Dolly:</span>{\" \"}\n                      {dollys.find((v) => v.id === form.watch(\"dollyId\"))\n                        ?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"secondTrailerId\") && (\n                    <div className=\"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">2ª Carreta:</span>{\" \"}\n                      {semiTrailers.find(\n                        (v) => v.id === form.watch(\"secondTrailerId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                </div>\n\n                {/* Placas adicionais */}\n                {form.watch(\"additionalPlates\") &&\n                  form.watch(\"additionalPlates\").length > 0 && (\n                    <div className=\"flex flex-col\">\n                      <div className=\"text-xs font-medium text-gray-600 mb-1\">\n                        Placas adicionais:\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {form.watch(\"additionalPlates\").map(\n                          (plate, index) =>\n                            plate && (\n                              <div\n                                key={index}\n                                className=\"text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-md flex items-center\"\n                              >\n                                <span className=\"font-medium mr-1\">\n                                  {index + 1}:\n                                </span>{\" \"}\n                                {plate}\n                              </div>\n                            ),\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                {/* Total de veículos */}\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Total:{\" \"}\n                  {[\n                    form.watch(\"tractorUnitId\") ? 1 : 0,\n                    form.watch(\"firstTrailerId\") ? 1 : 0,\n                    form.watch(\"dollyId\") ? 1 : 0,\n                    form.watch(\"secondTrailerId\") ? 1 : 0,\n                    form.watch(\"additionalPlates\")\n                      ? form.watch(\"additionalPlates\").filter((p) => p).length\n                      : 0,\n                  ].reduce((a, b) => a + b, 0)}{\" \"}\n                  veículos\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Dynamic fields for Bitrem */}\n        {(licenseType === \"bitrain_9_axles\" ||\n          licenseType === \"bitrain_7_axles\" ||\n          licenseType === \"bitrain_6_axles\") && (\n          <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n              {licenseType === \"bitrain_6_axles\" ? (\n                <VehicleTypeImage\n                  type=\"bitrain_6_axles\"\n                  className=\"mr-2\"\n                  iconSize={32}\n                />\n              ) : licenseType === \"bitrain_9_axles\" ? (\n                <VehicleTypeImage\n                  type=\"bitrain_9_axles\"\n                  className=\"mr-2\"\n                  iconSize={32}\n                />\n              ) : licenseType === \"bitrain_7_axles\" ? (\n                <VehicleTypeImage\n                  type=\"bitrain_7_axles\"\n                  className=\"mr-2\"\n                  iconSize={32}\n                />\n              ) : (\n                <Truck className=\"mr-2 h-8 w-8\" />\n              )}\n              Composição Principal do Bitrem\n            </h3>\n\n            {/* Unidade Tratora - Esta é a unidade principal que desbloqueia a linha de frente */}\n            <div className=\"mb-6\">\n              <FormField\n                control={form.control}\n                name=\"tractorUnitId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-medium\">\n                      Unidade Tratora (Cavalo Mecânico)\n                    </FormLabel>\n                    <FormControl>\n                      <PaginatedVehicleSelector\n                        vehicleType=\"tractor_unit\"\n                        value={field.value}\n                        onSelect={(vehicleId) => {\n                          field.onChange(vehicleId);\n                          if (vehicleId) {\n                            handleVehicleSelection(vehicleId, 'tractorUnitId');\n                          }\n                        }}\n                        placeholder=\"Digite a placa ou selecione a unidade tratora\"\n                        disabled={isLoadingVehicles}\n                        className=\"h-10 bg-blue-50 border-blue-200\"\n                      />\n                    </FormControl>\n                    <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                      Esta é a unidade principal que irá puxar o conjunto\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Linha de Frente - Com destaque visual como componente principal */}\n            <div className=\"border border-red-300 rounded-md p-4 bg-red-50 mb-6\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-4 w-4 mr-1 text-red-600\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                  <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n                  <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n                </svg>\n                Linha de Frente (Componentes Principais)\n              </h4>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstTrailerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"font-medium\">1ª Carreta</FormLabel>\n                      <FormControl>\n                        <IntelligentVehicleSelector\n                          vehicleType=\"semi_trailer\"\n                          licenseType={licenseType}\n                          position=\"firstTrailer\"\n                          value={field.value}\n                          onSelect={(vehicleId) => {\n                            field.onChange(vehicleId);\n                          }}\n                          placeholder=\"Digite a placa ou selecione a 1ª carreta\"\n                          disabled={isLoadingVehicles}\n                          className=\"h-10 bg-green-50 border-green-200\"\n                        />\n                      </FormControl>\n                      <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                        Selecione o primeiro semirreboque da composição\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"secondTrailerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"font-medium\">2ª Carreta</FormLabel>\n                      <FormControl>\n                        <IntelligentVehicleSelector\n                          vehicleType=\"semi_trailer\"\n                          licenseType={licenseType}\n                          position=\"secondTrailer\"\n                          value={field.value}\n                          onSelect={(vehicleId) => {\n                            field.onChange(vehicleId);\n                          }}\n                          placeholder=\"Digite a placa ou selecione a 2ª carreta\"\n                          disabled={isLoadingVehicles}\n                          className=\"h-10 bg-purple-50 border-purple-200\"\n                        />\n                      </FormControl>\n                      <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                        Segundo semirreboque da composição\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Resumo da composição */}\n            <div className=\"bg-gray-50 p-3 rounded-md border border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n                Composição selecionada:\n              </h4>\n              <div className=\"flex flex-col gap-3\">\n                {/* Veículos principais */}\n                <div className=\"flex flex-wrap gap-2\">\n                  <div className=\"text-xs font-medium text-gray-600 mr-1\">\n                    Veículos principais:\n                  </div>\n                  {form.watch(\"tractorUnitId\") && (\n                    <div className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">\n                        Unidade Principal:\n                      </span>{\" \"}\n                      {tractorUnits.find(\n                        (v) => v.id === form.watch(\"tractorUnitId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"firstTrailerId\") && (\n                    <div className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">1ª Carreta:</span>{\" \"}\n                      {semiTrailers.find(\n                        (v) => v.id === form.watch(\"firstTrailerId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"dollyId\") && (\n                    <div className=\"text-xs bg-amber-100 text-amber-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">Dolly:</span>{\" \"}\n                      {dollys.find((v) => v.id === form.watch(\"dollyId\"))\n                        ?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"secondTrailerId\") && (\n                    <div className=\"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">2ª Carreta:</span>{\" \"}\n                      {semiTrailers.find(\n                        (v) => v.id === form.watch(\"secondTrailerId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"flatbedId\") && (\n                    <div className=\"text-xs bg-red-100 text-red-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">Prancha:</span>{\" \"}\n                      {flatbeds.find((v) => v.id === form.watch(\"flatbedId\"))\n                        ?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                </div>\n\n                {/* Placas adicionais */}\n                {form.watch(\"additionalPlates\") &&\n                  form.watch(\"additionalPlates\").length > 0 && (\n                    <div className=\"flex flex-col\">\n                      <div className=\"text-xs font-medium text-gray-600 mb-1\">\n                        Placas adicionais:\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {form.watch(\"additionalPlates\").map(\n                          (plate, index) =>\n                            plate && (\n                              <div\n                                key={index}\n                                className=\"text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-md flex items-center\"\n                              >\n                                <span className=\"font-medium mr-1\">\n                                  {index + 1}:\n                                </span>{\" \"}\n                                {plate}\n                              </div>\n                            ),\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                {/* Total de veículos */}\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Total:{\" \"}\n                  {[\n                    form.watch(\"tractorUnitId\") ? 1 : 0,\n                    form.watch(\"firstTrailerId\") ? 1 : 0,\n                    form.watch(\"dollyId\") ? 1 : 0,\n                    form.watch(\"secondTrailerId\") ? 1 : 0,\n                    form.watch(\"flatbedId\") ? 1 : 0,\n                    form.watch(\"additionalPlates\")\n                      ? form.watch(\"additionalPlates\").filter((p) => p).length\n                      : 0,\n                  ].reduce((a, b) => a + b, 0)}{\" \"}\n                  veículos\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Dynamic fields for Prancha */}\n        {licenseType === \"flatbed\" && (\n          <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n              <VehicleTypeImage type=\"flatbed\" className=\"mr-2\" iconSize={32} />\n              Composição Principal da Prancha\n            </h3>\n\n            {/* Unidade Tratora - Esta é a unidade principal que desbloqueia a linha de frente */}\n            <div className=\"mb-6\">\n              <FormField\n                control={form.control}\n                name=\"tractorUnitId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-medium\">\n                      Unidade Tratora (Cavalo Mecânico)\n                    </FormLabel>\n                    <FormControl>\n                      <PaginatedVehicleSelector\n                        vehicleType=\"tractor_unit\"\n                        value={field.value}\n                        onSelect={(vehicleId) => {\n                          field.onChange(vehicleId);\n                          if (vehicleId) {\n                            handleVehicleSelection(vehicleId, 'tractorUnitId');\n                          }\n                        }}\n                        placeholder=\"Digite a placa ou selecione a unidade tratora\"\n                        disabled={isLoadingVehicles}\n                        className=\"h-10 bg-blue-50 border-blue-200\"\n                      />\n                    </FormControl>\n                    <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                      Esta é a unidade principal que irá puxar o conjunto\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Linha de Frente - Com destaque visual como componente principal */}\n            <div className=\"border border-red-300 rounded-md p-4 bg-red-50 mb-6\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-4 w-4 mr-1 text-red-600\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                  <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n                  <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n                </svg>\n                Linha de Frente (Componente Principal)\n              </h4>\n\n              <FormField\n                control={form.control}\n                name=\"flatbedId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-medium\">Prancha</FormLabel>\n                    <FormControl>\n                      <PaginatedVehicleSelector\n                        vehicleType=\"flatbed\"\n                        value={field.value}\n                        onSelect={(vehicleId) => {\n                          field.onChange(vehicleId);\n                        }}\n                        placeholder=\"Digite a placa ou selecione a prancha\"\n                        disabled={isLoadingVehicles}\n                        className=\"h-10 bg-red-50 border-red-200\"\n                      />\n                    </FormControl>\n                    <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                      Veículo para transporte de cargas excepcionais\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Resumo da composição */}\n            <div className=\"bg-gray-50 p-3 rounded-md border border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n                Composição selecionada:\n              </h4>\n              <div className=\"flex flex-col gap-3\">\n                {/* Veículos principais */}\n                <div className=\"flex flex-wrap gap-2\">\n                  <div className=\"text-xs font-medium text-gray-600 mr-1\">\n                    Veículos principais:\n                  </div>\n                  {form.watch(\"tractorUnitId\") && (\n                    <div className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">\n                        Unidade Principal:\n                      </span>{\" \"}\n                      {tractorUnits.find(\n                        (v) => v.id === form.watch(\"tractorUnitId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"flatbedId\") && (\n                    <div className=\"text-xs bg-red-100 text-red-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">Prancha:</span>{\" \"}\n                      {flatbeds.find((v) => v.id === form.watch(\"flatbedId\"))\n                        ?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                </div>\n\n                {/* Placas adicionais */}\n                {form.watch(\"additionalPlates\") &&\n                  form.watch(\"additionalPlates\").length > 0 && (\n                    <div className=\"flex flex-col\">\n                      <div className=\"text-xs font-medium text-gray-600 mb-1\">\n                        Placas adicionais:\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {form.watch(\"additionalPlates\").map(\n                          (plate, index) =>\n                            plate && (\n                              <div\n                                key={index}\n                                className=\"text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-md flex items-center\"\n                              >\n                                <span className=\"font-medium mr-1\">\n                                  {index + 1}:\n                                </span>{\" \"}\n                                {plate}\n                              </div>\n                            ),\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                {/* Total de veículos */}\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Total:{\" \"}\n                  {[\n                    form.watch(\"tractorUnitId\") ? 1 : 0,\n                    form.watch(\"flatbedId\") ? 1 : 0,\n                    form.watch(\"additionalPlates\")\n                      ? form.watch(\"additionalPlates\").filter((p) => p).length\n                      : 0,\n                  ].reduce((a, b) => a + b, 0)}{\" \"}\n                  veículos\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Dynamic fields for Romeo and Juliet */}\n        {licenseType === \"romeo_and_juliet\" && (\n          <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n              <VehicleTypeImage\n                type=\"romeo_and_juliet\"\n                className=\"mr-2\"\n                iconSize={32}\n              />\n              Composição Principal do Romeu e Julieta\n            </h3>\n\n            <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n              <p className=\"text-sm text-blue-800 flex items-center\">\n                <Check className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                Para o conjunto \"Romeu e Julieta\", a unidade tratora deve ser do\n                tipo \"Caminhão\" e a 1ª carreta deve ser do tipo \"Reboque\".\n              </p>\n            </div>\n\n            {/* Unidade Tratora - Esta é a unidade principal que desbloqueia a linha de frente */}\n            <div className=\"mb-6\">\n              <FormField\n                control={form.control}\n                name=\"tractorUnitId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-medium\">Caminhão</FormLabel>\n                    <FormControl>\n                      <PaginatedVehicleSelector\n                        vehicleType=\"truck\"\n                        value={field.value}\n                        onSelect={(vehicleId) => {\n                          field.onChange(vehicleId);\n                        }}\n                        placeholder=\"Digite a placa ou selecione o caminhão\"\n                        disabled={isLoadingVehicles}\n                        className=\"h-10 bg-blue-50 border-blue-200\"\n                      />\n                    </FormControl>\n                    <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                      Unidade principal do Romeu e Julieta\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Linha de Frente - Com destaque visual como componente principal */}\n            <div className=\"border border-red-300 rounded-md p-4 bg-red-50 mb-6\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-4 w-4 mr-1 text-red-600\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                  <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n                  <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n                </svg>\n                Reboque (Componente Principal)\n              </h4>\n\n              <FormField\n                control={form.control}\n                name=\"firstTrailerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-medium\">Reboque</FormLabel>\n                    <FormControl>\n                      <PaginatedVehicleSelector\n                        vehicleType=\"trailer\"\n                        value={field.value}\n                        onSelect={(vehicleId) => {\n                          field.onChange(vehicleId);\n                        }}\n                        placeholder=\"Digite a placa ou selecione o reboque\"\n                        disabled={isLoadingVehicles}\n                        className=\"h-10 bg-amber-50 border-amber-200\"\n                      />\n                    </FormControl>\n                    <FormDescription className=\"text-xs text-muted-foreground mt-1\">\n                      Componente principal do Romeu e Julieta\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Resumo da composição */}\n            <div className=\"bg-gray-50 p-3 rounded-md border border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n                Composição selecionada:\n              </h4>\n              <div className=\"flex flex-col gap-3\">\n                {/* Veículos principais */}\n                <div className=\"flex flex-wrap gap-2\">\n                  <div className=\"text-xs font-medium text-gray-600 mr-1\">\n                    Veículos principais:\n                  </div>\n                  {form.watch(\"tractorUnitId\") && (\n                    <div className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">Caminhão:</span>{\" \"}\n                      {trucks.find((v) => v.id === form.watch(\"tractorUnitId\"))\n                        ?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                  {form.watch(\"firstTrailerId\") && (\n                    <div className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-md flex items-center\">\n                      <Truck className=\"h-3 w-3 mr-1\" />\n                      <span className=\"font-medium\">Reboque:</span>{\" \"}\n                      {trailers.find(\n                        (v) => v.id === form.watch(\"firstTrailerId\"),\n                      )?.plate || \"Selecionado\"}\n                    </div>\n                  )}\n                </div>\n\n                {/* Placas adicionais */}\n                {form.watch(\"additionalPlates\") &&\n                  form.watch(\"additionalPlates\").length > 0 && (\n                    <div className=\"flex flex-col\">\n                      <div className=\"text-xs font-medium text-gray-600 mb-1\">\n                        Placas adicionais:\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {form.watch(\"additionalPlates\").map(\n                          (plate, index) =>\n                            plate && (\n                              <div\n                                key={index}\n                                className=\"text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-md flex items-center\"\n                              >\n                                <span className=\"font-medium mr-1\">\n                                  {index + 1}:\n                                </span>{\" \"}\n                                {plate}\n                              </div>\n                            ),\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                {/* Total de veículos */}\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Total:{\" \"}\n                  {[\n                    form.watch(\"tractorUnitId\") ? 1 : 0,\n                    form.watch(\"firstTrailerId\") ? 1 : 0,\n                    form.watch(\"additionalPlates\")\n                      ? form.watch(\"additionalPlates\").filter((p) => p).length\n                      : 0,\n                  ].reduce((a, b) => a + b, 0)}{\" \"}\n                  veículos\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n          <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-5 w-5 mr-2 text-gray-600\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <rect x=\"2\" y=\"6\" width=\"20\" height=\"12\" rx=\"2\" ry=\"2\"></rect>\n              <path d=\"M2 13h20\"></path>\n            </svg>\n            Placas Adicionais (Veículos Secundários)\n          </h3>\n\n          <div className=\"mb-4 p-3 bg-gray-50 border border-gray-200 rounded-md\">\n            <div className=\"flex items-start\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5 mr-2 text-gray-500 mt-0.5 flex-shrink-0\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                <path d=\"M12 16v-4\"></path>\n                <path d=\"M12 8h.01\"></path>\n              </svg>\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-1\">\n                  Veículos Complementares\n                </h4>\n                <p className=\"text-xs text-gray-600\">\n                  Nesta seção você pode adicionar placas de veículos que fazem\n                  parte da composição mas não são considerados parte da linha de\n                  frente. Estes veículos complementam o conjunto principal\n                  selecionado acima.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"mt-3 flex flex-wrap gap-2\">\n              {form.watch(\"tractorUnitId\") && (\n                <div className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-md flex items-center\">\n                  <Truck className=\"h-3 w-3 mr-1\" />\n                  Linha de frente já inclui:{\" \"}\n                  {tractorUnits.find(\n                    (v) => v.id === form.watch(\"tractorUnitId\"),\n                  )?.plate || \"Unidade tratora\"}\n                </div>\n              )}\n              {form.watch(\"firstTrailerId\") && (\n                <div className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-md\">\n                  1ª Carreta já incluída\n                </div>\n              )}\n              {form.watch(\"secondTrailerId\") && (\n                <div className=\"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-md\">\n                  2ª Carreta já incluída\n                </div>\n              )}\n              {form.watch(\"dollyId\") && (\n                <div className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-md\">\n                  Dolly já incluído\n                </div>\n              )}\n              {form.watch(\"flatbedId\") && (\n                <div className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-md\">\n                  Prancha já incluída\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"text-sm text-gray-700 mb-3 font-medium\">\n            <span className=\"flex items-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-4 w-4 mr-1 text-gray-600\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <polyline points=\"9 11 12 14 22 4\"></polyline>\n                <path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path>\n              </svg>\n              Gerenciamento de Placas Adicionais\n            </span>\n          </div>\n\n          {/* Componente de campo de placas adicionais com autopreenchimento */}\n          <div className=\"border-dashed border-2 border-gray-300 rounded-md p-4 bg-gray-50\">\n            <CampoPlacaAdicional\n              form={form}\n              vehicles={vehicles}\n              isLoadingVehicles={isLoadingVehicles}\n              licenseType={licenseType}\n            />\n          </div>\n\n          {/* Total de veículos */}\n          <div className=\"mt-4 flex justify-between items-center text-sm\">\n            <span className=\"text-gray-600\">\n              Tipo de conjunto:{\" \"}\n              <span className=\"font-medium\">\n                {licenseType === \"bitrain_6_axles\"\n                  ? \"Bitrem 6 Eixos\"\n                  : licenseType === \"bitrain_7_axles\"\n                    ? \"Bitrem 7 Eixos\"\n                    : licenseType === \"bitrain_9_axles\"\n                      ? \"Bitrem 9 Eixos\"\n                      : licenseType === \"roadtrain_9_axles\"\n                        ? \"Rodotrem 9 Eixos\"\n                        : licenseType === \"flatbed\"\n                          ? \"Prancha\"\n                          : licenseType === \"romeo_and_juliet\"\n                            ? \"Romeu e Julieta\"\n                            : \"Outro\"}\n              </span>\n            </span>\n            <span className=\"bg-gray-100 text-gray-800 px-2.5 py-1 rounded-md flex items-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-4 w-4 mr-1 text-gray-600\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2z\"></path>\n                <path d=\"M10 22V4\"></path>\n                <path d=\"M15 4v18\"></path>\n              </svg>\n              Total de Veículos:{\" \"}\n              <span className=\"font-medium ml-1\">\n                {\n                  // Contabilizar principais + adicionais\n                  (form.watch(\"tractorUnitId\") ? 1 : 0) +\n                    (form.watch(\"firstTrailerId\") ? 1 : 0) +\n                    (form.watch(\"secondTrailerId\") ? 1 : 0) +\n                    (form.watch(\"dollyId\") ? 1 : 0) +\n                    (form.watch(\"flatbedId\") ? 1 : 0) +\n                    (form.watch(\"additionalPlates\")?.length || 0)\n                }\n              </span>\n            </span>\n          </div>\n        </div>\n\n        <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n          <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n            <FileUp className=\"mr-2 h-5 w-5\" />\n            Documentos\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n            <div className=\"bg-blue-50 p-4 rounded-md border border-blue-100\">\n              <h4 className=\"text-blue-700 font-medium mb-2 flex items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"mr-2\"\n                >\n                  <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                  <polyline points=\"14 2 14 8 20 8\" />\n                </svg>\n                Documentação dos Veículos\n              </h4>\n              <p className=\"text-sm text-blue-600 mb-3\">\n                Os CRLVs dos veículos serão vinculados automaticamente a partir\n                do cadastro de veículos. Caso não encontre algum veículo,\n                cadastre-o clicando no +:\n              </p>\n              <div className=\"text-xs text-gray-500\">\n                Formatos aceitos: PDF, JPG, PNG\n              </div>\n            </div>\n\n            <div className=\"bg-amber-50 p-4 rounded-md border border-amber-100\">\n              <h4 className=\"text-amber-700 font-medium mb-2 flex items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"mr-2\"\n                >\n                  <path d=\"M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0z\" />\n                </svg>\n                Tempo de Processamento\n              </h4>\n              <p className=\"text-sm text-amber-600 mb-3\">\n                Após o envio, a solicitação passará por análise do órgão\n                competente. O prazo médio para análise varia de acordo com cada\n                estado.\n              </p>\n              <div className=\"text-xs text-gray-500\">\n                Acompanhe o status na página \"Acompanhar Licença\"\n              </div>\n            </div>\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"comments\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-base font-medium\">\n                  Observações\n                </FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Adicione observações relevantes para este pedido de licença...\"\n                    className=\"min-h-[120px] resize-y\"\n                    value={(field.value as string) || \"\"}\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                    name={field.name}\n                    ref={field.ref}\n                  />\n                </FormControl>\n                <FormDescription>\n                  Inclua quaisquer informações adicionais importantes para a\n                  análise desta solicitação\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"border border-gray-200 rounded-lg p-5 shadow-sm\">\n          <h3 className=\"font-semibold text-gray-800 text-lg mb-4 flex items-center\">\n            Estados Solicitados\n          </h3>\n\n          <FormField\n            control={form.control}\n            name=\"states\"\n            render={() => (\n              <FormItem>\n                <div className=\"mb-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel className=\"text-base font-medium\">\n                      Selecione os estados para emissão de licença\n                    </FormLabel>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={validateAllStatesManual}\n                        disabled={preventiveValidationRunning}\n                        className=\"flex items-center gap-2 h-8 text-xs\"\n                      >\n                        {preventiveValidationRunning ? (\n                          <>\n                            <div className=\"animate-spin h-3 w-3 border-2 border-gray-300 border-t-blue-600 rounded-full\"></div>\n                            Validando...\n                          </>\n                        ) : (\n                          <>\n                            <Shield className=\"h-3 w-3\" />\n                            Verificar Estados\n                          </>\n                        )}\n                      </Button>\n                      <FormField\n                      control={form.control}\n                      name=\"states\"\n                      render={({ field }) => {\n                        const selectedStates = field.value || [];\n                        const availableStates = brazilianStates.filter(state => \n                          !blockedStates[state.code] && stateValidationStatus[state.code] !== 'blocked'\n                        );\n                        const allAvailableSelected = availableStates.length > 0 && \n                          availableStates.every(state => selectedStates.includes(state.code));\n                        const hasAnySelected = selectedStates.length > 0;\n                        return (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"h-8 text-xs flex gap-1 items-center\"\n                            onClick={async () => {\n                              if (hasAnySelected) {\n                                // Desmarcar todos os estados selecionados\n                                console.log('[UNSELECT ALL] Desmarcando todos os estados');\n                                field.onChange([]);\n                              } else {\n                                // Selecionar apenas estados disponíveis (não bloqueados)\n                                console.log('[SELECT ALL] Selecionando todos os estados disponíveis');\n                                const validStates = availableStates.map(state => state.code);\n                                console.log(`[SELECT ALL] Estados disponíveis selecionados:`, validStates);\n                                field.onChange(validStates);\n                              }\n                            }}\n                          >\n                            {hasAnySelected ? (\n                              <>\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  width=\"14\"\n                                  height=\"14\"\n                                  viewBox=\"0 0 24 24\"\n                                  fill=\"none\"\n                                  stroke=\"currentColor\"\n                                  strokeWidth=\"2\"\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                >\n                                  <rect\n                                    x=\"3\"\n                                    y=\"3\"\n                                    width=\"18\"\n                                    height=\"18\"\n                                    rx=\"2\"\n                                    ry=\"2\"\n                                  ></rect>\n                                </svg>\n                                Desmarcar Todos\n                              </>\n                            ) : (\n                              <>\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  width=\"14\"\n                                  height=\"14\"\n                                  viewBox=\"0 0 24 24\"\n                                  fill=\"none\"\n                                  stroke=\"currentColor\"\n                                  strokeWidth=\"2\"\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                >\n                                  <polyline points=\"9 11 12 14 22 4\"></polyline>\n                                  <path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path>\n                                </svg>\n                                Selecionar Todos\n                              </>\n                            )}\n                          </Button>\n                        );\n                      }}\n                    />\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground mt-1 mb-3\">\n                    Escolha um ou mais estados onde a licença será utilizada\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-3 sm:grid-cols-5 md:grid-cols-6 lg:grid-cols-8 gap-2\">\n                  {brazilianStates.map((state) => (\n                    <FormField\n                      key={state.code}\n                      control={form.control}\n                      name=\"states\"\n                      render={({ field }) => {\n                        const isSelected = (field.value || []).includes(\n                          state.code,\n                        );\n                        return (\n                          <FormItem key={state.code} className=\"m-0 p-0\">\n                            <FormControl>\n                              <div\n                                className={`cursor-pointer flex flex-col items-center justify-center p-2 rounded-md border ${\n                                  isSelected\n                                    ? \"bg-blue-50 border-blue-300 text-blue-700 font-medium\"\n                                    : stateValidationStatus[state.code] === 'blocked' || blockedStates[state.code]\n                                      ? \"bg-yellow-100 border-yellow-400 cursor-not-allowed\"\n                                      : stateValidationStatus[state.code] === 'loading'\n                                        ? \"bg-gray-100 border-gray-300 opacity-60 cursor-not-allowed\"\n                                        : validatingState === state.code\n                                          ? \"bg-gray-100 border-gray-300 opacity-60 cursor-not-allowed\"\n                                          : stateValidationStatus[state.code] === 'valid'\n                                            ? \"bg-green-50 border-green-200 hover:bg-green-100\"\n                                            : \"border-gray-200 hover:bg-gray-50\"\n                                }`}\n                                onClick={async () => {\n                                  console.log(`[HANDLE STATE CLICK] Clicando em ${state.code}, validating: ${validatingState}`);\n                                  \n                                  // Prevenir cliques múltiplos ou em estados já validando\n                                  if (validatingState) {\n                                    console.log(`[HANDLE STATE CLICK] Já validando ${validatingState} - ignorando clique em ${state.code}`);\n                                    return;\n                                  }\n                                  \n                                  // Verificar se estado já está bloqueado\n                                  if (blockedStates[state.code]) {\n                                    console.log(`[HANDLE STATE CLICK] Estado ${state.code} já bloqueado - ignorando clique`);\n                                    return;\n                                  }\n                                  \n                                  if (isSelected) {\n                                    console.log(`[HANDLE STATE CLICK] Removendo estado ${state.code}`);\n                                    // Limpar estado dos bloqueados se estava lá\n                                    setBlockedStates(prev => {\n                                      const updated = { ...prev };\n                                      delete updated[state.code];\n                                      return updated;\n                                    });\n                                    field.onChange(\n                                      (field.value || []).filter(\n                                        (value) => value !== state.code,\n                                      ),\n                                    );\n                                  } else {\n                                    console.log(`[HANDLE STATE CLICK] Adicionando estado ${state.code} - iniciando validação`);\n                                    const isBloqueado = await validateState(state.code);\n                                    \n                                    // Verificação dupla após validação para evitar condição de corrida\n                                    if (!isBloqueado && !blockedStates[state.code]) {\n                                      console.log(`[HANDLE STATE CLICK] Estado ${state.code} liberado - adicionando`);\n                                      field.onChange([\n                                        ...(field.value || []),\n                                        state.code,\n                                      ]);\n                                    } else {\n                                      console.log(`[HANDLE STATE CLICK] Estado ${state.code} bloqueado - não adicionando`);\n                                      // Garantir que estado bloqueado não seja adicionado\n                                      field.onChange(\n                                        (field.value || []).filter(\n                                          (value) => value !== state.code,\n                                        )\n                                      );\n                                    }\n                                  }\n                                }}\n                              >\n                                <span className=\"text-base font-medium\">\n                                  {state.code}\n                                </span>\n                                <span className=\"text-xs mt-1 text-center hidden md:block text-gray-500\">\n                                  {state.name}\n                                </span>\n                                {/* Mostrar status da validação como na imagem */}\n                                {stateValidationStatus[state.code] === 'loading' && (\n                                  <span className=\"text-xs mt-1 text-center text-gray-500\">\n                                    validando...\n                                  </span>\n                                )}\n                                {validatingState === state.code && (\n                                  <span className=\"text-xs mt-1 text-center text-gray-500\">\n                                    verificando...\n                                  </span>\n                                )}\n                                {(stateValidationStatus[state.code] === 'blocked' || blockedStates[state.code]) && (\n                                  <div className=\"text-xs mt-1 text-center\">\n                                    <div className=\"text-orange-600 font-medium\">licença vigente</div>\n                                    {(blockedStates[state.code]?.data_validade || blockedStates[state.code]?.validade) && (\n                                      <div className=\"text-orange-500 text-xs\">\n                                        até {new Date(blockedStates[state.code]?.data_validade || blockedStates[state.code]?.validade).toLocaleDateString('pt-BR')}\n                                      </div>\n                                    )}\n                                  </div>\n                                )}\n                                {stateValidationStatus[state.code] === 'valid' && !blockedStates[state.code] && (\n                                  <span className=\"text-xs mt-1 text-center text-green-600 font-medium\">\n                                    disponível\n                                  </span>\n                                )}\n                              </div>\n                            </FormControl>\n                          </FormItem>\n                        );\n                      }}\n                    />\n                  ))}\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row justify-end gap-4 sm:space-x-4 pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"w-full sm:w-auto order-3 sm:order-1\"\n          >\n            Cancelar\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={handleSaveDraft}\n            disabled={isProcessing}\n            className=\"w-full sm:w-auto order-2\"\n          >\n            {saveAsDraftMutation.isPending && (\n              <LoaderCircle className=\"mr-2 h-4 w-4 animate-spin\" />\n            )}\n            Salvar Rascunho\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={handleSubmitRequest}\n            disabled={isProcessing}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white w-full sm:w-auto order-1 sm:order-3\"\n          >\n            {submitRequestMutation.isPending && (\n              <LoaderCircle className=\"mr-2 h-4 w-4 animate-spin\" />\n            )}\n            Enviar Pedido\n          </Button>\n        </div>\n      </form>\n\n      {/* Modal de confirmação para veículos de terceiros na seleção */}\n      <AlertDialog open={showThirdPartyConfirmation} onOpenChange={setShowThirdPartyConfirmation}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Veículo em nome de Terceiro</AlertDialogTitle>\n            <AlertDialogDescription>\n              O veículo selecionado está registrado em nome de terceiro. Deseja continuar com esta seleção?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={cancelThirdPartyVehicle}>\n              Não\n            </AlertDialogCancel>\n            <AlertDialogAction onClick={confirmThirdPartyVehicle}>\n              Sim\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Modal de confirmação para envio com veículos de terceiros */}\n      <AlertDialog open={showSubmitConfirmation} onOpenChange={setShowSubmitConfirmation}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Envio com Veículos de Terceiros</AlertDialogTitle>\n            <AlertDialogDescription asChild>\n              <div>\n                O pedido contém os seguintes veículos em nome de terceiros:\n                <div className=\"mt-2 p-3 bg-orange-50 border border-orange-200 rounded-md\">\n                  {thirdPartyVehiclesInSubmit.map((vehicle, index) => (\n                    <div key={index} className=\"text-sm font-medium text-orange-800\">\n                      • {vehicle}\n                    </div>\n                  ))}\n                </div>\n                <div className=\"mt-3\">\n                  Deseja continuar com o envio da solicitação?\n                </div>\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={cancelSubmitWithThirdParty}>\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction onClick={confirmSubmitWithThirdParty}>\n              Confirmar Envio\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Form>\n  );\n}\n","size_bytes":138926},"client/src/components/ui/intelligent-vehicle-selector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Vehicle, LicenseType } from \"@shared/schema\";\nimport { PaginatedVehicleSelector } from \"@/components/ui/paginated-vehicle-selector\";\nimport { \n  validateVehicleForPosition, \n  filterVehiclesForPosition,\n  getAxleSpecificationSummary,\n  AXLE_CONFIGURATIONS\n} from \"@/utils/vehicle-axle-validation\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Info, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface IntelligentVehicleSelectorProps {\n  value?: number;\n  onSelect: (vehicleId: number | undefined, plate?: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  allowManualEntry?: boolean;\n  className?: string;\n  label?: string;\n  onCreateNew?: () => void;\n  \n  // Propriedades específicas para validação de eixos\n  licenseType: LicenseType;\n  position: 'tractor' | 'firstTrailer' | 'secondTrailer' | 'dolly';\n  selectedVehicle?: Vehicle | null;\n  \n  // Para validação da composição completa\n  tractorVehicle?: Vehicle | null;\n  firstTrailerVehicle?: Vehicle | null;\n  secondTrailerVehicle?: Vehicle | null;\n  dollyVehicle?: Vehicle | null;\n}\n\nexport function IntelligentVehicleSelector({\n  value,\n  onSelect,\n  placeholder,\n  disabled = false,\n  allowManualEntry = false,\n  className,\n  label,\n  onCreateNew,\n  licenseType,\n  position,\n  selectedVehicle,\n  tractorVehicle,\n  firstTrailerVehicle,\n  secondTrailerVehicle,\n  dollyVehicle,\n}: IntelligentVehicleSelectorProps) {\n  const [validationResult, setValidationResult] = useState<{\n    isValid: boolean;\n    error?: string;\n    warning?: string;\n  } | null>(null);\n\n  const config = AXLE_CONFIGURATIONS[licenseType];\n  \n  // Determinar o tipo de veículo e quantidade de eixos esperados\n  const getExpectedSpecs = () => {\n    switch (position) {\n      case 'tractor':\n        return { \n          axles: config.tractorAxles, \n          type: 'tractor_unit',\n          typeLabel: 'Unidade Tratora' \n        };\n      case 'firstTrailer':\n        return { \n          axles: config.firstTrailerAxles, \n          type: 'semi_trailer',\n          typeLabel: 'Semirreboque' \n        };\n      case 'secondTrailer':\n        return { \n          axles: config.secondTrailerAxles, \n          type: 'semi_trailer',\n          typeLabel: 'Semirreboque' \n        };\n      case 'dolly':\n        return { \n          axles: config.dollyAxles || 1, \n          type: 'dolly',\n          typeLabel: 'Dolly' \n        };\n      default:\n        return { axles: 0, type: '', typeLabel: '' };\n    }\n  };\n\n  const expectedSpecs = getExpectedSpecs();\n\n  // Validar veículo selecionado quando mudar\n  useEffect(() => {\n    if (selectedVehicle) {\n      const result = validateVehicleForPosition(selectedVehicle, position, licenseType);\n      setValidationResult(result);\n    } else {\n      setValidationResult(null);\n    }\n  }, [selectedVehicle, position, licenseType]);\n\n  // Verificar se esta posição é obrigatória ou opcional\n  const isPositionRequired = () => {\n    switch (position) {\n      case 'tractor':\n      case 'firstTrailer':\n        return true;\n      case 'secondTrailer':\n        return expectedSpecs.axles > 0; // Só é obrigatório se for maior que 0 eixos\n      case 'dolly':\n        return config.requiresDolly;\n      default:\n        return false;\n    }\n  };\n\n  const isRequired = isPositionRequired();\n\n  // Mensagem de ajuda baseada na configuração\n  const getHelpMessage = () => {\n    if (!isRequired) {\n      return `Opcional para ${getLicenseTypeLabel(licenseType)}`;\n    }\n    \n    return `Necessário: ${expectedSpecs.typeLabel} com ${expectedSpecs.axles} eixos`;\n  };\n\n  // Placeholder dinâmico baseado na configuração\n  const dynamicPlaceholder = placeholder || \n    `Selecione ${expectedSpecs.typeLabel.toLowerCase()} (${expectedSpecs.axles} eixos)...`;\n\n  return (\n    <div className=\"space-y-2\">\n      {/* Seletor de veículo com filtro automático */}\n      <PaginatedVehicleSelector\n        value={value}\n        onSelect={onSelect}\n        placeholder={dynamicPlaceholder}\n        disabled={disabled}\n        allowManualEntry={allowManualEntry}\n        className={cn(\n          className,\n          validationResult && !validationResult.isValid && \"border-red-500\"\n        )}\n        label={label}\n        onCreateNew={onCreateNew}\n        vehicleType={expectedSpecs.type as any}\n        axleFilter={expectedSpecs.axles > 0 ? expectedSpecs.axles : undefined} // FILTRO: Apenas se houver restrição específica de eixos\n      />\n\n      {/* Mensagem de ajuda */}\n      <div className=\"text-xs text-gray-500\">\n        {getHelpMessage()}\n      </div>\n\n      {/* Resultado da validação */}\n      {validationResult && !validationResult.isValid && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-700 text-sm\">\n            {validationResult.error}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Aviso quando a posição não é obrigatória */}\n      {!isRequired && (\n        <Alert className=\"border-blue-200 bg-blue-50\">\n          <Info className=\"h-4 w-4 text-blue-600\" />\n          <AlertDescription className=\"text-blue-700 text-sm\">\n            Esta posição é opcional para {getLicenseTypeLabel(licenseType)}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Confirmação quando válido */}\n      {validationResult && validationResult.isValid && selectedVehicle && (\n        <Alert className=\"border-green-200 bg-green-50\">\n          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          <AlertDescription className=\"text-green-700 text-sm\">\n            ✓ {selectedVehicle.plate} - {selectedVehicle.axleCount} eixos - Compatível\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}\n\n// Helper function\nfunction getLicenseTypeLabel(type: LicenseType): string {\n  const labels: Record<LicenseType, string> = {\n    'bitrain_9_axles': 'Bitrem 9 eixos',\n    'roadtrain_9_axles': 'Rodotrem 9 eixos',\n    'bitrain_7_axles': 'Bitrem 7 eixos',\n    'bitrain_6_axles': 'Bitrem 6 eixos',\n    'flatbed': 'Prancha',\n    'romeo_and_juliet': 'Romeu e Julieta'\n  };\n  return labels[type] || type;\n}","size_bytes":6280},"client/src/utils/vehicle-axle-validation.ts":{"content":"import { LicenseType, Vehicle } from \"@shared/schema\";\nimport { VehicleSetType } from \"@shared/vehicle-set-types\";\n\nexport interface AxleConfiguration {\n  tractorAxles: number;\n  firstTrailerAxles: number;\n  secondTrailerAxles: number;\n  dollyAxles?: number;\n  totalAxles: number;\n  requiresDolly: boolean;\n  isFlexible?: boolean;\n}\n\n// Configurações de eixos por tipo de licença (compatibilidade com tipos padrão)\nexport const AXLE_CONFIGURATIONS: Record<LicenseType, AxleConfiguration> = {\n  \"bitrain_9_axles\": {\n    tractorAxles: 3,\n    firstTrailerAxles: 3,\n    secondTrailerAxles: 3,\n    totalAxles: 9,\n    requiresDolly: false\n  },\n  \"roadtrain_9_axles\": {\n    tractorAxles: 3,\n    firstTrailerAxles: 2,\n    secondTrailerAxles: 2,\n    dollyAxles: 2,\n    totalAxles: 9,\n    requiresDolly: true\n  },\n  \"bitrain_7_axles\": {\n    tractorAxles: 3,\n    firstTrailerAxles: 2,\n    secondTrailerAxles: 2,\n    totalAxles: 7,\n    requiresDolly: false\n  },\n  \"bitrain_6_axles\": {\n    tractorAxles: 2,\n    firstTrailerAxles: 2,\n    secondTrailerAxles: 2,\n    totalAxles: 6,\n    requiresDolly: false\n  },\n  \"flatbed\": {\n    tractorAxles: 0, // Flexível - qualquer cavalo\n    firstTrailerAxles: 0, // Flexível - qualquer prancha\n    secondTrailerAxles: 0,\n    totalAxles: 0, // Sem restrição específica\n    requiresDolly: false\n  },\n  \"romeo_and_juliet\": {\n    tractorAxles: 0, // Flexível - qualquer cavalo\n    firstTrailerAxles: 0, // Flexível - qualquer semirreboque\n    secondTrailerAxles: 0,\n    totalAxles: 0, // Sem restrição específica\n    requiresDolly: false\n  }\n};\n\nexport interface VehicleValidationResult {\n  isValid: boolean;\n  error?: string;\n  warning?: string;\n}\n\n// Função para buscar configuração de eixos (dinâmica ou estática)\nexport function getAxleConfiguration(licenseType: string, vehicleSetTypes?: VehicleSetType[]): AxleConfiguration | null {\n  // Primeiro, tentar buscar nos tipos dinâmicos\n  if (vehicleSetTypes) {\n    const dynamicType = vehicleSetTypes.find(type => type.name === licenseType);\n    if (dynamicType) {\n      return {\n        tractorAxles: dynamicType.axleConfiguration.tractorAxles,\n        firstTrailerAxles: dynamicType.axleConfiguration.firstTrailerAxles,\n        secondTrailerAxles: dynamicType.axleConfiguration.secondTrailerAxles,\n        dollyAxles: dynamicType.axleConfiguration.dollyAxles,\n        totalAxles: dynamicType.axleConfiguration.totalAxles,\n        requiresDolly: dynamicType.axleConfiguration.requiresDolly,\n        isFlexible: dynamicType.axleConfiguration.isFlexible,\n      };\n    }\n  }\n  \n  // Fallback para configurações estáticas (tipos padrão)\n  return AXLE_CONFIGURATIONS[licenseType as LicenseType] || null;\n}\n\n// Validar se um veículo é compatível com uma posição específica na composição\nexport function validateVehicleForPosition(\n  vehicle: Vehicle,\n  position: 'tractor' | 'firstTrailer' | 'secondTrailer' | 'dolly',\n  licenseType: LicenseType | string,\n  vehicleSetTypes?: VehicleSetType[]\n): VehicleValidationResult {\n  const config = getAxleConfiguration(licenseType, vehicleSetTypes);\n  \n  if (!config) {\n    return {\n      isValid: false,\n      error: \"Configuração de tipo de licença não encontrada\"\n    };\n  }\n  \n  if (!vehicle.axleCount) {\n    return {\n      isValid: false,\n      error: \"Veículo não possui informação de quantidade de eixos cadastrada\"\n    };\n  }\n\n  let expectedAxles: number;\n  let expectedType: string;\n  \n  switch (position) {\n    case 'tractor':\n      expectedAxles = config.tractorAxles;\n      expectedType = 'tractor_unit';\n      break;\n    case 'firstTrailer':\n      expectedAxles = config.firstTrailerAxles;\n      expectedType = 'semi_trailer';\n      break;\n    case 'secondTrailer':\n      expectedAxles = config.secondTrailerAxles;\n      expectedType = 'semi_trailer';\n      break;\n    case 'dolly':\n      expectedAxles = config.dollyAxles || 2;\n      expectedType = 'dolly';\n      break;\n    default:\n      return { isValid: false, error: \"Posição inválida\" };\n  }\n\n  // Verificar tipo de veículo\n  if (vehicle.type !== expectedType) {\n    return {\n      isValid: false,\n      error: `Este veículo é do tipo \"${getVehicleTypeLabel(vehicle.type)}\", mas para esta posição é necessário \"${getVehicleTypeLabel(expectedType)}\"`\n    };\n  }\n\n  // REGRAS ESPECÍFICAS CRÍTICAS POR TIPO DE LICENÇA\n  \n  // TIPOS FLEXÍVEIS: SEM restrições de eixos \n  if (config?.isFlexible || licenseType === 'flatbed' || licenseType === 'romeo_and_juliet') {\n    // Para tipos flexíveis, apenas verificar o tipo de veículo, não os eixos\n    return { isValid: true };\n  }\n  \n  // BITREM 7 EIXOS: Apenas semirreboques de 2 eixos\n  if (licenseType === 'bitrain_7_axles' && (position === 'firstTrailer' || position === 'secondTrailer')) {\n    if (vehicle.axleCount !== 2) {\n      return {\n        isValid: false,\n        error: `⚠️ BITREM 7 EIXOS: Este semirreboque possui ${vehicle.axleCount} eixos. Para Bitrem 7 eixos são aceitos APENAS semirreboques de 2 eixos.`\n      };\n    }\n  }\n  \n  // BITREM 6 EIXOS: Apenas semirreboques de 2 eixos\n  if (licenseType === 'bitrain_6_axles' && (position === 'firstTrailer' || position === 'secondTrailer')) {\n    if (vehicle.axleCount !== 2) {\n      return {\n        isValid: false,\n        error: `⚠️ BITREM 6 EIXOS: Este semirreboque possui ${vehicle.axleCount} eixos. Para Bitrem 6 eixos são aceitos APENAS semirreboques de 2 eixos.`\n      };\n    }\n  }\n  \n  // BITREM 9 EIXOS: Apenas semirreboques de 3 eixos\n  if (licenseType === 'bitrain_9_axles' && (position === 'firstTrailer' || position === 'secondTrailer')) {\n    if (vehicle.axleCount !== 3) {\n      return {\n        isValid: false,\n        error: `⚠️ BITREM 9 EIXOS: Este semirreboque possui ${vehicle.axleCount} eixos. Para Bitrem 9 eixos são aceitos APENAS semirreboques de 3 eixos.`\n      };\n    }\n  }\n  \n  // RODOTREM 9 EIXOS: Apenas semirreboques de 2 eixos\n  if (licenseType === 'roadtrain_9_axles' && (position === 'firstTrailer' || position === 'secondTrailer')) {\n    if (vehicle.axleCount !== 2) {\n      return {\n        isValid: false,\n        error: `⚠️ RODOTREM 9 EIXOS: Este semirreboque possui ${vehicle.axleCount} eixos. Para Rodotrem 9 eixos são aceitos APENAS semirreboques de 2 eixos.`\n      };\n    }\n  }\n  \n  // Verificar quantidade de eixos (regra geral) - pular se for 0 (flexível)\n  if (expectedAxles > 0 && vehicle.axleCount !== expectedAxles) {\n    return {\n      isValid: false,\n      error: `Este veículo possui ${vehicle.axleCount} eixos, mas para ${getLicenseTypeLabel(licenseType)} é necessário ${expectedAxles} eixos nesta posição`\n    };\n  }\n\n  return { isValid: true };\n}\n\n// Validar a composição completa\nexport function validateCompleteComposition(\n  licenseType: LicenseType | string,\n  tractor?: Vehicle,\n  firstTrailer?: Vehicle,\n  secondTrailer?: Vehicle,\n  dolly?: Vehicle,\n  vehicleSetTypes?: VehicleSetType[]\n): VehicleValidationResult {\n  const config = getAxleConfiguration(licenseType, vehicleSetTypes);\n  \n  if (!config) {\n    return {\n      isValid: false,\n      error: \"Configuração de tipo de licença não encontrada\"\n    };\n  }\n  \n  // Verificar se o dolly é obrigatório\n  if (config.requiresDolly && !dolly) {\n    return {\n      isValid: false,\n      error: `Para ${getLicenseTypeLabel(licenseType)} é obrigatório selecionar um dolly`\n    };\n  }\n\n  // Verificar se o dolly não deve ser usado\n  if (!config.requiresDolly && dolly) {\n    return {\n      isValid: false,\n      error: `Para ${getLicenseTypeLabel(licenseType)} não é necessário dolly`\n    };\n  }\n\n  // Calcular total de eixos da composição\n  let totalAxles = 0;\n  \n  if (tractor) totalAxles += tractor.axleCount || 0;\n  if (firstTrailer) totalAxles += firstTrailer.axleCount || 0;\n  if (secondTrailer) totalAxles += secondTrailer.axleCount || 0;\n  if (dolly) totalAxles += dolly.axleCount || 0;\n\n  if (totalAxles !== config.totalAxles) {\n    return {\n      isValid: false,\n      error: `A composição atual possui ${totalAxles} eixos, mas ${getLicenseTypeLabel(licenseType)} requer exatamente ${config.totalAxles} eixos`\n    };\n  }\n\n  return { isValid: true };\n}\n\n// Filtrar veículos compatíveis para uma posição específica\nexport function filterVehiclesForPosition(\n  vehicles: Vehicle[],\n  position: 'tractor' | 'firstTrailer' | 'secondTrailer' | 'dolly',\n  licenseType: LicenseType | string,\n  vehicleSetTypes?: VehicleSetType[]\n): Vehicle[] {\n  const config = getAxleConfiguration(licenseType, vehicleSetTypes);\n  \n  if (!config) {\n    return [];\n  }\n  \n  let expectedAxles: number;\n  let expectedType: string;\n  \n  switch (position) {\n    case 'tractor':\n      expectedAxles = config.tractorAxles;\n      expectedType = 'tractor_unit';\n      break;\n    case 'firstTrailer':\n      expectedAxles = config.firstTrailerAxles;\n      expectedType = 'semi_trailer';\n      break;\n    case 'secondTrailer':\n      expectedAxles = config.secondTrailerAxles;\n      expectedType = 'semi_trailer';\n      break;\n    case 'dolly':\n      expectedAxles = config.dollyAxles || 2;\n      expectedType = 'dolly';\n      break;\n    default:\n      return [];\n  }\n\n  return vehicles.filter(vehicle => \n    vehicle.type === expectedType && \n    vehicle.axleCount === expectedAxles &&\n    vehicle.status === 'active'\n  );\n}\n\n// Labels para exibição\nfunction getVehicleTypeLabel(type: string): string {\n  const labels: Record<string, string> = {\n    'tractor_unit': 'Unidade Tratora',\n    'semi_trailer': 'Semirreboque',\n    'trailer': 'Reboque',\n    'dolly': 'Dolly',\n    'truck': 'Caminhão',\n    'flatbed': 'Prancha'\n  };\n  return labels[type] || type;\n}\n\nexport function getLicenseTypeLabel(type: LicenseType | string): string {\n  const labels: Record<string, string> = {\n    'bitrain_9_axles': 'Bitrem 9 eixos',\n    'roadtrain_9_axles': 'Rodotrem 9 eixos',\n    'bitrain_7_axles': 'Bitrem 7 eixos',\n    'bitrain_6_axles': 'Bitrem 6 eixos',\n    'flatbed': 'Prancha',\n    'romeo_and_juliet': 'Romeu e Julieta'\n  };\n  return labels[type] || type;\n}\n\n// Obter resumo das especificações para um tipo de licença\nexport function getAxleSpecificationSummary(licenseType: LicenseType | string, vehicleSetTypes?: VehicleSetType[]): string {\n  const config = getAxleConfiguration(licenseType, vehicleSetTypes);\n  \n  if (!config) {\n    return `Tipo de licença não encontrado: ${licenseType}`;\n  }\n  \n  let summary = `${getLicenseTypeLabel(licenseType)}:\\n`;\n  summary += `• Cavalo: ${config.tractorAxles} eixos\\n`;\n  summary += `• 1ª Carreta: ${config.firstTrailerAxles} eixos\\n`;\n  \n  if (config.secondTrailerAxles > 0) {\n    summary += `• 2ª Carreta: ${config.secondTrailerAxles} eixos\\n`;\n  }\n  \n  if (config.requiresDolly) {\n    summary += `• Dolly: ${config.dollyAxles} eixo(s)\\n`;\n  }\n  \n  summary += `• Total: ${config.totalAxles} eixos`;\n  \n  return summary;\n}","size_bytes":10852},"replit.md":{"content":"# Sistema AET - Licenças de Transporte\n\n### Overview\nThis project is a robust system for managing AET (Autorização Especial de Trânsito) licenses and vehicles, featuring advanced server-side performance optimizations and deployment resilience. Its main purpose is to streamline the process of issuing and managing transportation permits, ensuring compliance and operational efficiency for transport companies. Key capabilities include real-time license validation, comprehensive vehicle and transporter management, and detailed financial tracking. The business vision is to provide a reliable, scalable, and user-friendly platform that simplifies complex regulatory requirements in the logistics sector, offering significant market potential by reducing administrative burdens and improving operational flow for transport businesses.\n\n### User Preferences\n- Idioma: Português brasileiro\n- Foco: Manter arquivos seguros durante reinstalações\n- Prioridade: Estabilidade em produção sobre conveniência de desenvolvimento\n- API calls: Usar fetch padrão ao invés de apiRequest para logout e operações simples\n- Segurança: Sistema de permissões granular por tipo de usuário deve ser rigorosamente testado\n- Senhas: Não alterar senhas existentes dos usuários em produção - preservar credenciais originais\n- **Novos Menus**: Sempre criar novos menus na configuração padrão de visualizar as páginas (não colapsados)\n\n### System Architecture\nThe system is built with a React.js frontend using TypeScript, a Node.js/Express backend, and a PostgreSQL database. Real-time communication is handled via WebSockets, and data validation uses Zod schemas. The UI/UX prioritizes responsiveness with Tailwind CSS, ensuring a consistent experience across devices.\n\n**Recent Performance Optimization (August 20, 2025):**\n- **Sistema de Tempo Real INSTANTÂNEO Implementado**: Cores de status mudam em tempo real imediatamente como anteriormente funcionava\n- **Cache Ultra-Rápido**: staleTime reduzido para 1 segundo, refetch forçado via WebSocket para atualizações instantâneas\n- **WebSocket Context Otimizado**: Sistema resetQueries + refetchQueries para garantir dados frescos instantaneamente  \n- **Performance Anti-Travamento Mantida**: Filtros memoizados, limites de memória (máx 1000 itens), operações otimizadas\n- **Indicador Visual Ativo**: Badge tempo real mostra conexão WebSocket + cores dos indicadores mudam instantaneamente\n- **BUG CRÍTICO DE EXIBIÇÃO CORRIGIDO (August 20, 2025)**: Problema grave na função `formatDimension` resolvido - valores de comprimento, largura e altura agora são convertidos corretamente de centímetros (BD) para metros (exibição), corrigindo bug que mostrava valores 100x maiores que o real\n\n**Previous Performance Optimization (August 2025):**\n- **Ultra-fast Vehicle Search**: Plate searches optimized for 50,000+ vehicle records, responding in <1 second\n- **Advanced Database Indices**: Trigram indices for partial text matching, partial indices for active vehicles only\n- **Intelligent Caching**: 2-minute aggressive cache for vehicle searches, automatic invalidation on CRUD operations\n- **Volume-Optimized Queries**: Trigram similarity search for short terms, traditional LIKE for longer patterns\n- **Scalability Features**: Limited result sets (12-25 items), specialized indices reducing search space by 80%\n- **Performance Results**: 50K+ records - First search ~150ms, cached searches ~70ms (sub-1-second guaranteed)\n- **Intelligent Axle Validation**: Sistema rigoroso de validação de eixos por tipo de licença com filtros automáticos no frontend e backend\n- **Flexible License Types**: Prancha e Romeu e Julieta têm validação flexível (sem restrições específicas de eixos)\n- **Dynamic Vehicle Set Types**: Sistema híbrido que carrega tipos personalizados da API junto com tipos padrão, mantendo 100% compatibilidade com funcionalidades existentes\n- **Data Type Fix (August 19, 2025)**: Corrigido problema crítico com campos de dimensões - agora usam NUMERIC (float) para suportar casas decimais, com conversão automática centímetros→metros no servidor\n\n**Key Architectural Decisions:**\n- **External Uploads System**: Files are stored in an external, configurable directory to prevent data loss during reinstalls. The system automatically detects write permissions and prioritizes `UPLOAD_DIR` (environment variable), `/var/uploads`, `/tmp/uploads`, `../uploads`, and `./uploads` in that order. Subfolders for `vehicles/` and `transporter/` ensure organization.\n- **Dedicated Production Server**: A specific `server/production-server.js` is used for production deployments to avoid Vite-related issues, integrated with PM2 for process management.\n- **Universal Pagination**: A standardized pagination system (`usePaginatedList`, `ListPagination`, `MobileListPagination`) is implemented across all administrative and user-facing lists (licenses, vehicles, transporters, users, invoices), ensuring performance with large datasets (e.g., 40,000+ plates).\n- **Intelligent License Validation**: A robust validation system checks for existing licenses based on specific vehicle combinations (tractor + 1st trailer + 2nd trailer/dolly) across 27 Brazilian states and federal bodies (DNIT, ANTT, PRF). It blocks new requests if an identical combination has a license with more than 60 days remaining validity.\n- **Real-time Updates**: WebSocket integration coupled with automatic polling (every 60 seconds) ensures that critical data (e.g., license status, dashboard statistics) is always up-to-date across the application.\n- **Granular Access Control**: A detailed permission matrix defines access levels for various user roles (Operacional, Supervisor, Financeiro, Gerente, Administrador), controlling visibility of menus and access to backend endpoints.\n- **Optimized Vehicle and Transporter Selectors**: Forms utilize optimized selectors with debounce, caching, and pagination for efficient searching of vehicles and transporters. Manual plate entry is also supported for dolly and second trailer fields.\n- **Bulk Import System**: Allows mass import of vehicles via CSV, linking them to transporters using CNPJ/CPF from the spreadsheet. Includes robust validation and duplicate prevention.\n- **Mobile Responsiveness**: The entire system is designed to be fully responsive, with a functional bottom navigation bar and optimized layouts for mobile devices across all main pages.\n- **Custom Modals**: Native `confirm()` notifications are replaced with custom `AlertDialog` components for all critical confirmations, improving user experience and consistency.\n- **Hierarchical Navigation**: A hierarchical sidebar menu (e.g., \"Veículos\" with submenus) improves navigation and organization, with dynamic expansion and access control based on user roles.\n\n### External Dependencies\n- **PostgreSQL**: Primary database for all system data.\n- **Node.js/Express**: Backend framework.\n- **React.js**: Frontend library.\n- **TypeScript**: Programming language for both frontend and backend.\n- **Zod**: Schema validation library.\n- **Tailwind CSS**: Utility-first CSS framework for styling.\n- **PM2**: Production process manager for Node.js applications.\n- **WebSocket**: For real-time communication.\n- **External API (for CNPJ/CPF lookup)**: Used for automatic data population of transporters and their branches.\n- **Multer**: Middleware for handling `multipart/form-data`, used for file uploads (e.g., CSV imports, boleto/NF uploads).\n- **`csv-export.ts` (internal utility)**: Standardized CSV export functionality.","size_bytes":7592},"client/src/components/admin/vehicle-set-type-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { VehicleSetType } from \"@shared/vehicle-set-types\";\nimport { Truck, Plus, X } from \"lucide-react\";\nimport { ImageUploader } from \"./image-uploader\";\n\nconst formSchema = z.object({\n  name: z.string().min(1, \"Nome é obrigatório\"),\n  label: z.string().min(1, \"Rótulo é obrigatório\"),\n  description: z.string().optional(),\n  axleConfiguration: z.object({\n    tractorAxles: z.number().min(0),\n    firstTrailerAxles: z.number().min(0),\n    secondTrailerAxles: z.number().min(0),\n    totalAxles: z.number().min(0),\n    requiresDolly: z.boolean(),\n    dollyAxles: z.number().min(1).optional(),\n    isFlexible: z.boolean(),\n  }),\n  dimensionLimits: z.object({\n    minLength: z.number().optional(),\n    maxLength: z.number().optional(),\n    maxWidth: z.number().optional(),\n    maxHeight: z.number().optional(),\n  }),\n  vehicleTypes: z.object({\n    tractor: z.array(z.string()),\n    firstTrailer: z.array(z.string()),\n    secondTrailer: z.array(z.string()).optional(),\n    dolly: z.array(z.string()).optional(),\n  }),\n  imageUrl: z.string().optional(),\n  isActive: z.boolean(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface VehicleSetTypeFormProps {\n  vehicleSetType?: VehicleSetType | null;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nconst AVAILABLE_VEHICLE_TYPES = [\n  \"tractor_unit\",\n  \"semi_trailer\", \n  \"flatbed\",\n  \"dolly\",\n  \"truck\",\n  \"trailer\",\n];\n\nexport function VehicleSetTypeForm({ vehicleSetType, onClose, onSuccess }: VehicleSetTypeFormProps) {\n  const isEditing = !!vehicleSetType;\n  \n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: vehicleSetType ? {\n      name: vehicleSetType.name,\n      label: vehicleSetType.label,\n      description: vehicleSetType.description || \"\",\n      axleConfiguration: vehicleSetType.axleConfiguration,\n      dimensionLimits: vehicleSetType.dimensionLimits,\n      vehicleTypes: vehicleSetType.vehicleTypes,\n      imageUrl: vehicleSetType.imageUrl || \"\",\n      isActive: vehicleSetType.isActive,\n    } : {\n      name: \"\",\n      label: \"\",\n      description: \"\",\n      axleConfiguration: {\n        tractorAxles: 2,\n        firstTrailerAxles: 2,\n        secondTrailerAxles: 0,\n        totalAxles: 4,\n        requiresDolly: false,\n        dollyAxles: 2,\n        isFlexible: false,\n      },\n      dimensionLimits: {\n        minLength: undefined,\n        maxLength: undefined,\n        maxWidth: undefined,\n        maxHeight: undefined,\n      },\n      vehicleTypes: {\n        tractor: [\"tractor_unit\"],\n        firstTrailer: [\"semi_trailer\"],\n        secondTrailer: [],\n        dolly: [],\n      },\n      imageUrl: \"\",\n      isActive: true,\n    }\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const url = isEditing \n        ? `/api/admin/vehicle-set-types/${vehicleSetType.id}`\n        : '/api/admin/vehicle-set-types';\n      \n      console.log('[MUTATION] Enviando para:', url, 'Dados:', data);\n      \n      const res = await fetch(url, {\n        method: isEditing ? 'PUT' : 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      \n      const result = await res.json();\n      console.log('[MUTATION] Resposta:', result);\n      \n      if (!res.ok) {\n        throw new Error(result.message || 'Erro ao salvar tipo de conjunto');\n      }\n      \n      return result;\n    },\n    onSuccess: (result) => {\n      console.log('[MUTATION] Sucesso:', result);\n      // Invalidar cache do React Query forçadamente\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/vehicle-set-types'] });\n      queryClient.refetchQueries({ queryKey: ['/api/admin/vehicle-set-types'] });\n      onSuccess();\n    },\n    onError: (error) => {\n      console.error('[MUTATION] Erro:', error);\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    // Calcular total de eixos automaticamente se não for flexível\n    if (!data.axleConfiguration.isFlexible) {\n      data.axleConfiguration.totalAxles = \n        data.axleConfiguration.tractorAxles + \n        data.axleConfiguration.firstTrailerAxles + \n        data.axleConfiguration.secondTrailerAxles;\n    } else {\n      data.axleConfiguration.totalAxles = 0;\n    }\n    \n    // Limpar valores undefined dos limites de dimensões\n    if (data.dimensionLimits.minLength === undefined) delete data.dimensionLimits.minLength;\n    if (data.dimensionLimits.maxLength === undefined) delete data.dimensionLimits.maxLength;\n    if (data.dimensionLimits.maxWidth === undefined) delete data.dimensionLimits.maxWidth;\n    if (data.dimensionLimits.maxHeight === undefined) delete data.dimensionLimits.maxHeight;\n    \n    console.log('[VEHICLE SET TYPE FORM] Enviando dados:', data);\n    mutation.mutate(data);\n  };\n\n  const isFlexible = form.watch(\"axleConfiguration.isFlexible\");\n  const requiresDolly = form.watch(\"axleConfiguration.requiresDolly\");\n\n  return (\n    <Dialog open onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Truck className=\"h-5 w-5\" />\n            {isEditing ? \"Editar Tipo de Conjunto\" : \"Novo Tipo de Conjunto\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Informações Básicas */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Informações Básicas</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nome (ID)</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"bitrain_8_axles\" />\n                        </FormControl>\n                        <FormDescription>\n                          Identificador único usado no sistema\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"label\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Rótulo</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Bitrem 8 eixos\" />\n                        </FormControl>\n                        <FormDescription>\n                          Nome exibido para os usuários\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descrição</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Descrição do tipo de conjunto\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Upload de Imagem */}\n                  <FormField\n                    control={form.control}\n                    name=\"imageUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <ImageUploader\n                          value={field.value}\n                          onChange={field.onChange}\n                        />\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel>Ativo</FormLabel>\n                          <FormDescription>\n                            Se este tipo estará disponível para seleção\n                          </FormDescription>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Configuração de Eixos */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Configuração de Eixos</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"axleConfiguration.isFlexible\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel>Validação Flexível</FormLabel>\n                          <FormDescription>\n                            Se marcado, não haverá restrições específicas de eixos\n                          </FormDescription>\n                        </div>\n                        <FormControl>\n                          <Switch checked={field.value} onCheckedChange={field.onChange} />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  {!isFlexible && (\n                    <>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"axleConfiguration.tractorAxles\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Eixos do Cavalo</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field} \n                                  onChange={e => field.onChange(Number(e.target.value))}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"axleConfiguration.firstTrailerAxles\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Eixos 1ª Carreta</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field} \n                                  onChange={e => field.onChange(Number(e.target.value))}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"axleConfiguration.secondTrailerAxles\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Eixos 2ª Carreta</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                {...field} \n                                onChange={e => field.onChange(Number(e.target.value))}\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Use 0 se não houver segunda carreta\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"axleConfiguration.requiresDolly\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel>Requer Dolly</FormLabel>\n                              <FormDescription>\n                                Se este tipo de conjunto precisa de dolly\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch checked={field.value} onCheckedChange={field.onChange} />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Campo dinâmico para eixos do dolly */}\n                      {requiresDolly && (\n                        <FormField\n                          control={form.control}\n                          name=\"axleConfiguration.dollyAxles\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Eixos do Dolly</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  min=\"1\"\n                                  max=\"3\"\n                                  {...field} \n                                  onChange={e => field.onChange(Number(e.target.value))}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Quantidade de eixos do dolly (normalmente 2)\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n\n                      {/* Resumo dos Eixos */}\n                      <div className=\"bg-blue-50 p-3 rounded-lg\">\n                        <div className=\"text-sm font-medium text-blue-800\">\n                          Total de Eixos: {\n                            form.watch(\"axleConfiguration.tractorAxles\") + \n                            form.watch(\"axleConfiguration.firstTrailerAxles\") + \n                            form.watch(\"axleConfiguration.secondTrailerAxles\")\n                          }\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Limites de Dimensões */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Limites de Dimensões</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"dimensionLimits.minLength\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Comprimento Mín (m)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\"\n                            {...field} \n                            onChange={e => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dimensionLimits.maxLength\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Comprimento Máx (m)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\"\n                            {...field} \n                            onChange={e => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dimensionLimits.maxWidth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Largura Máx (m)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\"\n                            {...field} \n                            onChange={e => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dimensionLimits.maxHeight\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Altura Máx (m)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\"\n                            {...field} \n                            onChange={e => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Ações */}\n            <div className=\"flex gap-3 justify-end\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" disabled={mutation.isPending}>\n                {mutation.isPending ? \"Salvando...\" : isEditing ? \"Atualizar\" : \"Criar\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":20233},"client/src/pages/admin/vehicle-set-types.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { AdminLayout } from \"@/components/layout/admin-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Settings, Truck } from \"lucide-react\";\nimport { VehicleSetType } from \"@shared/vehicle-set-types\";\nimport { VehicleSetTypeForm } from \"@/components/admin\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\nexport default function VehicleSetTypesPage() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingType, setEditingType] = useState<VehicleSetType | null>(null);\n\n  // Buscar tipos de conjunto (com debug)\n  const { data: vehicleSetTypes = [], isLoading, error } = useQuery<VehicleSetType[]>({\n    queryKey: ['/api/admin/vehicle-set-types'],\n    staleTime: 0, // Sempre buscar dados frescos\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    retry: 3,\n    onError: (error) => {\n      // Performance: Log removido\n    },\n    onSuccess: (data) => {\n      // Performance: Logs removidos\n    }\n  });\n\n  // Mutação para deletar tipo\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await fetch(`/api/admin/vehicle-set-types/${id}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      if (!res.ok) throw new Error('Erro ao deletar tipo de conjunto');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/vehicle-set-types'] });\n    },\n  });\n\n  const handleEdit = (type: VehicleSetType) => {\n    setEditingType(type);\n    setIsFormOpen(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    await deleteMutation.mutateAsync(id);\n  };\n\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n    setEditingType(null);\n  };\n\n  if (isLoading) {\n    return (\n      <AdminLayout>\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold\">Tipos de Conjunto de Veículos</h1>\n              <p className=\"text-gray-600\">Carregando tipos disponíveis...</p>\n            </div>\n            <div className=\"animate-pulse bg-gray-200 h-10 w-32 rounded\"></div>\n          </div>\n          <div className=\"bg-white rounded-lg border shadow-sm p-6\">\n            <div className=\"space-y-4\">\n              {[1,2,3].map(i => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-8 bg-gray-200 rounded\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Tipos de Conjunto de Veículos</h1>\n            <p className=\"text-gray-600\">\n              Gerencie os tipos de conjunto disponíveis e suas regras de validação\n            </p>\n          </div>\n          <Button onClick={() => setIsFormOpen(true)} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Novo Tipo\n          </Button>\n        </div>\n\n        <div className=\"bg-white rounded-lg border shadow-sm\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Tipo</TableHead>\n                <TableHead>Configuração de Eixos</TableHead>\n                <TableHead>Dimensões</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {vehicleSetTypes.map((type) => (\n                <TableRow key={type.id}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      {type.imageUrl ? (\n                        <img \n                          src={type.imageUrl} \n                          alt={type.label}\n                          className=\"w-12 h-8 object-contain rounded border\"\n                          onError={(e) => {\n                            // Se a imagem falhar, mostra o ícone padrão\n                            const target = e.target as HTMLImageElement;\n                            target.style.display = 'none';\n                            target.nextElementSibling?.classList.remove('hidden');\n                          }}\n                        />\n                      ) : null}\n                      <Truck className={`h-8 w-8 text-gray-400 p-1 border rounded ${type.imageUrl ? 'hidden' : ''}`} />\n                      <div>\n                        <div className=\"font-medium\">{type.label}</div>\n                        {type.description && (\n                          <div className=\"text-sm text-gray-500\">{type.description}</div>\n                        )}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {type.axleConfiguration.isFlexible ? (\n                      <Badge variant=\"outline\" className=\"text-green-700 bg-green-50\">\n                        Flexível\n                      </Badge>\n                    ) : (\n                      <div className=\"text-sm space-y-1\">\n                        <div>Cavalo: {type.axleConfiguration.tractorAxles} eixos</div>\n                        <div>1ª Carreta: {type.axleConfiguration.firstTrailerAxles} eixos</div>\n                        {type.axleConfiguration.secondTrailerAxles > 0 && (\n                          <div>2ª Carreta: {type.axleConfiguration.secondTrailerAxles} eixos</div>\n                        )}\n                        <div className=\"font-medium text-blue-600\">\n                          Total: {type.axleConfiguration.totalAxles} eixos\n                        </div>\n                        {type.axleConfiguration.requiresDolly && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            Requer Dolly\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm space-y-1\">\n                      {type.dimensionLimits.minLength && (\n                        <div>Compr. mín: {type.dimensionLimits.minLength}m</div>\n                      )}\n                      {type.dimensionLimits.maxLength && (\n                        <div>Compr. máx: {type.dimensionLimits.maxLength}m</div>\n                      )}\n                      {type.dimensionLimits.maxWidth && (\n                        <div>Larg. máx: {type.dimensionLimits.maxWidth}m</div>\n                      )}\n                      {type.dimensionLimits.maxHeight && (\n                        <div>Alt. máx: {type.dimensionLimits.maxHeight}m</div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={type.isActive ? \"default\" : \"secondary\"}>\n                      {type.isActive ? \"Ativo\" : \"Inativo\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex gap-2 justify-end\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(type)}\n                      >\n                        <Edit className=\"h-3 w-3 mr-1\" />\n                        Editar\n                      </Button>\n                      \n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Tem certeza que deseja excluir o tipo \"{type.label}\"? \n                              Esta ação não pode ser desfeita.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDelete(type.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              Excluir\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Formulário Modal */}\n        {isFormOpen && (\n          <VehicleSetTypeForm\n            vehicleSetType={editingType}\n            onClose={handleCloseForm}\n            onSuccess={() => {\n              handleCloseForm();\n              queryClient.invalidateQueries({ queryKey: ['/api/admin/vehicle-set-types'] });\n            }}\n          />\n        )}\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":10338},"shared/vehicle-set-types.ts":{"content":"// Esquema para tipos de conjunto dinâmicos\nimport { z } from \"zod\";\n\nexport const vehicleSetTypeSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  label: z.string(),\n  description: z.string().optional(),\n  axleConfiguration: z.object({\n    tractorAxles: z.number(),\n    firstTrailerAxles: z.number(),\n    secondTrailerAxles: z.number(),\n    dollyAxles: z.number().optional(),\n    totalAxles: z.number(),\n    requiresDolly: z.boolean(),\n    isFlexible: z.boolean(), // Se true, ignora validação de eixos\n  }),\n  dimensionLimits: z.object({\n    minLength: z.number().optional(),\n    maxLength: z.number().optional(),\n    maxWidth: z.number().optional(),\n    maxHeight: z.number().optional(),\n  }),\n  vehicleTypes: z.object({\n    tractor: z.array(z.string()),\n    firstTrailer: z.array(z.string()),\n    secondTrailer: z.array(z.string()).optional(),\n    dolly: z.array(z.string()).optional(),\n  }),\n  iconPath: z.string().optional(),\n  imageUrl: z.string().optional(),\n  isActive: z.boolean().default(true),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\nexport type VehicleSetType = z.infer<typeof vehicleSetTypeSchema>;\n\n// Tipos padrão do sistema (cache estático)\nlet _defaultTypesCache: VehicleSetType[] | null = null;\n\nfunction getDefaultVehicleSetTypes(): VehicleSetType[] {\n  if (_defaultTypesCache) {\n    return _defaultTypesCache;\n  }\n  \n  _defaultTypesCache = [\n  {\n    id: \"bitrain_6_axles\",\n    name: \"bitrain_6_axles\",\n    label: \"Bitrem 6 eixos\",\n    description: \"Composição bitrem com 6 eixos totais\",\n    axleConfiguration: {\n      tractorAxles: 2,\n      firstTrailerAxles: 2,\n      secondTrailerAxles: 2,\n      totalAxles: 6,\n      requiresDolly: false,\n      isFlexible: false,\n    },\n    dimensionLimits: {\n      minLength: 19.8,\n      maxLength: 30.0,\n      maxWidth: 2.6,\n      maxHeight: 4.4,\n    },\n    vehicleTypes: {\n      tractor: [\"tractor_unit\"],\n      firstTrailer: [\"semi_trailer\"],\n      secondTrailer: [\"semi_trailer\"],\n    },\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"bitrain_7_axles\",\n    name: \"bitrain_7_axles\",\n    label: \"Bitrem 7 eixos\",\n    description: \"Composição bitrem com 7 eixos totais\",\n    axleConfiguration: {\n      tractorAxles: 3,\n      firstTrailerAxles: 2,\n      secondTrailerAxles: 2,\n      totalAxles: 7,\n      requiresDolly: false,\n      isFlexible: false,\n    },\n    dimensionLimits: {\n      minLength: 19.8,\n      maxLength: 30.0,\n      maxWidth: 2.6,\n      maxHeight: 4.4,\n    },\n    vehicleTypes: {\n      tractor: [\"tractor_unit\"],\n      firstTrailer: [\"semi_trailer\"],\n      secondTrailer: [\"semi_trailer\"],\n    },\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"bitrain_9_axles\",\n    name: \"bitrain_9_axles\",\n    label: \"Bitrem 9 eixos\",\n    description: \"Composição bitrem com 9 eixos totais\",\n    axleConfiguration: {\n      tractorAxles: 3,\n      firstTrailerAxles: 3,\n      secondTrailerAxles: 3,\n      totalAxles: 9,\n      requiresDolly: false,\n      isFlexible: false,\n    },\n    dimensionLimits: {\n      minLength: 19.8,\n      maxLength: 30.0,\n      maxWidth: 2.6,\n      maxHeight: 4.4,\n    },\n    vehicleTypes: {\n      tractor: [\"tractor_unit\"],\n      firstTrailer: [\"semi_trailer\"],\n      secondTrailer: [\"semi_trailer\"],\n    },\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"roadtrain_9_axles\",\n    name: \"roadtrain_9_axles\",\n    label: \"Rodotrem 9 eixos\",\n    description: \"Composição rodotrem com 9 eixos totais\",\n    axleConfiguration: {\n      tractorAxles: 3,\n      firstTrailerAxles: 2,\n      secondTrailerAxles: 2,\n      dollyAxles: 2,\n      totalAxles: 9,\n      requiresDolly: true,\n      isFlexible: false,\n    },\n    dimensionLimits: {\n      minLength: 19.8,\n      maxLength: 30.0,\n      maxWidth: 2.6,\n      maxHeight: 4.4,\n    },\n    vehicleTypes: {\n      tractor: [\"tractor_unit\"],\n      firstTrailer: [\"semi_trailer\"],\n      secondTrailer: [\"semi_trailer\"],\n      dolly: [\"dolly\"],\n    },\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"flatbed\",\n    name: \"flatbed\",\n    label: \"Prancha\",\n    description: \"Composição flexível para pranchas\",\n    axleConfiguration: {\n      tractorAxles: 0,\n      firstTrailerAxles: 0,\n      secondTrailerAxles: 0,\n      totalAxles: 0,\n      requiresDolly: false,\n      isFlexible: true,\n    },\n    dimensionLimits: {\n      maxWidth: 3.2,\n      maxHeight: 4.95,\n    },\n    vehicleTypes: {\n      tractor: [\"tractor_unit\"],\n      firstTrailer: [\"flatbed\", \"semi_trailer\"],\n    },\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"romeo_and_juliet\",\n    name: \"romeo_and_juliet\",\n    label: \"Romeu e Julieta\",\n    description: \"Composição flexível para romeu e julieta\",\n    axleConfiguration: {\n      tractorAxles: 0,\n      firstTrailerAxles: 0,\n      secondTrailerAxles: 0,\n      totalAxles: 0,\n      requiresDolly: false,\n      isFlexible: true,\n    },\n    dimensionLimits: {\n      minLength: 19.8,\n      maxLength: 30.0,\n      maxWidth: 2.6,\n      maxHeight: 4.4,\n    },\n    vehicleTypes: {\n      tractor: [\"tractor_unit\"],\n      firstTrailer: [\"semi_trailer\"],\n    },\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  ];\n  \n  return _defaultTypesCache;\n}\n\nexport const DEFAULT_VEHICLE_SET_TYPES = getDefaultVehicleSetTypes();","size_bytes":5484},"client/src/components/admin/index.ts":{"content":"// Export dos componentes admin\nexport { VehicleSetTypeForm } from './vehicle-set-type-form';","size_bytes":93},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient, getQueryFn } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport RegularDashboardPage from \"@/pages/regular-dashboard-page\";\nimport VehiclesPage from \"@/pages/vehicles-page\";\nimport RequestLicensePage from \"@/pages/request-license-page\";\nimport TrackLicensePage from \"@/pages/track-license-page\";\nimport IssuedLicensesPage from \"@/pages/issued-licenses-page\";\nimport MyCompaniesPage from \"@/pages/my-companies-page\";\nimport AdminDashboardPage from \"@/pages/admin/admin-dashboard\";\nimport AdminLicensesPage from \"@/pages/admin/admin-licenses\";\nimport AdminTransportersPage from \"@/pages/admin/admin-transporters\";\nimport AdminUsersPage from \"@/pages/admin/admin-users\";\nimport AdminVehiclesPage from \"@/pages/admin/admin-vehicles\";\nimport AdminVehiclesOptimizedPage from \"@/pages/admin/admin-vehicles-optimized\";\nimport TestOptimizedSelectorsPage from \"@/pages/test-optimized-selectors\";\nimport VehicleModelsPage from \"@/pages/admin/vehicle-models-page\";\nimport BoletosPage from \"@/pages/admin/boletos-page\";\nimport DashboardAET from \"@/pages/admin/dashboard-aet\";\nimport VehicleTransferPage from \"@/pages/admin/vehicle-transfer-page\";\nimport VehicleSetTypesPage from \"@/pages/admin/vehicle-set-types\";\nimport BulkLicenseImport from \"@/pages/admin/BulkLicenseImport\";\nimport MeusBoletos from \"@/pages/meus-boletos\";\nimport BulkVehiclesPage from \"@/pages/bulk-vehicles-page\";\nimport RedirectPage from \"@/pages/redirect-page\";\nimport { ProtectedRoute, AdminRoute, StaffRoute } from \"./lib/protected-route\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { WebSocketProvider } from \"./hooks/use-websocket-context\";\nimport { MobileProvider, useMobileContext } from \"./hooks/use-mobile-context\";\nimport { useEffect, lazy } from \"react\";\n\n// Importar páginas mobile\nimport MobileDashboardPage from \"@/pages/mobile/mobile-dashboard\";\nimport MobileVehiclesPage from \"@/pages/mobile/mobile-vehicles\";\nimport MobileTrackLicensePage from \"@/pages/mobile/mobile-track-license\";\nimport MobileIssuedLicensesPage from \"@/pages/mobile/mobile-issued-licenses\";\n\nfunction Router() {\n  const { isMobile } = useMobileContext();\n  \n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      \n      {/* Página inicial - Dashboard direto sem redirecionamento */}\n      <ProtectedRoute \n        path=\"/\" \n        component={isMobile ? MobileDashboardPage : RegularDashboardPage} \n      />\n      \n      {/* Portal Admin - Rotas acessíveis via hierarquia de permissões */}\n      <AdminRoute path=\"/admin\" component={AdminDashboardPage} />\n      <StaffRoute path=\"/admin/licenses\" component={AdminLicensesPage} requiredRole=\"operational\" />\n      <StaffRoute path=\"/admin/transporters\" component={AdminTransportersPage} requiredRole=\"operational\" />\n      <AdminRoute path=\"/admin/users\" component={AdminUsersPage} />\n      <StaffRoute path=\"/admin/vehicles\" component={AdminVehiclesPage} requiredRole=\"operational\" />\n      <StaffRoute path=\"/admin/vehicles-optimized\" component={AdminVehiclesOptimizedPage} requiredRole=\"operational\" />\n      <AdminRoute path=\"/test-selectors\" component={TestOptimizedSelectorsPage} />\n      <AdminRoute path=\"/admin/vehicle-models\" component={VehicleModelsPage} />\n      <AdminRoute path=\"/admin/vehicle-set-types\" component={VehicleSetTypesPage} />\n      <AdminRoute path=\"/admin/vehicle-transfer\" component={VehicleTransferPage} />\n      <StaffRoute path=\"/admin/boletos\" component={BoletosPage} requiredRole=\"financial\" />\n      <StaffRoute path=\"/admin/bulk-license-import\" component={BulkLicenseImport} requiredRole=\"operational\" />\n      <AdminRoute path=\"/admin/dashboard-aet\" component={DashboardAET} />\n      \n      {/* Sistema de Controle de Licenças - Rotas do usuário (versão desktop ou mobile) */}\n      <ProtectedRoute \n        path=\"/dashboard\" \n        component={isMobile ? MobileDashboardPage : RegularDashboardPage} \n      />\n      <ProtectedRoute\n        path=\"/my-companies\"\n        component={MyCompaniesPage}\n      />\n      <ProtectedRoute \n        path=\"/vehicles\" \n        component={isMobile ? MobileVehiclesPage : VehiclesPage} \n      />\n      <ProtectedRoute \n        path=\"/nova-licenca\" \n        component={RequestLicensePage} \n      />\n      <ProtectedRoute \n        path=\"/request-license\" \n        component={RequestLicensePage} \n      />\n      <ProtectedRoute \n        path=\"/acompanhar-licenca\" \n        component={isMobile ? MobileTrackLicensePage : TrackLicensePage} \n      />\n      <ProtectedRoute \n        path=\"/track-license\" \n        component={isMobile ? MobileTrackLicensePage : TrackLicensePage} \n      />\n      <ProtectedRoute \n        path=\"/issued-licenses\" \n        component={isMobile ? MobileIssuedLicensesPage : IssuedLicensesPage} \n      />\n      <ProtectedRoute \n        path=\"/licencas-emitidas\" \n        component={isMobile ? MobileIssuedLicensesPage : IssuedLicensesPage} \n      />\n      \n      {/* Acesso do cliente ao módulo financeiro - apenas para transportadores */}\n      <ProtectedRoute \n        path=\"/meus-boletos\" \n        component={MeusBoletos} \n      />\n      \n      {/* Cadastro em massa de veículos - disponível para todos usuários */}\n      <ProtectedRoute \n        path=\"/cadastro-massa-veiculos\" \n        component={BulkVehiclesPage} \n      />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\n// Componente para pré-carregar dados importantes\nfunction AppInitializer() {\n  const { isMobile } = useMobileContext();\n  \n  // Efeito para carregar dados do usuário e outros recursos importantes\n  useEffect(() => {\n    // Pré-carregar dados da sessão atual\n    queryClient.prefetchQuery({\n      queryKey: [\"/api/user\"],\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n    });\n    \n    // Adicionar classe para identificar dispositivos móveis no body\n    if (isMobile) {\n      document.body.classList.add('mobile-device');\n    } else {\n      document.body.classList.remove('mobile-device');\n    }\n    \n    // Configurar viewport para dispositivos móveis\n    const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n    if (viewportMeta && isMobile) {\n      viewportMeta.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');\n    }\n  }, [isMobile]);\n  \n  return null;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <WebSocketProvider>\n          <MobileProvider>\n            <AppInitializer />\n            <Router />\n            <Toaster />\n          </MobileProvider>\n        </WebSocketProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6879},"client/src/components/layout/sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { usePermissions } from \"@/hooks/use-permissions\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { \n  Menu, \n  Home, \n  Truck, \n  FileText, \n  ClipboardList, \n  ListChecks, \n  LogOut, \n  ChevronRight, \n  ChevronDown,\n  Building2, \n  ClipboardEdit,\n  LayoutDashboard,\n  Users,\n  Settings,\n  Car,\n  RefreshCw,\n  Receipt,\n  BarChart3,\n  UploadCloud,\n  PanelLeftClose,\n  PanelLeftOpen\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Logo } from \"@/components/ui/logo\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface SidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggleCollapse?: () => void;\n}\n\nexport function Sidebar({ className, isCollapsed = false, onToggleCollapse }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { user, logoutMutation } = useAuth();\n  const permissions = usePermissions();\n\n  const isMobile = useIsMobile();\n  const [open, setOpen] = useState(false);\n  const [vehicleMenuExpanded, setVehicleMenuExpanded] = useState(false);\n\n  const userInitials = user?.fullName\n    .split(' ')\n    .map(name => name[0])\n    .join('')\n    .substring(0, 2)\n    .toUpperCase();\n\n  // Auto-expand vehicle menu when on vehicle-related pages\n  useEffect(() => {\n    const vehiclePages = ['/vehicles', '/admin/vehicle-models', '/admin/vehicle-transfer', '/cadastro-massa-veiculos'];\n    // Otimização: Usar early return e evitar expansão desnecessária\n    const shouldExpand = vehiclePages.includes(location);\n    if (shouldExpand !== vehicleMenuExpanded) {\n      setVehicleMenuExpanded(shouldExpand);\n    }\n  }, [location, vehicleMenuExpanded]);\n\n  const handleLogout = async () => {\n    // Previne múltiplos cliques durante logout\n    if (logoutMutation.isPending) return;\n    \n    try {\n      // Limpa o cache imediatamente para logout instantâneo\n      const { queryClient } = await import(\"@/lib/queryClient\");\n      queryClient.setQueryData([\"/api/user\"], null);\n      queryClient.clear();\n      \n      // Faz logout no servidor em background\n      await fetch(\"/api/logout\", { \n        method: \"POST\",\n        credentials: \"include\"\n      });\n      \n      // Força redirecionamento para tela inicial\n      window.location.href = \"/auth\";\n    } catch (error) {\n      console.error(\"Erro no logout:\", error);\n      // Mesmo com erro, redireciona para tela inicial\n      window.location.href = \"/auth\";\n    }\n  };\n\n  const handleNavigate = (path: string) => {\n    // Navegação otimizada - fecha modal primeiro para feedback visual instantâneo\n    setOpen(false);\n    \n    // Navegação apenas se for caminho diferente\n    if (location !== path) {\n      setLocation(path);\n    }\n  };\n\n  // Componente SidebarItem com tooltip para modo colapsado\n  const SidebarItem = ({ icon: Icon, label, path, isActive, children }: {\n    icon: any;\n    label: string;\n    path?: string;\n    isActive?: boolean;\n    children?: React.ReactNode;\n  }) => {\n    const content = (\n      <Button\n        variant=\"ghost\"\n        className={cn(\n          \"w-full text-white hover:bg-gray-700 transition-colors\",\n          isCollapsed ? \"justify-center px-2\" : \"justify-start\",\n          isActive ? \"bg-gray-700\" : \"bg-transparent\"\n        )}\n        onClick={() => path && handleNavigate(path)}\n      >\n        <Icon className={cn(\"h-5 w-5\", !isCollapsed && \"mr-3\")} />\n        {!isCollapsed && <span className=\"flex-1 text-left\">{label}</span>}\n        {!isCollapsed && children}\n      </Button>\n    );\n\n    if (isCollapsed) {\n      return (\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              {content}\n            </TooltipTrigger>\n            <TooltipContent side=\"right\" className=\"ml-2\">\n              {label}\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      );\n    }\n\n    return content;\n  };\n\n  const NavItems = () => (\n    <>\n      {/* Header da Sidebar */}\n      <div className={cn(\n        \"flex items-center h-16 px-4 bg-gray-900 border-b border-gray-700\",\n        isCollapsed ? \"justify-center\" : \"justify-between\"\n      )}>\n        {!isCollapsed && <Logo width={120} className=\"py-2\" />}\n        {isCollapsed && <Logo width={32} className=\"py-2\" />}\n        \n        {/* Botão de colapsar - apenas quando não está colapsado */}\n        {!isMobile && !isCollapsed && onToggleCollapse && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onToggleCollapse}\n            className=\"text-white hover:bg-gray-700 p-1\"\n          >\n            <PanelLeftClose className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      \n      {/* Conteúdo Principal da Sidebar */}\n      <div className={cn(\n        \"py-4 space-y-1 overflow-y-auto h-full max-h-screen scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800\",\n        isCollapsed ? \"px-1\" : \"px-2\"\n      )}>\n        {/* Dashboard - Apenas para transportadores (usuários comuns) */}\n        {user?.role === 'user' && (\n          <SidebarItem\n            icon={Home}\n            label=\"Dashboard\"\n            path=\"/\"\n            isActive={location === \"/\" || location === \"/dashboard\"}\n          />\n        )}\n        \n\n        \n        {/* Menu Hierárquico de Veículos */}\n        {permissions.canViewVehicles() && (\n          <div className=\"space-y-1\">\n            {/* Menu Principal de Veículos */}\n            {!isCollapsed ? (\n              <Button\n                variant=\"ghost\"\n                className={cn(\n                  \"w-full justify-start text-white hover:bg-gray-700\",\n                  (location === \"/vehicles\" || location === \"/admin/vehicle-models\" || location === \"/admin/vehicle-transfer\" || location === \"/cadastro-massa-veiculos\") ? \"bg-gray-700\" : \"bg-transparent\"\n                )}\n                onClick={() => {\n                  // Sempre navegar para veículos ao clicar no menu principal\n                  handleNavigate(\"/vehicles\");\n                }}\n              >\n                <Truck className=\"mr-3 h-5 w-5\" />\n                <span className=\"flex-1 text-left\">Veículos</span>\n                {vehicleMenuExpanded ? (\n                  <ChevronDown className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronRight className=\"h-4 w-4\" />\n                )}\n              </Button>\n            ) : (\n              // No modo colapsado, mostrar apenas ícone dos veículos com acesso direto à lista\n              <SidebarItem\n                icon={Truck}\n                label=\"Veículos\"\n                path=\"/vehicles\"\n                isActive={location === \"/vehicles\" || location === \"/admin/vehicle-models\" || location === \"/admin/vehicle-transfer\" || location === \"/cadastro-massa-veiculos\"}\n              />\n            )}\n            \n            {/* Submenus de Veículos - apenas no modo expandido */}\n            {!isCollapsed && vehicleMenuExpanded && (\n              <div className=\"ml-6 space-y-1 border-l border-gray-600 pl-4\">\n                {/* Veículos Cadastrados */}\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start text-white hover:bg-gray-600 text-sm\",\n                    location === \"/vehicles\" ? \"bg-gray-600\" : \"bg-transparent\"\n                  )}\n                  onClick={() => handleNavigate(\"/vehicles\")}\n                >\n                  <Truck className=\"mr-3 h-4 w-4\" />\n                  Veículos Cadastrados\n                </Button>\n                \n                {/* Cadastro em Massa - Apenas para usuários administrativos */}\n                {user?.role !== 'user' && (\n                  <Button\n                    variant=\"ghost\"\n                    className={cn(\n                      \"w-full justify-start text-white hover:bg-gray-600 text-sm\",\n                      location === \"/cadastro-massa-veiculos\" ? \"bg-gray-600\" : \"bg-transparent\"\n                    )}\n                    onClick={() => handleNavigate(\"/cadastro-massa-veiculos\")}\n                  >\n                    <UploadCloud className=\"mr-3 h-4 w-4\" />\n                    Cadastro em Massa\n                  </Button>\n                )}\n                \n                {/* Modelos de Veículos - Apenas para usuários administrativos (não transportadores) */}\n                {permissions.canViewVehicleModels() && user?.role !== 'user' && (\n                  <Button\n                    variant=\"ghost\"\n                    className={cn(\n                      \"w-full justify-start text-white hover:bg-gray-600 text-sm\",\n                      location === \"/admin/vehicle-models\" ? \"bg-gray-600\" : \"bg-transparent\"\n                    )}\n                    onClick={() => handleNavigate(\"/admin/vehicle-models\")}\n                  >\n                    <Car className=\"mr-3 h-4 w-4\" />\n                    Modelos de Veículos\n                  </Button>\n                )}\n                \n                {/* Transferir Veículos - Apenas para usuários administrativos (não transportadores) */}\n                {permissions.canViewUsers() && user?.role !== 'user' && (\n                  <Button\n                    variant=\"ghost\"\n                    className={cn(\n                      \"w-full justify-start text-white hover:bg-gray-600 text-sm\",\n                      location === \"/admin/vehicle-transfer\" ? \"bg-gray-600\" : \"bg-transparent\"\n                    )}\n                    onClick={() => handleNavigate(\"/admin/vehicle-transfer\")}\n                  >\n                    <RefreshCw className=\"mr-3 h-4 w-4\" />\n                    Transferir Veículos\n                  </Button>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Solicitar Licença - Todos podem solicitar */}\n        {permissions.canCreateLicenses() && (\n          <SidebarItem\n            icon={FileText}\n            label=\"Solicitar Licença\"\n            path=\"/request-license\"\n            isActive={location === \"/request-license\"}\n          />\n        )}\n        \n        {/* Acompanhar Licença - Todos podem acompanhar */}\n        {permissions.canTrackLicenses() && (\n          <SidebarItem\n            icon={ClipboardList}\n            label=\"Acompanhar Licença\"\n            path=\"/track-license\"\n            isActive={location === \"/track-license\"}\n          />\n        )}\n        \n        {/* Licenças Emitidas - Todos podem ver suas licenças emitidas */}\n        {permissions.canTrackLicenses() && (\n          <SidebarItem\n            icon={ListChecks}\n            label=\"Licenças Emitidas\"\n            path=\"/issued-licenses\"\n            isActive={location === \"/issued-licenses\"}\n          />\n        )}\n        \n        {/* MEUS BOLETOS - Conforme permissões */}\n        {permissions.canViewMyBoletos() && (\n          <SidebarItem\n            icon={Receipt}\n            label=\"Meus Boletos\"\n            path=\"/meus-boletos\"\n            isActive={location === \"/meus-boletos\"}\n          />\n        )}\n        \n        {/* Seção de Funcionalidades Administrativas */}\n        {user && ['admin', 'manager', 'supervisor', 'financial', 'operational'].includes(user.role) && (\n          <>\n            {!isCollapsed && (\n              <div className=\"pt-2 pb-2\">\n                <Separator className=\"bg-gray-700\" />\n                <p className=\"text-xs text-gray-400 uppercase mt-2 ml-2 font-semibold\">Administração</p>\n              </div>\n            )}\n            \n            {/* Dashboard AET - para perfis com acesso ao dashboard */}\n            {permissions.canViewDashboard() && (\n              <SidebarItem\n                icon={BarChart3}\n                label=\"Dashboard AET\"\n                path=\"/admin/dashboard-aet\"\n                isActive={location === \"/admin/dashboard-aet\"}\n              />\n            )}\n            \n            {/* Gerenciar Licenças - conforme permissões de gerenciamento */}\n            {user && ['admin', 'manager', 'supervisor', 'financial', 'operational'].includes(user.role) && (\n              <SidebarItem\n                icon={ClipboardEdit}\n                label=\"Gerenciar Licenças\"\n                path=\"/admin/licenses\"\n                isActive={location === \"/admin/licenses\" || location === \"/gerenciar-licencas\"}\n              />\n            )}\n            \n            {/* Importação em Massa de Licenças - para perfis operacionais */}\n            {user && ['admin', 'manager', 'supervisor', 'operational'].includes(user.role) && (\n              <SidebarItem\n                icon={UploadCloud}\n                label=\"Importar Licenças\"\n                path=\"/admin/bulk-license-import\"\n                isActive={location === \"/admin/bulk-license-import\"}\n              />\n            )}\n            \n            {/* Gerenciar Transportadores - conforme permissões */}\n            {user && ['admin', 'manager', 'supervisor', 'financial', 'operational'].includes(user.role) && (\n              <SidebarItem\n                icon={Building2}\n                label=\"Transportadores\"\n                path=\"/admin/transporters\"\n                isActive={location === \"/admin/transporters\"}\n              />\n            )}\n            \n            {/* Gerenciar Usuários - conforme permissões */}\n            {permissions.canViewUsers() && (\n              <SidebarItem\n                icon={Users}\n                label=\"Usuários\"\n                path=\"/admin/users\"\n                isActive={location === \"/admin/users\"}\n              />\n            )}\n            \n            {/* Tipos de Conjunto - apenas admin */}\n            {user?.role === 'admin' && (\n              <SidebarItem\n                icon={Settings}\n                label=\"Tipos de Conjunto\"\n                path=\"/admin/vehicle-set-types\"\n                isActive={location === \"/admin/vehicle-set-types\"}\n              />\n            )}\n            \n            {/* Módulo Financeiro - apenas para perfis financeiro, manager e admin */}\n            {permissions.canViewFinancial() && (\n              <SidebarItem\n                icon={Receipt}\n                label=\"Módulo Financeiro\"\n                path=\"/admin/boletos\"\n                isActive={location === \"/admin/boletos\"}\n              />\n            )}\n\n          </>\n        )}\n      </div>\n      \n      {/* Footer da Sidebar com informações do usuário */}\n      <div className=\"mt-auto border-t border-gray-700\">\n        {/* Botão de expandir quando colapsado */}\n        {!isMobile && isCollapsed && onToggleCollapse && (\n          <div className=\"p-2 flex justify-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onToggleCollapse}\n              className=\"text-white hover:bg-gray-700 p-2\"\n            >\n              <PanelLeftOpen className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n        \n        {/* Informações do usuário */}\n        <div className={cn(\n          \"p-3 bg-gray-800\",\n          isCollapsed ? \"flex justify-center\" : \"flex items-center space-x-3\"\n        )}>\n          <Avatar className=\"h-8 w-8\">\n            <AvatarFallback className=\"bg-blue-600 text-white text-sm\">\n              {userInitials}\n            </AvatarFallback>\n          </Avatar>\n          \n          {!isCollapsed && (\n            <>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-white truncate\">\n                  {user?.fullName}\n                </p>\n                <p className=\"text-xs text-gray-400 truncate\">\n                  {user?.email}\n                </p>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                disabled={logoutMutation.isPending}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700 p-1\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </>\n          )}\n          \n          {isCollapsed && (\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleLogout}\n                    disabled={logoutMutation.isPending}\n                    className=\"text-gray-300 hover:text-white hover:bg-gray-700 p-2\"\n                  >\n                    <LogOut className=\"h-4 w-4\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent side=\"right\" className=\"ml-2\">\n                  Sair ({user?.fullName})\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          )}\n        </div>\n      </div>\n      \n\n    </>\n  );\n\n  return isMobile ? (\n    <>\n      {/* Mobile Header */}\n      <div className=\"md:hidden fixed inset-x-0 top-0 z-20 bg-gray-900 text-white flex items-center justify-between h-16 px-4 shadow-md\">\n        <div className=\"flex items-center\">\n          <Sheet open={open} onOpenChange={setOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-white p-2 mr-2\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"p-0 bg-gray-800 text-white w-[250px] sm:w-[280px] overflow-y-auto max-h-screen\">\n              <div className=\"flex flex-col h-full\">\n                <NavItems />\n              </div>\n            </SheetContent>\n          </Sheet>\n          <Logo width={100} className=\"py-2\" />\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarFallback className=\"bg-gray-600 text-white text-sm\">\n              {userInitials}\n            </AvatarFallback>\n          </Avatar>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"text-gray-300 hover:text-white\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </>\n  ) : (\n    <>\n      {/* Desktop Sidebar - Responsiva com colapso */}\n      <div className={cn(\n        \"hidden md:flex md:flex-col md:fixed md:inset-y-0 bg-gray-800 text-white z-10 transition-all duration-300\",\n        isCollapsed ? \"md:w-16\" : \"md:w-56 lg:w-64 xl:w-72\",\n        className\n      )}>\n        <div className=\"flex flex-col h-full\">\n          <NavItems />\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":19036},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json, index, uniqueIndex, numeric, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { DEFAULT_VEHICLE_SET_TYPES } from './vehicle-set-types';\n\n// Define enum para os tipos de role/perfil de usuário\nexport const userRoleEnum = z.enum([\n  \"admin\", // Administrador (acesso completo)\n  \"operational\", // Operacional (gerenciamento de licenças e veículos)\n  \"supervisor\", // Supervisor (papel intermediário)\n  \"manager\", // Gerente (papel com permissões estendidas)\n  \"financial\", // Financeiro (acesso a transportadores, usuários e boletos)\n  \"user\" // Usuário transportador padrão\n]);\n\nexport type UserRole = z.infer<typeof userRoleEnum>;\n\n// Define enum para tipos de pessoa\nexport const personTypeEnum = z.enum([\n  \"pj\", // Pessoa Jurídica\n  \"pf\"  // Pessoa Física\n]);\n\nexport type PersonType = z.infer<typeof personTypeEnum>;\n\n// Transportador model\nexport const transporters = pgTable(\"transporters\", {\n  id: serial(\"id\").primaryKey(),\n  personType: text(\"person_type\").notNull(), // PJ ou PF\n  \n  // Campos comuns\n  name: text(\"name\").notNull(), // Razão Social (PJ) ou Nome Completo (PF)\n  documentNumber: text(\"document_number\").notNull().unique(), // CNPJ ou CPF\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  \n  // Campos específicos PJ\n  tradeName: text(\"trade_name\"), // Nome Fantasia\n  legalResponsible: text(\"legal_responsible\"), // Responsável Legal\n  \n  // Campos específicos PF\n  birthDate: text(\"birth_date\"), // Data de Nascimento para PF\n  nationality: text(\"nationality\"), // Nacionalidade para PF\n  idNumber: text(\"id_number\"), // RG para PF\n  idIssuer: text(\"id_issuer\"), // Órgão Emissor do RG\n  idState: text(\"id_state\"), // UF do RG\n  \n  // Endereço\n  street: text(\"street\"), // Logradouro\n  number: text(\"number\"), // Número\n  complement: text(\"complement\"), // Complemento\n  district: text(\"district\"), // Bairro\n  zipCode: text(\"zip_code\"), // CEP\n  city: text(\"city\"), // Cidade\n  state: text(\"state\"), // UF\n  \n  // Filiais (apenas para PJ)\n  subsidiaries: json(\"subsidiaries\").default('[]'), // Array com filiais (CNPJ, nome, endereço, etc)\n  \n  // Arquivos\n  documents: json(\"documents\").default('[]'), // URLs dos documentos anexados\n  \n  // Campo para retro-compatibilidade\n  contact1Name: text(\"contact1_name\"),\n  contact1Phone: text(\"contact1_phone\"),\n  contact2Name: text(\"contact2_name\"),\n  contact2Phone: text(\"contact2_phone\"),\n  \n  userId: integer(\"user_id\").references(() => users.id), // Referência para o usuário vinculado\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    // Índices básicos mantidos\n    documentNumberIdx: uniqueIndex(\"idx_transporter_document\").on(table.documentNumber),\n    userIdIdx: index(\"idx_transporter_user_id\").on(table.userId),\n    nameIdx: index(\"idx_transporter_name\").on(table.name),\n    \n    // Índices compostos para otimização de buscas\n    searchOptimizedIdx: index(\"idx_transporter_search\").on(table.name, table.documentNumber, table.tradeName),\n    personTypeNameIdx: index(\"idx_transporter_type_name\").on(table.personType, table.name)\n  };\n});\n\n// Esquema JSON para filiais (subsidiárias)\nexport const subsidiarySchema = z.object({\n  cnpj: z.string().min(14, \"CNPJ deve ter pelo menos 14 dígitos\"),\n  name: z.string().min(3, \"Razão social deve ter pelo menos 3 caracteres\"),\n  tradeName: z.string().optional(),\n  street: z.string().optional(),\n  number: z.string().optional(),\n  complement: z.string().optional(),\n  zipCode: z.string().optional(),\n  city: z.string().optional(),\n  state: z.string().optional(),\n  documents: z.array(z.string()).optional().default([]),\n});\n\n// Esquema JSON para documentos\nexport const documentSchema = z.object({\n  type: z.string(), // \"social_contract\", \"power_of_attorney\", etc.\n  url: z.string(),\n  filename: z.string(),\n});\n\n// Schema para inserção/atualização de transportador\nexport const insertTransporterSchema = z.object({\n  personType: personTypeEnum,\n  \n  // Campos comuns\n  name: z.string().min(3, \"Nome/Razão Social deve ter pelo menos 3 caracteres\"),\n  documentNumber: z.string().min(11, \"Documento deve ter pelo menos 11 dígitos\"),\n  email: z.string().email(\"Email inválido\"),\n  phone: z.string().optional(),\n  \n  // Campos específicos PJ\n  tradeName: z.string().optional(),\n  legalResponsible: z.string().optional(),\n  \n  // Campos específicos PF\n  birthDate: z.string().optional(),\n  nationality: z.string().optional(),\n  idNumber: z.string().optional(),\n  idIssuer: z.string().optional(),\n  idState: z.string().optional(),\n  \n  // Endereço\n  street: z.string().optional(),\n  number: z.string().optional(),\n  complement: z.string().optional(),\n  district: z.string().optional(),\n  zipCode: z.string().optional(),\n  city: z.string().optional(),\n  state: z.string().optional(),\n  \n  // Filiais (apenas para PJ)\n  subsidiaries: z.array(subsidiarySchema).optional().default([]),\n  \n  // Arquivos\n  documents: z.array(documentSchema).optional().default([]),\n  \n  // Campos para retro-compatibilidade\n  contact1Name: z.string().optional(),\n  contact1Phone: z.string().optional(),\n  contact2Name: z.string().optional(),\n  contact2Phone: z.string().optional(),\n});\n\n// User model\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  role: text(\"role\").default(\"user\").notNull(), // Novo campo: role como string (enum)\n  isAdmin: boolean(\"is_admin\").default(false).notNull(), // Mantido para compatibilidade\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    emailIdx: uniqueIndex(\"idx_user_email\").on(table.email),\n    roleIdx: index(\"idx_user_role\").on(table.role)\n  };\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  fullName: true,\n  phone: true,\n}).extend({\n  role: userRoleEnum.optional().default(\"user\"),\n});\n\n// Vehicle model\nexport const vehicles = pgTable(\"vehicles\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  plate: text(\"plate\").notNull(),\n  type: text(\"type\").notNull(), // Unidade Tratora, Semirreboque, Reboque, Dolly, Prancha\n  bodyType: text(\"body_type\"), // Tipo de Carroceria: ABERTA, BASCULANTE, PORTA-CONTÊINER, FECHADA, TANQUE\n  brand: text(\"brand\"),\n  model: text(\"model\"),\n  year: integer(\"year\"),\n  renavam: text(\"renavam\"),\n  tare: numeric(\"tare\").notNull(), // peso em kg\n  axleCount: integer(\"axle_count\"), // Quantidade de eixos\n  remarks: text(\"remarks\"),\n  crlvYear: integer(\"crlv_year\").notNull(),\n  crlvUrl: text(\"crlv_url\"),\n  ownerName: text(\"owner_name\"), // Nome do Proprietário\n  ownershipType: text(\"ownership_type\").default(\"proprio\").notNull(), // \"proprio\" ou \"terceiro\"\n  cmt: numeric(\"cmt\", { precision: 10, scale: 2 }), // Capacidade Máxima de Tração (apenas para unidade tratora)\n  status: text(\"status\").default(\"active\").notNull(),\n}, (table) => {\n  return {\n    // Índices básicos mantidos\n    plateIdx: index(\"idx_vehicle_plate\").on(table.plate),\n    userIdIdx: index(\"idx_vehicle_user_id\").on(table.userId),\n    statusIdx: index(\"idx_vehicle_status\").on(table.status),\n    typeIdx: index(\"idx_vehicle_type\").on(table.type),\n    \n    // Índices compostos para otimização de consultas frequentes\n    userStatusIdx: index(\"idx_vehicle_user_status\").on(table.userId, table.status),\n    plateUserIdx: index(\"idx_vehicle_plate_user\").on(table.plate, table.userId),\n    searchOptimizedIdx: index(\"idx_vehicle_search\").on(table.plate, table.brand, table.model, table.type),\n    typeStatusIdx: index(\"idx_vehicle_type_status\").on(table.type, table.status)\n  };\n});\n\nexport const insertVehicleSchema = createInsertSchema(vehicles)\n  .omit({ id: true, userId: true })\n  .extend({\n    // Campos obrigatórios com validações\n    plate: z.string().min(1, \"A placa é obrigatória\"),\n    type: z.string().min(1, \"O tipo de veículo é obrigatório\"),\n    bodyType: z.string().optional(), // Tipo de carroceria\n    renavam: z.string().min(1, \"O RENAVAM é obrigatório\"),\n    brand: z.string().min(1, \"A marca é obrigatória\"),\n    model: z.string().min(1, \"O modelo é obrigatório\"),\n    tare: z.coerce.number().min(1, \"A tara deve ser maior que zero\"),\n    axleCount: z.coerce.number().min(1, \"A quantidade de eixos deve ser maior que zero\"),\n    year: z.coerce.number().min(1950, \"O ano de fabricação é obrigatório\"),\n    crlvYear: z.coerce.number().optional(),\n    remarks: z.string().optional(),\n    status: z.string().optional(),\n    crlvFile: z.any().optional(),\n    ownerName: z.string().optional(), // Nome do Proprietário\n    ownershipType: z.enum([\"proprio\", \"terceiro\"]).default(\"proprio\"), // Tipo de propriedade\n    cmt: z.union([z.string(), z.number()]).pipe(z.coerce.number().positive()).optional(), // Capacidade Máxima de Tração (apenas para unidade tratora)\n  });\n\n// Enums for license status\nexport const licenseStatusEnum = z.enum([\n  \"pending_registration\", // Pedido em Cadastramento\n  \"registration_in_progress\", // Cadastro em Andamento\n  \"pending_documentation\", // Pendente Documentação\n  \"rejected\", // Reprovado - Pendência de Documentação\n  \"under_review\", // Análise do Órgão\n  \"pending_approval\", // Pendente Liberação\n  \"approved\", // Liberada\n  \"canceled\", // Cancelado\n]);\n\nexport type LicenseStatus = z.infer<typeof licenseStatusEnum>;\n\n// License type enum\nexport const licenseTypeEnum = z.enum([\n  \"roadtrain_9_axles\", // Rodotrem 9 eixos\n  \"bitrain_9_axles\", // Bitrem 9 eixos\n  \"bitrain_7_axles\", // Bitrem 7 eixos \n  \"bitrain_6_axles\", // Bitrem 6 eixos\n  \"flatbed\", // Prancha\n  \"romeo_and_juliet\", // Romeu e Julieta\n]);\n\nexport type LicenseType = z.infer<typeof licenseTypeEnum>;\n\n// Cargo type enums\nexport const nonFlatbedCargoTypeEnum = z.enum([\n  \"dry_cargo\", // Carga Seca\n  \"liquid_cargo\", // Líquida\n  \"live_cargo\", // Viva\n  \"sugar_cane\", // Cana de Açúcar\n]);\n\nexport const flatbedCargoTypeEnum = z.enum([\n  \"indivisible_cargo\", // Carga Indivisível\n  \"agricultural_machinery\", // Máquinas Agrícolas\n  \"oversized\", // SUPERDIMENSIONADA\n]);\n\nexport const cargoTypeEnum = z.union([nonFlatbedCargoTypeEnum, flatbedCargoTypeEnum]);\n\nexport type NonFlatbedCargoType = z.infer<typeof nonFlatbedCargoTypeEnum>;\nexport type FlatbedCargoType = z.infer<typeof flatbedCargoTypeEnum>;\nexport type CargoType = z.infer<typeof cargoTypeEnum>;\n\n// License requests model\nexport const licenseRequests = pgTable(\"license_requests\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  transporterId: integer(\"transporter_id\").references(() => transporters.id),\n  requestNumber: text(\"request_number\").notNull().unique(),\n  type: text(\"type\").notNull(), // From licenseTypeEnum\n  mainVehiclePlate: text(\"main_vehicle_plate\").notNull(),\n  tractorUnitId: integer(\"tractor_unit_id\").references(() => vehicles.id),\n  firstTrailerId: integer(\"first_trailer_id\").references(() => vehicles.id),\n  dollyId: integer(\"dolly_id\").references(() => vehicles.id),\n  secondTrailerId: integer(\"second_trailer_id\").references(() => vehicles.id),\n  firstTrailerManualPlate: text(\"first_trailer_manual_plate\"), // Placa manual para 1ª carreta\n  dollyManualPlate: text(\"dolly_manual_plate\"), // Placa manual para dolly\n  secondTrailerManualPlate: text(\"second_trailer_manual_plate\"), // Placa manual para 2ª carreta\n  flatbedId: integer(\"flatbed_id\").references(() => vehicles.id),\n  length: numeric(\"length\", { precision: 10, scale: 2 }).notNull(), // total length in meters\n  width: numeric(\"width\", { precision: 5, scale: 2 }), // width in meters\n  height: numeric(\"height\", { precision: 5, scale: 2 }), // height in meters\n  cargoType: text(\"cargo_type\"), // tipo de carga (union de nonFlatbedCargoType e flatbedCargoType)\n  additionalPlates: text(\"additional_plates\").array(), // Lista de placas adicionais \n  additionalPlatesDocuments: text(\"additional_plates_documents\").array(), // URLs dos documentos das placas adicionais\n  states: text(\"states\").array().notNull(),\n  status: text(\"status\").default(\"pending_registration\").notNull(), // Status principal (legado)\n  stateStatuses: text(\"state_statuses\").array(), // Array com formato \"ESTADO:STATUS\" (ex: \"SP:approved\")\n  stateFiles: text(\"state_files\").array(), // Array com formato \"ESTADO:URL\" (ex: \"SP:http://...pdf\")\n  stateAETNumbers: text(\"state_aet_numbers\").array(), // Array com formato \"ESTADO:NUMERO_AET\" (ex: \"SP:123456\")\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  isDraft: boolean(\"is_draft\").default(true).notNull(),\n  comments: text(\"comments\"),\n  licenseFileUrl: text(\"license_file_url\").default(''),\n  validUntil: timestamp(\"valid_until\"),\n  issuedAt: timestamp(\"issued_at\"),\n  aetNumber: text(\"aet_number\"),\n  selectedCnpj: text(\"selected_cnpj\"), // CNPJ selecionado da empresa transportadora (global - legado)\n  stateCnpjs: text(\"state_cnpjs\").array(), // Array com formato \"ESTADO:CNPJ\" (ex: \"SP:12345678000100\")\n}, (table) => {\n  return {\n    requestNumberIdx: uniqueIndex(\"idx_license_request_number\").on(table.requestNumber),\n    userIdIdx: index(\"idx_license_user_id\").on(table.userId),\n    transporterIdIdx: index(\"idx_license_transporter_id\").on(table.transporterId),\n    statusIdx: index(\"idx_license_status\").on(table.status),\n    isDraftIdx: index(\"idx_license_is_draft\").on(table.isDraft),\n    createdAtIdx: index(\"idx_license_created_at\").on(table.createdAt),\n    mainVehiclePlateIdx: index(\"idx_license_main_vehicle\").on(table.mainVehiclePlate)\n  };\n});\n\nexport const insertLicenseRequestSchema = createInsertSchema(licenseRequests)\n  .omit({ \n    id: true, \n    userId: true, \n    requestNumber: true, \n    createdAt: true, \n    updatedAt: true, \n    licenseFileUrl: true, \n    validUntil: true,\n    aetNumber: true,\n    stateAETNumbers: true\n  })\n  .extend({\n    transporterId: z.number().positive(\"Um transportador deve ser selecionado\"),\n    states: z.array(z.string()).min(1, \"Selecione pelo menos um estado\"),\n    cargoType: cargoTypeEnum.refine(val => !!val, {\n      message: \"O tipo de carga é obrigatório\",\n      path: [\"cargoType\"]\n    }),\n    length: z.coerce.number().positive(\"O comprimento deve ser positivo\"),\n    width: z.coerce.number().positive(\"A largura deve ser um valor positivo\"),\n    height: z.coerce.number().positive(\"A altura deve ser um valor positivo\"),\n    additionalPlates: z.array(z.string()).optional().default([]),\n    additionalPlatesDocuments: z.array(z.string()).optional().default([]),\n    firstTrailerManualPlate: z.string().optional(),\n    dollyManualPlate: z.string().optional(),\n    secondTrailerManualPlate: z.string().optional(),\n  })\n  .superRefine((data, ctx) => {\n    const licenseType = data.type;\n    \n    // Buscar o tipo de conjunto correspondente\n    const vehicleSetType = DEFAULT_VEHICLE_SET_TYPES.find(\n      (vst) => vst.id === licenseType || vst.name === licenseType\n    );\n    \n    // Validação dinâmica de dimensões baseada no tipo de conjunto\n    if (vehicleSetType?.dimensionLimits) {\n      const limits = vehicleSetType.dimensionLimits;\n      \n      // Validar comprimento\n      if (limits.minLength && data.length < limits.minLength) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.too_small,\n          minimum: limits.minLength,\n          type: \"number\",\n          inclusive: true,\n          exact: false,\n          message: `O comprimento deve ser de no mínimo ${limits.minLength.toFixed(2)} metros`,\n          path: [\"length\"]\n        });\n      }\n      if (limits.maxLength && data.length > limits.maxLength) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.too_big,\n          maximum: limits.maxLength,\n          type: \"number\",\n          inclusive: true,\n          exact: false,\n          message: `O comprimento deve ser de no máximo ${limits.maxLength.toFixed(2)} metros`,\n          path: [\"length\"]\n        });\n      }\n      \n      // Validar largura\n      if (limits.maxWidth && data.width && data.width > limits.maxWidth) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.too_big,\n          maximum: limits.maxWidth,\n          type: \"number\",\n          inclusive: true,\n          exact: false,\n          message: `A largura máxima permitida é ${limits.maxWidth.toFixed(2)} metros`,\n          path: [\"width\"]\n        });\n      }\n      \n      // Validar altura\n      if (limits.maxHeight && data.height && data.height > limits.maxHeight) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.too_big,\n          maximum: limits.maxHeight,\n          type: \"number\",\n          inclusive: true,\n          exact: false,\n          message: `A altura máxima permitida é ${limits.maxHeight.toFixed(2)} metros`,\n          path: [\"height\"]\n        });\n      }\n    }\n    \n    // VALIDAÇÃO OBRIGATÓRIA: Unidade Tratora/Cavalo sempre obrigatória\n    if (!data.tractorUnitId && !data.mainVehiclePlate) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Falta Placa da Linha de frente\",\n        path: [\"tractorUnitId\"]\n      });\n    }\n\n    // VALIDAÇÕES ESPECÍFICAS POR TIPO DE LICENÇA\n    if (licenseType?.includes('flatbed') || licenseType?.includes('prancha')) {\n      // TIPO PRANCHA: Cavalo + Prancha obrigatórios\n      if (!data.flatbedId) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"A Prancha é obrigatória para licenças do tipo Prancha\",\n          path: [\"flatbedId\"]\n        });\n      }\n    } else if (licenseType?.includes('rodotrem') || licenseType?.includes('road_train')) {\n      // TIPO RODOTREM: Cavalo + 1ª Carreta + Dolly + 2ª Carreta obrigatórios\n      if (!data.firstTrailerId && !data.firstTrailerManualPlate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"A 1ª Carreta é obrigatória para licenças do tipo Rodotrem\",\n          path: [\"firstTrailerId\"]\n        });\n      }\n      if (!data.dollyId && !data.dollyManualPlate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"O Dolly é obrigatório para licenças do tipo Rodotrem\",\n          path: [\"dollyId\"]\n        });\n      }\n      if (!data.secondTrailerId && !data.secondTrailerManualPlate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"A 2ª Carreta é obrigatória para licenças do tipo Rodotrem\",\n          path: [\"secondTrailerId\"]\n        });\n      }\n    } else if (licenseType?.includes('bitrem') || licenseType?.includes('bitrain')) {\n      // TIPO BITREM: Cavalo + 1ª Carreta + 2ª Carreta obrigatórios (sem dolly)\n      if (!data.firstTrailerId && !data.firstTrailerManualPlate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"A 1ª Carreta é obrigatória para licenças do tipo Bitrem\",\n          path: [\"firstTrailerId\"]\n        });\n      }\n      if (!data.secondTrailerId && !data.secondTrailerManualPlate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"A 2ª Carreta é obrigatória para licenças do tipo Bitrem\",\n          path: [\"secondTrailerId\"]\n        });\n      }\n    } else {\n      // TIPOS SIMPLES: Cavalo + 1ª Carreta obrigatórios\n      if (!data.firstTrailerId && !data.firstTrailerManualPlate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"A 1ª Carreta é obrigatória\",\n          path: [\"firstTrailerId\"]\n        });\n      }\n    }\n  });\n\n// Schema para rascunhos - não aplicar validações rigorosas de linha de frente\nexport const insertDraftLicenseSchema = createInsertSchema(licenseRequests)\n  .omit({ \n    id: true, \n    userId: true, \n    requestNumber: true, \n    createdAt: true, \n    updatedAt: true, \n    licenseFileUrl: true, \n    validUntil: true,\n    aetNumber: true,\n    stateAETNumbers: true\n  })\n  .extend({\n    type: licenseTypeEnum,\n    isDraft: z.literal(true),\n    transporterId: z.number().optional(),\n    states: z.array(z.string()).optional().default([]),\n    cargoType: cargoTypeEnum.optional(),\n    length: z.coerce.number().optional(),\n    width: z.coerce.number().optional(),\n    height: z.coerce.number().optional(),\n    additionalPlates: z.array(z.string()).optional().default([]),\n    additionalPlatesDocuments: z.array(z.string()).optional().default([]),\n    firstTrailerManualPlate: z.string().optional(),\n    dollyManualPlate: z.string().optional(),\n    secondTrailerManualPlate: z.string().optional(),\n  });\n\nexport const updateLicenseStatusSchema = createInsertSchema(licenseRequests)\n  .pick({\n    status: true,\n    comments: true,\n  })\n  .extend({\n    licenseFile: z.any().optional(),\n    validUntil: z.string().optional(),\n    issuedAt: z.string().optional(),\n    state: z.string().optional(), // Estado específico sendo atualizado\n    stateStatus: z.enum(licenseStatusEnum.options).optional(), // Status para o estado específico\n    stateFile: z.any().optional(), // Arquivo para o estado específico\n    selectedCnpj: z.string().optional(), // CNPJ selecionado da empresa transportadora (global - legado)\n    stateCnpj: z.string().optional(), // CNPJ específico para este estado\n    aetNumber: z.string().optional(), // Número AET\n  });\n\n// Schema para quando todos os estados forem setados, atualizar o status geral\nexport const updateLicenseStateSchema = z.object({\n  licenseId: z.number(),\n  state: z.string(),\n  status: licenseStatusEnum,\n  file: z.any().optional(),\n  comments: z.string().optional(),\n  validUntil: z.string().optional(),\n  issuedAt: z.string().optional(),\n  aetNumber: z.string().optional(), // Número da AET para o status \"Análise do Órgão\"\n  selectedCnpj: z.string().optional(), // CNPJ selecionado da empresa transportadora (global - legado)\n  stateCnpj: z.string().optional(), // CNPJ específico para este estado\n});\n\n// Type definitions\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Transporter = typeof transporters.$inferSelect;\nexport type InsertTransporter = z.infer<typeof insertTransporterSchema>;\n\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\n\nexport type LicenseRequest = typeof licenseRequests.$inferSelect;\nexport type InsertLicenseRequest = z.infer<typeof insertLicenseRequestSchema>;\nexport type InsertDraftLicense = z.infer<typeof insertDraftLicenseSchema>;\nexport type UpdateLicenseStatus = z.infer<typeof updateLicenseStatusSchema>;\nexport type UpdateLicenseState = z.infer<typeof updateLicenseStateSchema>;\n\n// Estados disponíveis para solicitação de licenças AET\nexport const brazilianStates = [\n  { code: \"AL\", name: \"Alagoas\" },\n  { code: \"BA\", name: \"Bahia\" },\n  { code: \"CE\", name: \"Ceará\" },\n  { code: \"DF\", name: \"Distrito Federal\" },\n  { code: \"DNIT\", name: \"FEDERAL\" },\n  { code: \"ES\", name: \"Espírito Santo\" },\n  { code: \"GO\", name: \"Goiás\" },\n  { code: \"MG\", name: \"Minas Gerais\" },\n  { code: \"MS\", name: \"Mato Grosso do Sul\" },\n  { code: \"MT\", name: \"Mato Grosso\" },\n  { code: \"PA\", name: \"Pará\" },\n  { code: \"PE\", name: \"Pernambuco\" },\n  { code: \"PR\", name: \"Paraná\" },\n  { code: \"RJ\", name: \"Rio de Janeiro\" },\n  { code: \"RS\", name: \"Rio Grande do Sul\" },\n  { code: \"SC\", name: \"Santa Catarina\" },\n  { code: \"SE\", name: \"Sergipe\" },\n  { code: \"SP\", name: \"São Paulo\" },\n  { code: \"TO\", name: \"Tocantins\" },\n];\n\n// Todos os estados brasileiros (em ordem alfabética) para cadastro de endereço\nexport const allBrazilianStates = [\n  { code: \"AC\", name: \"Acre\" },\n  { code: \"AL\", name: \"Alagoas\" },\n  { code: \"AP\", name: \"Amapá\" },\n  { code: \"AM\", name: \"Amazonas\" },\n  { code: \"BA\", name: \"Bahia\" },\n  { code: \"CE\", name: \"Ceará\" },\n  { code: \"DF\", name: \"Distrito Federal\" },\n  { code: \"ES\", name: \"Espírito Santo\" },\n  { code: \"GO\", name: \"Goiás\" },\n\n  { code: \"MT\", name: \"Mato Grosso\" },\n  { code: \"MS\", name: \"Mato Grosso do Sul\" },\n  { code: \"MG\", name: \"Minas Gerais\" },\n  { code: \"PA\", name: \"Pará\" },\n  { code: \"PB\", name: \"Paraíba\" },\n  { code: \"PR\", name: \"Paraná\" },\n  { code: \"PE\", name: \"Pernambuco\" },\n  { code: \"PI\", name: \"Piauí\" },\n  { code: \"RJ\", name: \"Rio de Janeiro\" },\n  { code: \"RN\", name: \"Rio Grande do Norte\" },\n  { code: \"RS\", name: \"Rio Grande do Sul\" },\n  { code: \"RO\", name: \"Rondônia\" },\n  { code: \"RR\", name: \"Roraima\" },\n  { code: \"SC\", name: \"Santa Catarina\" },\n  { code: \"SP\", name: \"São Paulo\" },\n  { code: \"SE\", name: \"Sergipe\" },\n  { code: \"TO\", name: \"Tocantins\" },\n];\n\n// Enum para tipo de veículo\nexport const vehicleTypeEnum = z.enum([\n  \"tractor_unit\", // Unidade Tratora (Cavalo)\n  \"truck\", // Caminhão\n  \"semi_trailer\", // Semirreboque\n  \"trailer\", // Reboque\n  \"dolly\", // Dolly\n  \"flatbed\", // Prancha\n]);\n\nexport type VehicleType = z.infer<typeof vehicleTypeEnum>;\n\n// Opções de veículos para interface\nexport const vehicleTypeOptions = [\n  { value: \"tractor_unit\", label: \"Unidade Tratora (Cavalo)\" },\n  { value: \"truck\", label: \"Caminhão\" },\n  { value: \"semi_trailer\", label: \"Semirreboque\" },\n  { value: \"trailer\", label: \"Reboque\" },\n  { value: \"dolly\", label: \"Dolly\" },\n  { value: \"flatbed\", label: \"Prancha\" },\n];\n\n// Enum para tipos de carroceria\nexport const vehicleBodyTypeEnum = z.enum([\n  \"open\", // Aberta\n  \"dump\", // Basculante\n  \"cattle\", // Boiadeiro\n  \"sugar_cane\", // Cana de Açúcar\n  \"container\", // Container\n  \"closed\", // Fechada\n  \"mechanical_operational\", // Mecânico operacional\n  \"platform\", // Plataforma\n  \"flatbed\", // Prancha\n  \"car_carrier\", // Prancha - Cegonha\n  \"extendable_flatbed\", // Prancha Extensiva\n  \"dump_truck\", // Rodo Caçamba\n  \"roll_on_roll_off\", // Rollon Rollof\n  \"silo\", // SILO\n  \"mobile_substation\", // Subestação Móvel\n  \"tank\", // Tanque\n  \"log_carrier\", // Tran Toras\n  \"vtav\", // VTAV\n]);\n\nexport type VehicleBodyType = z.infer<typeof vehicleBodyTypeEnum>;\n\n// Status History model\nexport const statusHistories = pgTable(\"status_histories\", {\n  id: serial(\"id\").primaryKey(),\n  licenseId: integer(\"license_id\").notNull().references(() => licenseRequests.id),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  state: text(\"state\").notNull(), // Estado da federação: SP, MG, etc.\n  oldStatus: text(\"old_status\").notNull(), // Status anterior\n  newStatus: text(\"new_status\").notNull(), // Novo status\n  comments: text(\"comments\"), // Comentários/observações sobre a alteração\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(), // Data/hora da alteração\n}, (table) => {\n  return {\n    licenseIdIdx: index(\"idx_history_license_id\").on(table.licenseId),\n    userIdIdx: index(\"idx_history_user_id\").on(table.userId),\n    stateIdx: index(\"idx_history_state\").on(table.state),\n    createdAtIdx: index(\"idx_history_created_at\").on(table.createdAt)\n  };\n});\n\nexport const insertStatusHistorySchema = createInsertSchema(statusHistories)\n  .omit({ id: true, createdAt: true });\n\nexport type StatusHistory = typeof statusHistories.$inferSelect;\nexport type InsertStatusHistory = z.infer<typeof insertStatusHistorySchema>;\n\nexport const bodyTypeOptions = [\n  { value: \"open\", label: \"Aberta\" },\n  { value: \"dump\", label: \"Basculante\" },\n  { value: \"cattle\", label: \"Boiadeiro\" },\n  { value: \"sugar_cane\", label: \"Cana de Açúcar\" },\n  { value: \"container\", label: \"Container\" },\n  { value: \"closed\", label: \"Fechada\" },\n  { value: \"mechanical_operational\", label: \"Mecânico operacional\" },\n  { value: \"platform\", label: \"Plataforma\" },\n  { value: \"flatbed\", label: \"Prancha\" },\n  { value: \"car_carrier\", label: \"Prancha - Cegonha\" },\n  { value: \"extendable_flatbed\", label: \"Prancha Extensiva\" },\n  { value: \"dump_truck\", label: \"Rodo Caçamba\" },\n  { value: \"roll_on_roll_off\", label: \"Rollon Rollof\" },\n  { value: \"silo\", label: \"SILO\" },\n  { value: \"mobile_substation\", label: \"Subestação Móvel\" },\n  { value: \"tank\", label: \"Tanque\" },\n  { value: \"log_carrier\", label: \"Tran Toras\" },\n  { value: \"vtav\", label: \"VTAV\" },\n];\n\n// Vehicle Models - Cadastro de Modelos de Veículos\nexport const vehicleModels = pgTable(\"vehicle_models\", {\n  id: serial(\"id\").primaryKey(),\n  brand: text(\"brand\").notNull(), // Marca (ex: Volvo, Scania, Mercedes-Benz)\n  model: text(\"model\").notNull(), // Modelo (ex: FH 460, R450, Actros 2651)\n  vehicleType: text(\"vehicle_type\").notNull(), // Tipo de veículo\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    brandIdx: index(\"idx_vehicle_model_brand\").on(table.brand),\n    typeIdx: index(\"idx_vehicle_model_type\").on(table.vehicleType),\n    brandModelIdx: index(\"idx_vehicle_model_brand_model\").on(table.brand, table.model)\n  };\n});\n\nexport const insertVehicleModelSchema = createInsertSchema(vehicleModels)\n  .omit({ id: true, createdAt: true });\n\nexport type VehicleModel = typeof vehicleModels.$inferSelect;\nexport type InsertVehicleModel = z.infer<typeof insertVehicleModelSchema>;\n\n// Enum para status dos boletos\nexport const boletoBankingStatusEnum = z.enum([\n  \"aguardando_pagamento\", // Aguardando Pagamento\n  \"pago\", // Pago\n  \"vencido\" // Vencido\n]);\n\nexport type BoletoBankingStatus = z.infer<typeof boletoBankingStatusEnum>;\n\n// Tabela de Boletos Financeiros\nexport const boletos = pgTable(\"boletos\", {\n  id: serial(\"id\").primaryKey(),\n  transportadorId: integer(\"transportador_id\").notNull().references(() => transporters.id),\n  nomeTransportador: text(\"nome_transportador\").notNull(), // Redundância para facilitar listagem\n  cpfCnpj: text(\"cpf_cnpj\").notNull(), // CPF/CNPJ do transportador\n  numeroBoleto: text(\"numero_boleto\").notNull(), // Número do boleto\n  valor: numeric(\"valor\", { precision: 10, scale: 2 }).notNull(), // Valor com 2 decimais\n  dataEmissao: date(\"data_emissao\").notNull(), // Data de emissão\n  dataVencimento: date(\"data_vencimento\").notNull(), // Data de vencimento\n  status: text(\"status\").notNull().default(\"aguardando_pagamento\"), // Status do boleto\n  uploadBoletoUrl: text(\"upload_boleto_url\"), // URL do arquivo do boleto\n  uploadNfUrl: text(\"upload_nf_url\"), // URL do arquivo da nota fiscal\n  observacoes: text(\"observacoes\"), // Campo de observações\n  criadoEm: timestamp(\"criado_em\").defaultNow().notNull(),\n  atualizadoEm: timestamp(\"atualizado_em\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    transportadorIdIdx: index(\"idx_boleto_transportador_id\").on(table.transportadorId),\n    statusIdx: index(\"idx_boleto_status\").on(table.status),\n    vencimentoIdx: index(\"idx_boleto_vencimento\").on(table.dataVencimento),\n    numeroBoletoIdx: index(\"idx_boleto_numero\").on(table.numeroBoleto),\n  };\n});\n\nexport const insertBoletoSchema = createInsertSchema(boletos)\n  .omit({ id: true, criadoEm: true, atualizadoEm: true })\n  .extend({\n    valor: z.coerce.number().positive(\"O valor deve ser positivo\"),\n    dataEmissao: z.string().refine((date) => !isNaN(Date.parse(date)), {\n      message: \"Data de emissão inválida\",\n    }),\n    dataVencimento: z.string().refine((date) => !isNaN(Date.parse(date)), {\n      message: \"Data de vencimento inválida\",\n    }),\n    numeroBoleto: z.string().min(1, \"Número do boleto é obrigatório\"),\n    cpfCnpj: z.string().regex(/^(\\d{11}|\\d{14})$/, \"CPF deve ter 11 dígitos ou CNPJ deve ter 14 dígitos\"),\n  })\n  .superRefine((val, ctx) => {\n    // Validar se data de emissão é anterior à data de vencimento\n    const emissao = new Date(val.dataEmissao);\n    const vencimento = new Date(val.dataVencimento);\n    \n    if (emissao >= vencimento) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"A data de emissão deve ser anterior à data de vencimento\",\n        path: [\"dataVencimento\"],\n      });\n    }\n  });\n\nexport type Boleto = typeof boletos.$inferSelect;\nexport type InsertBoleto = z.infer<typeof insertBoletoSchema>;\n\n// Status options para interface\nexport const boletoStatusOptions = [\n  { value: \"aguardando_pagamento\", label: \"Aguardando Pagamento\" },\n  { value: \"pago\", label: \"Pago\" },\n  { value: \"vencido\", label: \"Vencido\" },\n];\n\n// Nova tabela de licenças emitidas por estado com validação precisa por composição veicular\nexport const licencasEmitidas = pgTable(\"licencas_emitidas\", {\n  id: serial(\"id\").primaryKey(),\n  pedidoId: integer(\"pedido_id\").references(() => licenseRequests.id, { onDelete: 'cascade' }).notNull(),\n  estado: text(\"estado\").notNull(), // UF do estado\n  numeroLicenca: text(\"numero_licenca\").notNull(), // Número AET gerado\n  \n  // Placas por tipo de veículo na composição\n  placaUnidadeTratora: text(\"placa_unidade_tratora\"), // Cavalo mecânico\n  placaPrimeiraCarreta: text(\"placa_primeira_carreta\"), // Primeira carreta/reboque\n  placaSegundaCarreta: text(\"placa_segunda_carreta\"), // Segunda carreta (bitrem/rodotrem)\n  placaDolly: text(\"placa_dolly\"), // Dolly (para rodotrem)\n  placaPrancha: text(\"placa_prancha\"), // Prancha (para tipo prancha)\n  placaReboque: text(\"placa_reboque\"), // Reboque (Romeu e Julieta)\n  \n  // Dados da licença\n  dataEmissao: timestamp(\"data_emissao\").notNull(),\n  dataValidade: timestamp(\"data_validade\").notNull(),\n  status: text(\"status\").notNull().default(\"emitida\"), // emitida, vencida, cancelada\n  \n  // Campos adicionais\n  cnpjSelecionado: text(\"cnpj_selecionado\"), // CNPJ usado para emissão\n  arquivoLicenca: text(\"arquivo_licenca\"), // URL do arquivo da licença\n  observacoes: text(\"observacoes\"), // Comentários específicos\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull()\n}, (table) => {\n  return {\n    // Índices para validação eficiente\n    estadoValidadeIdx: index(\"idx_licenca_estado_validade\").on(table.estado, table.dataValidade),\n    statusValidadeIdx: index(\"idx_licenca_status_validade\").on(table.status, table.dataValidade),\n    numeroLicencaIdx: uniqueIndex(\"idx_licenca_numero\").on(table.numeroLicenca),\n    \n    // Índices por placa para validação rápida\n    placaTratoraIdx: index(\"idx_licenca_placa_tratora\").on(table.placaUnidadeTratora),\n    placaPrimeiraIdx: index(\"idx_licenca_placa_primeira\").on(table.placaPrimeiraCarreta),\n    placaSegundaIdx: index(\"idx_licenca_placa_segunda\").on(table.placaSegundaCarreta),\n    placaDollyIdx: index(\"idx_licenca_placa_dolly\").on(table.placaDolly),\n    placaPranchaIdx: index(\"idx_licenca_placa_prancha\").on(table.placaPrancha),\n    placaReboqueIdx: index(\"idx_licenca_placa_reboque\").on(table.placaReboque),\n    \n    // Índice composto para busca por estado + placas\n    estadoPlacasIdx: index(\"idx_licenca_estado_placas\").on(\n      table.estado, \n      table.placaUnidadeTratora,\n      table.placaPrimeiraCarreta,\n      table.placaSegundaCarreta\n    )\n  };\n});\n\n// Tabela legacy mantida para compatibilidade\nexport const stateLicenses = pgTable(\"state_licenses\", {\n  id: serial(\"id\").primaryKey(),\n  licenseRequestId: integer(\"license_request_id\").notNull().references(() => licenseRequests.id),\n  state: text(\"state\").notNull(), // Estado específico (AL, MG, SP, etc.)\n  status: text(\"status\").notNull().default(\"pending_registration\"), // Status específico do estado\n  aetNumber: text(\"aet_number\"), // Número AET específico do estado\n  issuedAt: timestamp(\"issued_at\"), // Data de emissão específica do estado\n  validUntil: timestamp(\"valid_until\"), // Data de validade específica do estado\n  comments: text(\"comments\"), // Observações específicas do estado\n  selectedCnpj: text(\"selected_cnpj\"), // CNPJ selecionado para este estado\n  licenseFileUrl: text(\"license_file_url\"), // URL do arquivo de licença específico\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    licenseRequestIdIdx: index(\"idx_state_licenses_request_id\").on(table.licenseRequestId),\n    stateIdx: index(\"idx_state_licenses_state\").on(table.state),\n    statusIdx: index(\"idx_state_licenses_status\").on(table.status),\n    validUntilIdx: index(\"idx_state_licenses_valid_until\").on(table.validUntil),\n    // Índice único para evitar duplicatas de estado por licença\n    uniqueStatePerLicense: uniqueIndex(\"unique_state_per_license\").on(table.licenseRequestId, table.state)\n  };\n});\n\n// Schemas para a nova tabela de licenças emitidas\nexport const insertLicencaEmitidaSchema = createInsertSchema(licencasEmitidas)\n  .omit({ id: true, createdAt: true, updatedAt: true });\n\nexport const insertStateLicenseSchema = createInsertSchema(stateLicenses)\n  .omit({ id: true, createdAt: true, updatedAt: true });\n\n// Tipos TypeScript para licenças emitidas\nexport type LicencaEmitida = typeof licencasEmitidas.$inferSelect;\nexport type InsertLicencaEmitida = z.infer<typeof insertLicencaEmitidaSchema>;\n\nexport type StateLicense = typeof stateLicenses.$inferSelect;\nexport type InsertStateLicense = z.infer<typeof insertStateLicenseSchema>;\n\n// Tabela para tipos de conjunto personalizados\nexport const vehicleSetTypes = pgTable(\"vehicle_set_types\", {\n  id: text(\"id\").primaryKey(), // UUID ou string única\n  name: text(\"name\").notNull(),\n  label: text(\"label\").notNull(),\n  description: text(\"description\"),\n  axleConfiguration: json(\"axle_configuration\").notNull(), // JSON com configuração de eixos\n  dimensionLimits: json(\"dimension_limits\").notNull(), // JSON com limites de dimensões\n  vehicleTypes: json(\"vehicle_types\").notNull(), // JSON com tipos de veículos permitidos\n  iconPath: text(\"icon_path\"),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    nameIdx: index(\"idx_vehicle_set_types_name\").on(table.name),\n    isActiveIdx: index(\"idx_vehicle_set_types_is_active\").on(table.isActive),\n  };\n});\n\nexport const insertVehicleSetTypeSchema = createInsertSchema(vehicleSetTypes)\n  .omit({ createdAt: true, updatedAt: true });\n\nexport type InsertVehicleSetType = z.infer<typeof insertVehicleSetTypeSchema>;\nexport type VehicleSetTypeDB = typeof vehicleSetTypes.$inferSelect;\n","size_bytes":38316},"client/src/components/ui/vehicle-type-image.tsx":{"content":"import { FC } from 'react';\nimport { Truck } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { VehicleSetType } from '@shared/vehicle-set-types';\n\n// Importando as imagens dos tipos de veículos\nimport bitrain6AxlesImg from '../../assets/vehicles/bitrain_6_axles.png';\nimport bitrain7AxlesImg from '../../assets/vehicles/bitrain_7_axles.png';\nimport bitrain9AxlesImg from '../../assets/vehicles/bitrain_9_axles.png';\nimport roadtrain9AxlesImg from '../../assets/vehicles/roadtrain_9_axles.png';\nimport flatbedImg from '../../assets/vehicles/flatbed.png';\nimport romeoAndJulietImg from '../../assets/vehicles/romeo_and_juliet.png';\n\ninterface VehicleTypeImageProps {\n  type: string;\n  className?: string;\n  iconSize?: number;\n}\n\nexport const VehicleTypeImage: FC<VehicleTypeImageProps> = ({ \n  type, \n  className = \"\",\n  iconSize = 20\n}) => {\n  // Buscar tipos personalizados da API\n  const { data: vehicleSetTypes = [] } = useQuery<VehicleSetType[]>({\n    queryKey: ['/api/admin/vehicle-set-types'],\n    staleTime: 2 * 60 * 1000, // 2 minutos de cache\n  });\n\n  // Verificar se é um tipo personalizado com imagem\n  const customType = vehicleSetTypes.find(vst => vst.name === type);\n  if (customType && customType.imageUrl) {\n    return (\n      <img \n        src={customType.imageUrl} \n        alt={customType.label} \n        className={`w-auto ${className}`}\n        style={{ \n          height: `${iconSize}px`,\n          objectFit: 'contain',\n          objectPosition: 'center'\n        }}\n      />\n    );\n  }\n\n  // Verificar o tipo de veículo e retornar a imagem apropriada (tipos padrão)\n  switch (type) {\n    case 'bitrain_6_axles':\n      return (\n        <img \n          src={bitrain6AxlesImg} \n          alt=\"Bitrem 6 eixos\" \n          className={`w-auto ${className}`}\n          style={{ \n            height: `${iconSize}px`,\n            objectFit: 'contain',\n            objectPosition: 'center'\n          }}\n        />\n      );\n    case 'bitrain_9_axles':\n      return (\n        <img \n          src={bitrain9AxlesImg} \n          alt=\"Bitrem 9 eixos\" \n          className={`w-auto ${className}`}\n          style={{ \n            height: `${iconSize}px`,\n            objectFit: 'contain',\n            objectPosition: 'center'\n          }}\n        />\n      );\n    case 'bitrain_7_axles':\n      return (\n        <img \n          src={bitrain7AxlesImg} \n          alt=\"Bitrem 7 eixos\" \n          className={`w-auto ${className}`}\n          style={{ \n            height: `${iconSize}px`,\n            objectFit: 'contain',\n            objectPosition: 'center'\n          }}\n        />\n      );\n    case 'roadtrain_9_axles':\n      return (\n        <img \n          src={roadtrain9AxlesImg} \n          alt=\"Rodotrem 9 eixos\" \n          className={`w-auto ${className}`}\n          style={{ \n            height: `${iconSize}px`,\n            objectFit: 'contain',\n            objectPosition: 'center'\n          }}\n        />\n      );\n    case 'flatbed':\n      return (\n        <img \n          src={flatbedImg} \n          alt=\"Prancha\" \n          className={`w-auto ${className}`}\n          style={{ \n            height: `${iconSize}px`,\n            objectFit: 'contain',\n            objectPosition: 'center'\n          }}\n        />\n      );\n    case 'romeo_and_juliet':\n      return (\n        <img \n          src={romeoAndJulietImg} \n          alt=\"Romeu e Julieta\" \n          className={`w-auto ${className}`}\n          style={{ \n            height: `${iconSize}px`,\n            objectFit: 'contain',\n            objectPosition: 'center'\n          }}\n        />\n      );\n    // Adicionar mais cases para outros tipos conforme necessário\n    \n    default:\n      // Para tipos sem imagem específica, usar o ícone padrão\n      return <Truck className={className} size={iconSize} />;\n  }\n};","size_bytes":3815},"client/src/components/layout/unified-layout.tsx":{"content":"import { ReactNode, useEffect, useState } from \"react\";\nimport { Sidebar } from \"./sidebar\";\nimport { MobileNavigation } from \"@/components/mobile/mobile-navigation\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Loader2, LogOut } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface UnifiedLayoutProps {\n  children: ReactNode;\n  contentKey?: string;\n}\n\nexport function UnifiedLayout({ children, contentKey }: UnifiedLayoutProps) {\n  const [location, navigate] = useLocation();\n  const { user, checkRole } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n  const [pageKey, setPageKey] = useState(`${location}-${contentKey || ''}`);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n  const isMobile = useIsMobile();\n  \n  // Otimização de navegação - remove delay artificial\n  useEffect(() => {\n    const newPageKey = `${location}-${contentKey || ''}`;\n    \n    if (newPageKey !== pageKey) {\n      setPageKey(newPageKey);\n      setIsLoading(false);\n    }\n  }, [location, contentKey, pageKey]);\n\n  const handleLogout = async () => {\n    if (isLoggingOut) return;\n    \n    setIsLoggingOut(true);\n    \n    try {\n      // Limpa o cache imediatamente\n      const { queryClient } = await import(\"@/lib/queryClient\");\n      queryClient.setQueryData([\"/api/user\"], null);\n      queryClient.removeQueries();\n      \n      // Logout no servidor sem aguardar resposta\n      fetch(\"/api/logout\", { \n        method: \"POST\",\n        credentials: \"include\"\n      }).catch(() => {}); // Ignora erros para não bloquear o redirecionamento\n      \n      // Redirecionamento instantâneo\n      navigate(\"/auth\");\n      \n    } catch (error) {\n      console.error(\"Erro no logout:\", error);\n      navigate(\"/auth\");\n    } finally {\n      setIsLoggingOut(false);\n    }\n  };\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'supervisor' || user?.role === 'operational' || user?.role === 'manager' || user?.role === 'financial';\n\n  const userInitials = user?.fullName\n    ?.split(\" \")\n    ?.filter(name => name.length > 0)\n    ?.map((name) => name[0]?.toUpperCase())\n    ?.join(\"\")\n    ?.slice(0, 2) || \"U\";\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Sidebar apenas para desktop */}\n      {!isMobile && (\n        <Sidebar\n          isCollapsed={isSidebarCollapsed}\n          onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)}\n        />\n      )}\n      \n      {/* Header fixo no topo - apenas para desktop */}\n      {!isMobile && (\n        <div className={`fixed top-0 right-0 left-0 z-30 bg-white border-b border-gray-200 h-16 transition-all duration-300 ${\n          isSidebarCollapsed ? 'md:left-16' : 'md:left-56 lg:left-64 xl:left-72'\n        }`}>\n          <div className=\"flex items-center justify-end h-full px-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"text-right\">\n                <div className=\"text-sm font-medium text-gray-900\">\n                  {user?.fullName}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {user?.email}\n                </div>\n              </div>\n              <div className=\"flex flex-wrap gap-1\">\n                {isAdmin && <span className=\"bg-blue-600 text-white text-[10px] px-1 py-0.5 rounded\">Admin</span>}\n                {user?.role === 'supervisor' && <span className=\"bg-green-600 text-white text-[10px] px-1 py-0.5 rounded\">Supervisor</span>}\n                {user?.role === 'operational' && <span className=\"bg-orange-600 text-white text-[10px] px-1 py-0.5 rounded\">Operacional</span>}\n                {user?.role === 'financial' && <span className=\"bg-purple-600 text-white text-[10px] px-1 py-0.5 rounded\">Financeiro</span>}\n                {user?.role === 'user' && <span className=\"bg-gray-600 text-white text-[10px] px-1 py-0.5 rounded\">Transportador</span>}\n              </div>\n              <Avatar className=\"h-8 w-8\">\n                <AvatarFallback className=\"bg-gray-600 text-white text-sm\">\n                  {userInitials}\n                </AvatarFallback>\n              </Avatar>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"text-gray-500 hover:text-gray-700\"\n                onClick={handleLogout}\n                disabled={isLoggingOut}\n                title=\"Logout\"\n              >\n                {isLoggingOut ? (\n                  <Loader2 className=\"h-5 w-5 animate-spin\" />\n                ) : (\n                  <LogOut className=\"h-5 w-5\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Conteúdo principal */}\n      <div className={`flex-1 relative transition-all duration-300 ${\n        isMobile \n          ? 'pt-0 pb-20' \n          : `pt-16 ${isSidebarCollapsed ? 'md:ml-16' : 'md:ml-56 lg:ml-64 xl:ml-72'}`\n      }`}>\n        {isLoading ? (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-60 z-10\">\n            <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n          </div>\n        ) : null}\n        \n        <div \n          className={`${isMobile ? 'p-4 pt-4' : 'md:py-8 md:px-6 p-4 md:pt-8 pt-4'}`}\n          key={pageKey}\n        >\n          {children}\n        </div>\n      </div>\n      \n      {/* Navegação mobile no rodapé */}\n      {isMobile && <MobileNavigation />}\n    </div>\n  );\n}","size_bytes":5792},"client/src/components/licenses/license-details-card.tsx":{"content":"import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { AlertCircle, Truck, ChevronsRight, Info, Building, MapPin, FileText, X, RefreshCw, FileDown } from 'lucide-react';\nimport { LicenseRequest, Transporter, Vehicle } from '@shared/schema';\nimport { getLicenseTypeLabel, getCargoTypeLabel, getVehicleTypeLabel } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { StatusBadge, Status } from \"@/components/licenses/status-badge\";\nimport { StatusHistory } from \"@/components/licenses/status-history\";\nimport { StatusHistoryNew } from \"@/components/licenses/status-history-new\";\nimport { useWebSocketContext } from \"@/hooks/use-websocket-context\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from \"@/components/ui/dialog\";\nimport { TransporterWithSubsidiaries } from \"@/components/transporters/transporter-with-subsidiaries\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface LicenseDetailsCardProps {\n  license: LicenseRequest;\n}\n\nexport function LicenseDetailsCard({ license }: LicenseDetailsCardProps) {\n  // Estado para armazenar o status atual (será atualizado pelo WebSocket)\n  const [currentStatus, setCurrentStatus] = useState(license.status);\n  // Estado para armazenar os status por estado (será atualizado pelo WebSocket)\n  const [stateStatuses, setStateStatuses] = useState(license.stateStatuses || []);\n  // Estado para armazenar os números AET por estado (será atualizado pelo WebSocket)\n  const [stateAETNumbers, setStateAETNumbers] = useState(license.stateAETNumbers || []);\n  // Estado para armazenar os arquivos por estado (será atualizado pelo WebSocket)\n  const [stateFiles, setStateFiles] = useState(license.stateFiles || []);\n  \n  // Hook para acesso ao WebSocket\n  const { lastMessage } = useWebSocketContext();\n  \n  // Efeito para atualizar o status quando receber mensagem WebSocket\n  useEffect(() => {\n    if (\n      lastMessage?.type === 'STATUS_UPDATE' && \n      lastMessage.data && \n      lastMessage.data.licenseId === license.id\n    ) {\n      // Se o evento é para um estado específico\n      if (lastMessage.data.state) {\n        // Atualização de status de um estado específico\n        setStateStatuses(prevStatuses => {\n          const updatedStatuses = [...prevStatuses];\n          const stateStatusIndex = updatedStatuses.findIndex(\n            entry => entry.startsWith(`${lastMessage.data.state}:`)\n          );\n          \n          // Se o estado já existe nos status, atualizar com dados completos\n          if (stateStatusIndex >= 0) {\n            // Construir o novo status com os dados recebidos\n            let newStatus = `${lastMessage.data.state}:${lastMessage.data.status}`;\n            \n            // Adicionar data de validade se disponível\n            if (lastMessage.data.validUntil) {\n              newStatus += `:${lastMessage.data.validUntil}`;\n            }\n            \n            // Adicionar número AET se disponível\n            if (lastMessage.data.aetNumber) {\n              newStatus += `:${lastMessage.data.aetNumber}`;\n            }\n            \n            updatedStatuses[stateStatusIndex] = newStatus;\n          } else {\n            // Se não existe, adicionar com dados completos\n            let newStatus = `${lastMessage.data.state}:${lastMessage.data.status}`;\n            \n            // Adicionar data de validade se disponível\n            if (lastMessage.data.validUntil) {\n              newStatus += `:${lastMessage.data.validUntil}`;\n            }\n            \n            // Adicionar número AET se disponível\n            if (lastMessage.data.aetNumber) {\n              newStatus += `:${lastMessage.data.aetNumber}`;\n            }\n            \n            updatedStatuses.push(newStatus);\n          }\n          \n          return updatedStatuses;\n        });\n        \n        // Atualizar números AET se recebido\n        if (lastMessage.data.aetNumber && lastMessage.data.state) {\n          setStateAETNumbers(prevNumbers => {\n            const updatedNumbers = [...prevNumbers];\n            const aetIndex = updatedNumbers.findIndex(\n              entry => entry.startsWith(`${lastMessage.data.state}:`)\n            );\n            \n            if (aetIndex >= 0) {\n              updatedNumbers[aetIndex] = `${lastMessage.data.state}:${lastMessage.data.aetNumber}`;\n            } else {\n              updatedNumbers.push(`${lastMessage.data.state}:${lastMessage.data.aetNumber}`);\n            }\n            \n            return updatedNumbers;\n          });\n        }\n        \n        // Atualizar arquivos de estado se recebido\n        if (lastMessage.data.stateFileUrl && lastMessage.data.state) {\n          setStateFiles(prevFiles => {\n            const updatedFiles = [...prevFiles];\n            const fileIndex = updatedFiles.findIndex(\n              entry => entry.startsWith(`${lastMessage.data.state}:`)\n            );\n            \n            if (fileIndex >= 0) {\n              updatedFiles[fileIndex] = `${lastMessage.data.state}:${lastMessage.data.stateFileUrl}`;\n            } else {\n              updatedFiles.push(`${lastMessage.data.state}:${lastMessage.data.stateFileUrl}`);\n            }\n            \n            return updatedFiles;\n          });\n        }\n        \n        // Se também recebemos uma atualização para o status geral da licença\n        if (lastMessage.data.license?.status) {\n          setCurrentStatus(lastMessage.data.license.status);\n        }\n        \n        console.log(`StatusUpdate (card): Estado ${lastMessage.data.state} => ${lastMessage.data.status}`);\n      } \n      // Se o evento é para a licença inteira (sem estado específico)\n      else if (lastMessage.data.license) {\n        setCurrentStatus(lastMessage.data.license.status);\n        if (lastMessage.data.license.stateStatuses) {\n          setStateStatuses(lastMessage.data.license.stateStatuses);\n        }\n        \n        console.log(`StatusUpdate (card): Licença => ${lastMessage.data.license.status}`);\n      }\n    }\n  }, [lastMessage, license.id]);\n  \n  // Garantir valores padrão para dimensões e tipo de carga\n  const licenseData = {\n    ...license,\n    length: license.length || getDefaultLength(license.type),\n    width: license.width || getDefaultWidth(license.type),\n    height: license.height || getDefaultHeight(license.type),\n    cargoType: license.cargoType || getDefaultCargoType(license.type)\n  };\n  \n  // Estados para armazenar dados dos veículos e controlar modais\n  const [vehicles, setVehicles] = useState<{[key: string]: Vehicle}>({});\n  const [selectedPlate, setSelectedPlate] = useState<string | null>(null);\n  const [selectedVehicleId, setSelectedVehicleId] = useState<number | null>(null);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isEditVehicleModalOpen, setIsEditVehicleModalOpen] = useState(false);\n  \n  // Estado para o formulário de edição\n  const [editForm, setEditForm] = useState({\n    renavam: '',\n    brand: '',\n    model: '',\n    year: '2020',\n    axleCount: '1',\n    tare: '1000',\n    bodyType: ''\n  });\n  \n  // Atualizar o formulário de edição quando um veículo é selecionado - removido para evitar duplicação\n  \n  // Toast para feedback\n  const { toast } = useToast();\n  \n  // Mutation para atualizar o veículo\n  const updateVehicleMutation = useMutation({\n    mutationFn: async (data: Partial<Vehicle> & { id: number }) => {\n      const response = await apiRequest('PATCH', `/api/vehicles/${data.id}`, data);\n      if (!response.ok) {\n        throw new Error('Falha ao atualizar veículo');\n      }\n      return response.json();\n    },\n    onSuccess: (updatedVehicle) => {\n      // Atualizar o veículo localmente\n      if (selectedVehicleId) {\n        setVehicles(prev => ({\n          ...prev,\n          [selectedVehicleId]: {\n            ...prev[selectedVehicleId],\n            ...updatedVehicle\n          }\n        }));\n      }\n      \n      // Invalidar a consulta para forçar uma atualização\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles', selectedVehicleId] });\n      \n      // Fechar o modal\n      setIsEditVehicleModalOpen(false);\n      \n      // Feedback ao usuário\n      toast({\n        title: \"Veículo atualizado\",\n        description: \"As informações do veículo foram atualizadas com sucesso.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao atualizar veículo\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n  \n  // Buscar dados do transportador\n  const { data: transporter } = useQuery<Transporter>({\n    queryKey: ['/api/public/transporters', license.transporterId],\n    queryFn: async () => {\n      if (!license.transporterId) return null;\n      \n      const res = await fetch(`/api/public/transporters/${license.transporterId}`);\n      if (!res.ok) {\n        throw new Error('Falha ao carregar dados do transportador');\n      }\n      return res.json();\n    },\n    enabled: !!license.transporterId\n  });\n  \n  // Buscar veículos individualmente usando TanStack Query\n  const fetchVehicle = async (id: number) => {\n    if (!id) return null;\n    const res = await fetch(`/api/vehicles/${id}`);\n    if (!res.ok) throw new Error('Falha ao carregar veículo');\n    return res.json();\n  };\n\n  // Consulta para cada veículo\n  const { data: tractorUnit } = useQuery({\n    queryKey: ['/api/vehicles', license.tractorUnitId],\n    queryFn: () => fetchVehicle(license.tractorUnitId as number),\n    enabled: !!license.tractorUnitId\n  });\n\n  const { data: firstTrailer } = useQuery({\n    queryKey: ['/api/vehicles', license.firstTrailerId],\n    queryFn: () => fetchVehicle(license.firstTrailerId as number),\n    enabled: !!license.firstTrailerId\n  });\n\n  const { data: dolly } = useQuery({\n    queryKey: ['/api/vehicles', license.dollyId],\n    queryFn: () => fetchVehicle(license.dollyId as number),\n    enabled: !!license.dollyId\n  });\n\n  const { data: secondTrailer } = useQuery({\n    queryKey: ['/api/vehicles', license.secondTrailerId],\n    queryFn: () => fetchVehicle(license.secondTrailerId as number),\n    enabled: !!license.secondTrailerId\n  });\n\n  const { data: flatbed } = useQuery({\n    queryKey: ['/api/vehicles', license.flatbedId],\n    queryFn: () => fetchVehicle(license.flatbedId as number),\n    enabled: !!license.flatbedId\n  });\n\n  // Buscar veículo por placa (usando a rota pública)\n  async function fetchVehicleByPlate(plate: string): Promise<Vehicle | null> {\n    try {\n      console.log(`Buscando veículo com placa: ${plate}`);\n      const response = await fetch(`/api/public/vehicle-by-plate/${encodeURIComponent(plate)}`);\n      \n      // Verificar resposta em texto para debug\n      const responseText = await response.text();\n      console.log(`Resposta para ${plate}:`, responseText);\n      \n      // Tentar converter para JSON\n      let data = null;\n      try {\n        data = JSON.parse(responseText);\n      } catch (parseError) {\n        console.error(`Erro ao analisar resposta para ${plate}:`, parseError);\n        console.log(`Resposta não-JSON recebida:`, responseText.substring(0, 100));\n        return null;\n      }\n      \n      // Se conseguimos, é um veículo válido\n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar veículo pela placa ${plate}:`, error);\n      return null;\n    }\n  }\n\n  // Carregar veículos adicionais\n  useEffect(() => {\n    // Função para carregar veículos adicionais\n    async function loadAdditionalVehicles() {\n      if (!license.additionalPlates || license.additionalPlates.length === 0) return;\n      \n      // Criar uma cópia do estado atual\n      const updatedVehicles = {...vehicles};\n      let hasNewVehicles = false;\n\n      // Para cada placa adicional, verificar se já está carregada\n      for (const plate of license.additionalPlates) {\n        // Verificar se já temos este veículo pelo número da placa\n        const vehicleExists = Object.values(updatedVehicles).some(v => v.plate === plate);\n        \n        if (!vehicleExists) {\n          // Buscar o veículo pela placa\n          const vehicleData = await fetchVehicleByPlate(plate);\n          if (vehicleData) {\n            updatedVehicles[vehicleData.id] = vehicleData;\n            hasNewVehicles = true;\n          }\n        }\n      }\n      \n      // Atualizar o estado apenas se encontramos novos veículos\n      if (hasNewVehicles) {\n        setVehicles(updatedVehicles);\n      }\n    }\n    \n    // Executar a função de carregamento\n    loadAdditionalVehicles();\n  }, [license.additionalPlates]);\n\n  // Atualizar o objeto de veículos quando os dados estiverem disponíveis\n  useEffect(() => {\n    const vehicleData: {[key: string]: Vehicle} = {};\n    \n    if (tractorUnit && license.tractorUnitId) vehicleData[license.tractorUnitId] = tractorUnit;\n    if (firstTrailer && license.firstTrailerId) vehicleData[license.firstTrailerId] = firstTrailer;\n    if (dolly && license.dollyId) vehicleData[license.dollyId] = dolly;\n    if (secondTrailer && license.secondTrailerId) vehicleData[license.secondTrailerId] = secondTrailer;\n    if (flatbed && license.flatbedId) vehicleData[license.flatbedId] = flatbed;\n    \n    setVehicles(prevVehicles => ({\n      ...prevVehicles,\n      ...vehicleData\n    }));\n  }, [tractorUnit, firstTrailer, dolly, secondTrailer, flatbed, license.tractorUnitId, license.firstTrailerId, license.dollyId, license.secondTrailerId, license.flatbedId]);\n  \n  // Armazenar o veículo selecionado\n  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);\n  const [isLoadingSelectedVehicle, setIsLoadingSelectedVehicle] = useState(false);\n\n  // Função auxiliar para buscar dados do veículo\n  async function fetchVehicleDetails(vehicleId: number) {\n    console.log('FETCH: Starting fetch for vehicle ID:', vehicleId);\n    try {\n      setIsLoadingSelectedVehicle(true);\n      \n      const url = `/api/vehicles/${vehicleId}`;\n      console.log('FETCH: Request URL:', url);\n      \n      const response = await fetch(url);\n      console.log('FETCH: Response status:', response.status);\n      \n      if (!response.ok) {\n        throw new Error(`Falha ao carregar dados do veículo: ${response.status}`);\n      }\n      \n      // Vamos verificar o tipo de conteúdo antes de tentar fazer o parse como JSON\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error(`Resposta inesperada do servidor: ${contentType}`);\n      }\n      \n      // Primeiro recuperamos o texto\n      const text = await response.text();\n      \n      // Verificar se é JSON válido\n      try {\n        const data = JSON.parse(text);\n        console.log('FETCH: Vehicle data loaded successfully:', data);\n        return data;\n      } catch (parseError) {\n        console.error('FETCH: JSON parse error:', parseError, 'Response text:', text);\n        throw new Error(`Erro ao analisar resposta: ${text.substring(0, 100)}...`);\n      }\n    } catch (error) {\n      console.error('FETCH: Error loading vehicle data:', error);\n      toast({\n        title: \"Erro ao carregar veículo\",\n        description: `Não foi possível carregar os dados do veículo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n        variant: \"destructive\",\n      });\n      return null;\n    } finally {\n      setIsLoadingSelectedVehicle(false);\n    }\n  }\n\n  // Função para abrir o modal e carregar os dados\n  async function openEditModal(vehicleId: number) {\n    console.log('MODAL: Opening edit modal for vehicle ID:', vehicleId);\n    // Primeiro definimos o ID e abrimos o modal\n    setSelectedVehicleId(vehicleId);\n    setIsEditVehicleModalOpen(true);\n    \n    // Depois buscamos os dados do veículo diretamente\n    const vehicleData = await fetchVehicleDetails(vehicleId);\n    \n    if (vehicleData) {\n      console.log('MODAL: Setting vehicle data:', vehicleData);\n      setSelectedVehicle(vehicleData);\n      \n      // Atualizar o formulário com os dados recebidos\n      setEditForm({\n        renavam: vehicleData.renavam || '',\n        brand: vehicleData.brand || '',\n        model: vehicleData.model || '',\n        year: String(vehicleData.year || 2020),\n        axleCount: String(vehicleData.axleCount || 1),\n        tare: String(vehicleData.tare || 1000),\n        bodyType: vehicleData.bodyType || ''\n      });\n      \n      console.log('MODAL: Form state updated with vehicle data');\n    }\n  }\n\n  // Resetar dados quando o modal fechar\n  useEffect(() => {\n    if (!isEditVehicleModalOpen) {\n      console.log('MODAL: Closing modal, resetting vehicle data');\n      setSelectedVehicle(null);\n    }\n  }, [isEditVehicleModalOpen]);\n  \n  // Função para obter comprimento padrão baseado no tipo de licença  \n  function getDefaultLength(type: string): number {\n    return type === \"flatbed\" ? 2600 : 2500; // 26.00m para prancha, 25.00m para demais\n  }\n  \n  // Função para obter largura padrão baseada no tipo de licença\n  function getDefaultWidth(type: string): number {\n    return type === \"flatbed\" ? 320 : 260; // 3.20m para prancha, 2.60m para demais\n  }\n  \n  // Função para obter altura padrão baseada no tipo de licença\n  function getDefaultHeight(type: string): number {\n    return type === \"flatbed\" ? 495 : 440; // 4.95m para prancha, 4.40m para demais\n  }\n  \n  // Função para obter tipo de carga padrão baseado no tipo de licença\n  function getDefaultCargoType(type: string): string {\n    return type === \"flatbed\" ? \"indivisible_cargo\" : \"dry_cargo\";\n  }\n  \n  // Formatar valores para exibição\n  const formatDimension = (value: number | string | null | undefined): string => {\n    if (value === null || value === undefined) {\n      return '-';\n    }\n    \n    // Converter para número se for string\n    const numericValue = typeof value === 'string' ? parseFloat(value) : value;\n    \n    if (isNaN(numericValue) || numericValue <= 0) {\n      return '-';\n    }\n    \n    // CORREÇÃO: Todos os valores agora vêm em centímetros do banco, converter para metros\n    const metersValue = numericValue / 100;\n    return metersValue.toFixed(2);\n  };\n  \n  // Função para obter o label do status\n  const getStatusLabel = (status: string): string => {\n    const statusLabels: Record<string, string> = {\n      pending_registration: \"Pedido em Cadastramento\",\n      registration_in_progress: \"Cadastro em Andamento\", \n      rejected: \"Reprovado\",\n      under_review: \"Análise do Órgão\",\n      pending_approval: \"Pendente Liberação\",\n      approved: \"Liberada\",\n      canceled: \"Cancelado\"\n    };\n    \n    return statusLabels[status] || status;\n  };\n\n  return (\n    <div className=\"space-y-6 mt-4\">\n      {/* Cabeçalho do pedido com status atualizado em tempo real */}\n      <div className=\"bg-slate-700 text-white p-4 rounded-md shadow-sm\">\n        <div className=\"flex flex-wrap justify-between items-center\">\n          <h2 className=\"text-xl font-bold\">Pedido #{license.requestNumber}</h2>\n          <div className=\"flex items-center space-x-2 mt-2 sm:mt-0\">\n            <div className=\"hidden sm:block text-slate-300 text-sm mr-2\">Status:</div>\n            <StatusBadge \n              status={currentStatus} \n              licenseId={license.id}\n              className=\"text-sm py-1 px-3\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Dados do Transportador */}\n      {transporter && (\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold\">Transportador</h3>\n          <div className=\"bg-white p-4 rounded-md shadow-sm border border-gray-200\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <div className=\"text-gray-600 text-sm\">Nome/Razão Social:</div>\n                <div className=\"font-medium\">{transporter.name}</div>\n              </div>\n              <div>\n                <div className=\"text-gray-600 text-sm\">CNPJ:</div>\n                <div className=\"font-medium\">{transporter.documentNumber}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Estados Solicitados */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-lg font-semibold\">Estados Solicitados</h3>\n        <div className=\"bg-white p-4 rounded-md shadow-sm border border-gray-200\">\n          <div className=\"flex flex-wrap gap-2\">\n            {license.states.map((state, idx) => (\n              <Badge key={idx} variant=\"outline\" className=\"px-3 py-1 text-sm\">\n                {state}\n              </Badge>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* Status por Estado com Números AET Específicos */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-lg font-semibold\">Status por Estado</h3>\n        <div className=\"bg-white p-4 rounded-md shadow-sm border border-gray-200\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Estado</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Nº Licença</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Data Emissão</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Data Validade</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Documento</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {license.states.map((state, idx) => {\n                  // Encontrar status para este estado\n                  const stateStatusEntry = stateStatuses.find(entry => entry.startsWith(`${state}:`));\n                  let status = \"pending_registration\";\n                  let validUntil = null;\n                  let issuedAt = null;\n                  \n                  if (stateStatusEntry) {\n                    const parts = stateStatusEntry.split(':');\n                    status = parts[1];\n                    validUntil = parts.length > 2 ? parts[2] : null;\n                    \n                    // Se tiver 4 partes, a quarta é a data de emissão\n                    if (parts.length > 3) {\n                      issuedAt = parts[3];\n                    }\n                  }\n                  \n                  // Usar a data de emissão do campo dedicado da licença se não encontrou no status\n                  if (!issuedAt && license.issuedAt) {\n                    // Converter para formato de data (YYYY-MM-DD)\n                    const issuedDate = new Date(license.issuedAt);\n                    issuedAt = issuedDate.toISOString().split('T')[0];\n                  }\n                  \n                  // Encontrar arquivo para este estado (usando estado atualizado em tempo real)\n                  const stateFileEntry = stateFiles.find(entry => entry.startsWith(`${state}:`));\n                  const stateFileUrl = stateFileEntry ? stateFileEntry.split(':')[1] : null;\n                  \n                  // Encontrar número AET para este estado (usando estado atualizado em tempo real)\n                  const stateAETEntry = stateAETNumbers.find(entry => entry.startsWith(`${state}:`));\n                  const stateAETNumber = stateAETEntry ? stateAETEntry.split(':')[1] : null;\n                  \n                  return (\n                    <tr key={idx}>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge variant=\"outline\" className=\"px-2.5 py-0.5\">\n                          {state}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <StatusBadge status={status} />\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {stateAETNumber ? (\n                          <span className=\"font-semibold text-blue-700\">{stateAETNumber}</span>\n                        ) : (\n                          <span className=\"text-gray-400\">-</span>\n                        )}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {issuedAt ? (\n                          <span className=\"font-medium\">\n                            {new Date(issuedAt + 'T00:00:00').toLocaleDateString('pt-BR')}\n                          </span>\n                        ) : (\n                          <span className=\"text-gray-400\">-</span>\n                        )}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {validUntil ? (\n                          <span className=\"font-medium\">\n                            {new Date(validUntil + 'T00:00:00').toLocaleDateString('pt-BR')}\n                          </span>\n                        ) : (\n                          <span className=\"text-gray-400\">-</span>\n                        )}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {stateFileUrl ? (\n                          <a \n                            href={stateFileUrl} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\" \n                            className=\"text-blue-600 hover:text-blue-800 inline-flex items-center\"\n                          >\n                            <FileDown className=\"h-4 w-4 mr-1\" />\n                            Baixar\n                          </a>\n                        ) : (\n                          <span className=\"text-gray-400\">-</span>\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n      \n      {/* Dados do Conjunto */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-lg font-semibold\">Dados do Conjunto</h3>\n        <div className=\"bg-white p-4 rounded-md shadow-sm border border-gray-200\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n            <div>\n              <div className=\"text-gray-600 text-sm\">Tipo de Conjunto:</div>\n              <div className=\"font-medium\">{getLicenseTypeLabel(license.type)}</div>\n            </div>\n            <div>\n              <div className=\"text-gray-600 text-sm\">Tipo de Carga:</div>\n              <div className=\"font-medium\">{getCargoTypeLabel(licenseData.cargoType)}</div>\n            </div>\n            <div>\n              <div className=\"text-gray-600 text-sm\">Veículo:</div>\n              <div className=\"font-medium\">\n                {license.tractorUnitId && vehicles[license.tractorUnitId]?.ownershipType === 'terceiro' ? (\n                  <span className=\"text-orange-600\">Terceiro</span>\n                ) : (\n                  <span className=\"text-green-600\">Próprio</span>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          {/* Dimensões em cards */}\n          <div className=\"grid grid-cols-3 gap-4 mt-2\">\n            <div className=\"bg-gray-50 p-3 rounded-md text-center\">\n              <div className=\"text-2xl font-bold\">{formatDimension(licenseData.length)} m</div>\n              <div className=\"text-gray-500 text-sm\">Comprimento Total</div>\n            </div>\n            <div className=\"bg-gray-50 p-3 rounded-md text-center\">\n              <div className=\"text-2xl font-bold\">{formatDimension(licenseData.width)} m</div>\n              <div className=\"text-gray-500 text-sm\">Largura</div>\n            </div>\n            <div className=\"bg-gray-50 p-3 rounded-md text-center\">\n              <div className=\"text-2xl font-bold\">{formatDimension(licenseData.height)} m</div>\n              <div className=\"text-gray-500 text-sm\">Altura</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Linha de Frente */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-lg font-semibold\">Linha de Frente</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {/* Caminhão/Unidade Tratora */}\n          {license.tractorUnitId && (\n            <div className=\"border border-gray-200 rounded-md overflow-hidden h-full\">\n              <div className=\"bg-white flex flex-wrap items-center justify-between p-2\">\n                {/* Cabeçalho com placa e tipo */}\n                <div className=\"flex items-center w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"text-blue-600 mr-2\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 10h14a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2zm4-3V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3\" />\n                      </svg>\n                    </div>\n                    <div className=\"font-bold\">{license.mainVehiclePlate}</div>\n                  </div>\n                  <button \n                    className=\"text-blue-500 hover:text-blue-700 p-1 rounded-full hover:bg-blue-50\"\n                    title=\"Editar Veículo\"\n                    onClick={() => license.tractorUnitId && openEditModal(license.tractorUnitId)}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              \n              {/* Informações principais */}\n              <div className=\"bg-white px-2 py-1 text-xs grid grid-cols-2 gap-x-2 border-t border-gray-100\">\n                <div>\n                  <div className=\"text-gray-500\">Tipo:</div>\n                  <div>{vehicles[license.tractorUnitId]?.type === 'truck' ? 'Caminhão' : 'Unidade Tratora'}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-500\">RENAVAM:</div>\n                  <div>{vehicles[license.tractorUnitId]?.renavam || '123456789001'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Marca/Modelo:</div>\n                  <div>{vehicles[license.tractorUnitId]?.brand || 'SCANIA'} {vehicles[license.tractorUnitId]?.model || 'R450'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Ano:</div>\n                  <div>{vehicles[license.tractorUnitId]?.year || '2020'}</div>\n                </div>\n              </div>\n              \n              {/* Rodapé */}\n              <div className=\"bg-gray-50 border-t border-gray-200 p-2 flex justify-between items-center text-xs\">\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <span className=\"text-gray-500\">Eixos:</span> {vehicles[license.tractorUnitId]?.axleCount || '3'}\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">TARA:</span> {vehicles[license.tractorUnitId]?.tare || '9000'} kg\n                  </div>\n                </div>\n                <button className=\"text-blue-600 text-xs flex items-center hover:text-blue-800\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3.5 w-3.5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                  </svg>\n                  CRLV\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {/* Primeira Carreta */}\n          {license.firstTrailerId && (\n            <div className=\"border border-gray-200 rounded-md overflow-hidden h-full\">\n              <div className=\"bg-white flex flex-wrap items-center justify-between p-2\">\n                {/* Cabeçalho com placa e tipo */}\n                <div className=\"flex items-center w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"text-green-600 mr-2\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z\" />\n                      </svg>\n                    </div>\n                    <div className=\"font-bold\">{vehicles[license.firstTrailerId]?.plate || 'ABC1D23'}</div>\n                  </div>\n                  <button \n                    className=\"text-blue-500 hover:text-blue-700 p-1 rounded-full hover:bg-blue-50\"\n                    title=\"Editar Veículo\"\n                    onClick={() => license.firstTrailerId && openEditModal(license.firstTrailerId)}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              \n              {/* Informações principais */}\n              <div className=\"bg-white px-2 py-1 text-xs grid grid-cols-2 gap-x-2 border-t border-gray-100\">\n                <div>\n                  <div className=\"text-gray-500\">Tipo:</div>\n                  <div>Semirreboque</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-500\">RENAVAM:</div>\n                  <div>{vehicles[license.firstTrailerId]?.renavam || '78542400001'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Marca/Modelo:</div>\n                  <div>{vehicles[license.firstTrailerId]?.brand || 'RANDON'} {vehicles[license.firstTrailerId]?.model || 'SR BA'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Ano:</div>\n                  <div>{vehicles[license.firstTrailerId]?.year || '2023'}</div>\n                </div>\n              </div>\n              \n              {/* Rodapé */}\n              <div className=\"bg-gray-50 border-t border-gray-200 p-2 flex justify-between items-center text-xs\">\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <span className=\"text-gray-500\">Eixos:</span> {vehicles[license.firstTrailerId]?.axleCount || '3'}\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">TARA:</span> {vehicles[license.firstTrailerId]?.tare || '7500'} kg\n                  </div>\n                </div>\n                <button className=\"text-blue-600 text-xs flex items-center hover:text-blue-800\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3.5 w-3.5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                  </svg>\n                  CRLV\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {/* Segunda Carreta */}\n          {license.secondTrailerId && (\n            <div className=\"border border-gray-200 rounded-md overflow-hidden h-full\">\n              <div className=\"bg-white flex flex-wrap items-center justify-between p-2\">\n                {/* Cabeçalho com placa e tipo */}\n                <div className=\"flex items-center w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"text-green-600 mr-2\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z\" />\n                      </svg>\n                    </div>\n                    <div className=\"font-bold\">{vehicles[license.secondTrailerId]?.plate || 'RAU8G84'}</div>\n                  </div>\n                  <button \n                    className=\"text-blue-500 hover:text-blue-700 p-1 rounded-full hover:bg-blue-50\"\n                    title=\"Editar Veículo\"\n                    onClick={() => license.secondTrailerId && openEditModal(license.secondTrailerId)}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              \n              {/* Informações principais */}\n              <div className=\"bg-white px-2 py-1 text-xs grid grid-cols-2 gap-x-2 border-t border-gray-100\">\n                <div>\n                  <div className=\"text-gray-500\">Tipo:</div>\n                  <div>Semirreboque</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-500\">RENAVAM:</div>\n                  <div>{vehicles[license.secondTrailerId]?.renavam || '98765432101'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Marca/Modelo:</div>\n                  <div>{vehicles[license.secondTrailerId]?.brand || 'RANDON'} {vehicles[license.secondTrailerId]?.model || 'SR BA'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Ano:</div>\n                  <div>{vehicles[license.secondTrailerId]?.year || '2018'}</div>\n                </div>\n              </div>\n              \n              {/* Rodapé */}\n              <div className=\"bg-gray-50 border-t border-gray-200 p-2 flex justify-between items-center text-xs\">\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <span className=\"text-gray-500\">Eixos:</span> {vehicles[license.secondTrailerId]?.axleCount || '2'}\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">TARA:</span> {vehicles[license.secondTrailerId]?.tare || '7000'} kg\n                  </div>\n                </div>\n                <button className=\"text-blue-600 text-xs flex items-center hover:text-blue-800\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3.5 w-3.5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                  </svg>\n                  CRLV\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {/* Dolly (Se necessário) */}\n          {license.dollyId && (\n            <div className=\"border border-gray-200 rounded-md overflow-hidden h-full\">\n              <div className=\"bg-white flex flex-wrap items-center justify-between p-2\">\n                {/* Cabeçalho com placa e tipo */}\n                <div className=\"flex items-center w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"text-orange-600 mr-2\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n                      </svg>\n                    </div>\n                    <div className=\"font-bold\">{vehicles[license.dollyId]?.plate || 'DOL001'}</div>\n                  </div>\n                  <button \n                    className=\"text-blue-500 hover:text-blue-700 p-1 rounded-full hover:bg-blue-50\"\n                    title=\"Editar Veículo\"\n                    onClick={() => license.dollyId && openEditModal(license.dollyId)}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              \n              {/* Informações principais */}\n              <div className=\"bg-white px-2 py-1 text-xs grid grid-cols-2 gap-x-2 border-t border-gray-100\">\n                <div>\n                  <div className=\"text-gray-500\">Tipo:</div>\n                  <div>Dolly</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-500\">RENAVAM:</div>\n                  <div>{vehicles[license.dollyId]?.renavam || '12345678901'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Marca/Modelo:</div>\n                  <div>Dolly 2 eixos</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Ano:</div>\n                  <div>{vehicles[license.dollyId]?.year || '2020'}</div>\n                </div>\n              </div>\n              \n              {/* Rodapé */}\n              <div className=\"bg-gray-50 border-t border-gray-200 p-2 flex justify-between items-center text-xs\">\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <span className=\"text-gray-500\">Eixos:</span> {vehicles[license.dollyId]?.axleCount || '2'}\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">TARA:</span> {vehicles[license.dollyId]?.tare || '1500'} kg\n                  </div>\n                </div>\n                <button className=\"text-blue-600 text-xs flex items-center hover:text-blue-800\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3.5 w-3.5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                  </svg>\n                  CRLV\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {/* Prancha (se necessário) */}\n          {license.flatbedId && (\n            <div className=\"border border-gray-200 rounded-md overflow-hidden h-full\">\n              <div className=\"bg-white flex flex-wrap items-center justify-between p-2\">\n                {/* Cabeçalho com placa e tipo */}\n                <div className=\"flex items-center w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"text-purple-600 mr-2\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\" />\n                      </svg>\n                    </div>\n                    <div className=\"font-bold\">{vehicles[license.flatbedId]?.plate || 'PRA001'}</div>\n                  </div>\n                  <button \n                    className=\"text-blue-500 hover:text-blue-700 p-1 rounded-full hover:bg-blue-50\"\n                    title=\"Editar Veículo\"\n                    onClick={() => license.flatbedId && openEditModal(license.flatbedId)}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              \n              {/* Informações principais */}\n              <div className=\"bg-white px-2 py-1 text-xs grid grid-cols-2 gap-x-2 border-t border-gray-100\">\n                <div>\n                  <div className=\"text-gray-500\">Tipo:</div>\n                  <div>Prancha</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-500\">RENAVAM:</div>\n                  <div>{vehicles[license.flatbedId]?.renavam || '98765432102'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Marca/Modelo:</div>\n                  <div>{vehicles[license.flatbedId]?.brand || 'FACCHINI'} {vehicles[license.flatbedId]?.model || 'Prancha 3E'}</div>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"text-gray-500\">Ano:</div>\n                  <div>{vehicles[license.flatbedId]?.year || '2019'}</div>\n                </div>\n              </div>\n              \n              {/* Rodapé */}\n              <div className=\"bg-gray-50 border-t border-gray-200 p-2 flex justify-between items-center text-xs\">\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <span className=\"text-gray-500\">Eixos:</span> {vehicles[license.flatbedId]?.axleCount || '3'}\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">TARA:</span> {vehicles[license.flatbedId]?.tare || '8000'} kg\n                  </div>\n                </div>\n                <button className=\"text-blue-600 text-xs flex items-center hover:text-blue-800\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3.5 w-3.5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                  </svg>\n                  CRLV\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Placas Adicionais */}\n      {license.additionalPlates && license.additionalPlates.length > 0 && (\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold\">Placas Adicionais</h3>\n          <div className=\"bg-white p-4 rounded-md shadow-sm border border-gray-200\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {license.additionalPlates.map((plate, index) => {\n                // Buscar o veículo pelo número da placa\n                const vehicle = Object.values(vehicles).find(v => v.plate === plate);\n                const vehicleId = vehicle?.id;\n              \n                return (\n                  <div key={index} className=\"border border-gray-200 p-2 rounded-md bg-gray-50 flex justify-between items-center\">\n                    <div className=\"flex items-center\">\n                      <div className=\"flex-shrink-0 w-5 h-5 text-green-600 mr-2\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path d=\"M8 16.25a.75.75 0 01.75-.75h2.5a.75.75 0 010 1.5h-2.5a.75.75 0 01-.75-.75z\" />\n                          <path fillRule=\"evenodd\" d=\"M4 4a3 3 0 013-3h6a3 3 0 013 3v12a3 3 0 01-3 3H7a3 3 0 01-3-3V4zm4-1.5v.75c0 .414.336.75.75.75h2.5a.75.75 0 00.75-.75V2.5h1A1.5 1.5 0 0114.5 4v12a1.5 1.5 0 01-1.5 1.5H7A1.5 1.5 0 015.5 16V4A1.5 1.5 0 017 2.5h1z\" clipRule=\"evenodd\" />\n                        </svg>\n                      </div>\n                      <div className=\"font-medium\">{plate}</div>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <button \n                        className=\"text-gray-500 hover:text-gray-700 p-2 rounded-full hover:bg-gray-100\"\n                        title=\"Ver detalhes\"\n                        onClick={() => {\n                          setSelectedPlate(plate);\n                          setIsViewModalOpen(true);\n                        }}\n                        style={{ minWidth: '30px', minHeight: '30px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n                      >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                        </svg>\n                      </button>\n                      \n                      {vehicleId ? (\n                        // Se o veículo está cadastrado, mostrar botão de edição que chama o modal\n                        <button \n                          className=\"text-blue-500 hover:text-blue-700 p-2 rounded-full hover:bg-blue-50\"\n                          title=\"Editar Veículo\"\n                          onClick={() => vehicleId && openEditModal(vehicleId)}\n                          style={{ minWidth: '30px', minHeight: '30px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                          </svg>\n                        </button>\n                      ) : (\n                        // Se o veículo NÃO está cadastrado, mostrar botão de edição desabilitado\n                        <button \n                          className=\"text-blue-500 hover:text-blue-700 p-2 rounded-full hover:bg-blue-50 opacity-50\"\n                          title=\"Placa não cadastrada no sistema\"\n                          disabled\n                          style={{ minWidth: '30px', minHeight: '30px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                          </svg>\n                        </button>\n                      )}\n                      \n                      {vehicle?.crlvUrl ? (\n                        // Se o veículo tem CRLV, mostrar botão de download\n                        <button \n                          className=\"text-blue-600 hover:text-blue-800 p-2 rounded-full hover:bg-blue-50\"\n                          title=\"Download CRLV\"\n                          onClick={() => vehicle.crlvUrl && window.open(vehicle.crlvUrl, '_blank')}\n                          style={{ minWidth: '30px', minHeight: '30px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                          </svg>\n                        </button>\n                      ) : (\n                        // Se o veículo NÃO tem CRLV, mostrar botão de download desabilitado\n                        <button \n                          className=\"text-blue-600 hover:text-blue-800 p-2 rounded-full hover:bg-blue-50 opacity-50\"\n                          title=\"CRLV não disponível\"\n                          disabled\n                          style={{ minWidth: '30px', minHeight: '30px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                          </svg>\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Botão de download para licença aprovada/liberada */}\n      {currentStatus === \"approved\" && license.licenseFileUrl && (\n        <div className=\"mt-6 flex justify-center\">\n          <Button asChild className=\"w-full sm:w-auto flex items-center gap-2\" size=\"lg\">\n            <a href={license.licenseFileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <FileDown className=\"h-5 w-5\" />\n              Download da Licença Completa\n            </a>\n          </Button>\n        </div>\n      )}\n\n      {/* Modal para visualizar detalhes da placa adicional */}\n      <Dialog open={isViewModalOpen} onOpenChange={setIsViewModalOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <span className=\"text-green-600\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path d=\"M8 16.25a.75.75 0 01.75-.75h2.5a.75.75 0 010 1.5h-2.5a.75.75 0 01-.75-.75z\" />\n                  <path fillRule=\"evenodd\" d=\"M4 4a3 3 0 013-3h6a3 3 0 013 3v12a3 3 0 01-3 3H7a3 3 0 01-3-3V4zm4-1.5v.75c0 .414.336.75.75.75h2.5a.75.75 0 00.75-.75V2.5h1A1.5 1.5 0 0114.5 4v12a1.5 1.5 0 01-1.5 1.5H7A1.5 1.5 0 015.5 16V4A1.5 1.5 0 017 2.5h1z\" clipRule=\"evenodd\" />\n                </svg>\n              </span>\n              Detalhes do Veículo - {selectedPlate}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4 space-y-4\">\n            <div className=\"grid grid-cols-2 gap-x-3 gap-y-4\">\n              <div>\n                <div className=\"text-xs text-gray-500\">Placa:</div>\n                <div className=\"font-medium\">{selectedPlate}</div>\n              </div>\n\n              <div>\n                <div className=\"text-xs text-gray-500\">RENAVAM:</div>\n                <div className=\"font-medium\">12345678901</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-500\">Tipo de Veículo:</div>\n                <div className=\"font-medium\">Semirreboque</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-500\">Marca/Modelo:</div>\n                <div className=\"font-medium\">RANDON / SR BA</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-500\">Ano:</div>\n                <div className=\"font-medium\">2021</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-500\">Eixos:</div>\n                <div className=\"font-medium\">3</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-500\">TARA:</div>\n                <div className=\"font-medium\">7.500 kg</div>\n              </div>\n            </div>\n          </div>\n          <DialogFooter className=\"sm:justify-between\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => setIsViewModalOpen(false)}\n            >\n              <X className=\"mr-2 h-4 w-4\" />\n              Fechar\n            </Button>\n            <Button type=\"button\" className=\"gap-1\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n              </svg>\n              Baixar CRLV\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal para editar placa adicional */}\n      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <span className=\"text-blue-600\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                </svg>\n              </span>\n              Editar Veículo - {selectedPlate}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4\">\n            <div className=\"text-center py-6\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12 mx-auto text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n              </svg>\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Edição de veículo</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Para editar este veículo, você será redirecionado para a página de veículos.\n              </p>\n              <div className=\"mt-6\">\n                <Button className=\"w-full\">\n                  Ir para gerenciamento de veículos\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Modal para editar veículo do conjunto */}\n      <Dialog open={isEditVehicleModalOpen} onOpenChange={setIsEditVehicleModalOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <span className=\"text-blue-600\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                </svg>\n              </span>\n              Editar Veículo - {selectedVehicle?.plate}\n            </DialogTitle>\n            <DialogDescription>\n              Edite as informações do veículo diretamente neste formulário.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedVehicle && (\n            <div className=\"p-4 space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Placa</label>\n                  <input \n                    type=\"text\" \n                    className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" \n                    value={selectedVehicle.plate || ''}\n                    disabled\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">RENAVAM</label>\n                  <input \n                    type=\"text\" \n                    className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" \n                    value={editForm.renavam}\n                    onChange={(e) => setEditForm({...editForm, renavam: e.target.value})}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Marca</label>\n                  <input \n                    type=\"text\" \n                    className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" \n                    value={editForm.brand}\n                    onChange={(e) => setEditForm({...editForm, brand: e.target.value})}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Modelo</label>\n                  <input \n                    type=\"text\" \n                    className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" \n                    value={editForm.model}\n                    onChange={(e) => setEditForm({...editForm, model: e.target.value})}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Ano</label>\n                  <input \n                    type=\"number\" \n                    className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" \n                    value={editForm.year}\n                    onChange={(e) => setEditForm({...editForm, year: e.target.value})}\n                    min=\"1950\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Quantidade de Eixos</label>\n                  <input \n                    type=\"number\" \n                    className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" \n                    value={editForm.axleCount}\n                    onChange={(e) => setEditForm({...editForm, axleCount: e.target.value})}\n                    min=\"1\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">TARA (kg)</label>\n                  <input \n                    type=\"number\" \n                    className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" \n                    value={editForm.tare}\n                    onChange={(e) => setEditForm({...editForm, tare: e.target.value})}\n                    min=\"1\"\n                  />\n                </div>\n                \n                {selectedVehicle && ['truck', 'semitrailer', 'trailer'].includes(selectedVehicle.type) && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">Tipo de Carroceria</label>\n                    <select \n                      className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                      value={editForm.bodyType}\n                      onChange={(e) => setEditForm({...editForm, bodyType: e.target.value})}\n                    >\n                      <option value=\"\">Selecione</option>\n                      <option value=\"open\">ABERTA</option>\n                      <option value=\"dump\">BASCULANTE</option>\n                      <option value=\"container\">PORTA-CONTEINER</option>\n                      <option value=\"closed\">FECHADA</option>\n                      <option value=\"tank\">TANQUE</option>\n                    </select>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n          \n          <DialogFooter className=\"justify-between\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => setIsEditVehicleModalOpen(false)}\n            >\n              Cancelar\n            </Button>\n            <Button \n              type=\"button\"\n              className=\"gap-1\"\n              onClick={() => {\n                if (!selectedVehicleId) return;\n                \n                // Coletar dados do formulário\n                const updatedVehicle = {\n                  id: selectedVehicleId,\n                  renavam: editForm.renavam,\n                  brand: editForm.brand,\n                  model: editForm.model,\n                  year: Number(editForm.year) || 2020,\n                  axleCount: Number(editForm.axleCount) || 1,\n                  tare: Number(editForm.tare) || 1000\n                };\n                \n                // Adicionar tipo de carroceria se aplicável\n                if (selectedVehicle && ['truck', 'semitrailer', 'trailer'].includes(selectedVehicle.type)) {\n                  (updatedVehicle as any).bodyType = editForm.bodyType;\n                }\n                \n                // Enviar para o servidor\n                updateVehicleMutation.mutate(updatedVehicle);\n              }}\n              disabled={updateVehicleMutation.isPending}\n            >\n              {updateVehicleMutation.isPending ? (\n                <div className=\"flex items-center\">\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Salvando...\n                </div>\n              ) : (\n                <>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  Salvar Alterações\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Componente de histórico de status */}\n      <div className=\"mt-6\">\n        <StatusHistoryNew licenseId={license.id} states={license.states || []} />\n      </div>\n    </div>\n  );\n}","size_bytes":69018},"client/src/pages/admin/BulkLicenseImport.tsx":{"content":"import { useState, useRef } from 'react';\nimport { AdminLayout } from '@/components/layout/admin-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Upload, Download, FileSpreadsheet, AlertTriangle, CheckCircle, XCircle, Info } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface ImportResult {\n  success: boolean;\n  message: string;\n  imported: number;\n  errors: string[];\n  warnings: string[];\n}\n\nexport default function BulkLicenseImport() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [importing, setImporting] = useState(false);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n    \n    const file = files[0];\n    if (file) {\n      // Validar tipo do arquivo\n      if (!file.name.endsWith('.csv')) {\n        alert('Por favor, selecione um arquivo CSV');\n        return;\n      }\n      \n      setSelectedFile(file);\n      setImportResult(null);\n    }\n  };\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    const files = event.dataTransfer.files;\n    if (!files || files.length === 0) return;\n    \n    const file = files[0];\n    if (file && file.name.endsWith('.csv')) {\n      setSelectedFile(file);\n      setImportResult(null);\n    }\n  };\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n  };\n\n  const downloadTemplate = async () => {\n    try {\n      const response = await fetch('/api/admin/licenses/bulk-import/template');\n      if (!response.ok) {\n        throw new Error('Erro ao baixar template');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'template_importacao_licencas.csv';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Erro ao baixar template:', error);\n      alert('Erro ao baixar template da planilha');\n    }\n  };\n\n  const importLicenses = async () => {\n    if (!selectedFile) return;\n\n    setImporting(true);\n    setUploadProgress(0);\n    setImportResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('csvFile', selectedFile);\n\n      // Simular progresso de upload\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return 90;\n          }\n          return prev + 10;\n        });\n      }, 200);\n\n      const response = await fetch('/api/admin/licenses/bulk-import', {\n        method: 'POST',\n        body: formData,\n      });\n\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n\n      const result = await response.json();\n      setImportResult(result);\n\n      if (result.success) {\n        // Resetar formulário se sucesso\n        setSelectedFile(null);\n        if (fileInputRef.current) {\n          fileInputRef.current.value = '';\n        }\n      }\n\n    } catch (error) {\n      console.error('Erro na importação:', error);\n      setImportResult({\n        success: false,\n        message: 'Erro de conexão com o servidor',\n        imported: 0,\n        errors: ['Erro de conexão. Tente novamente.'],\n        warnings: []\n      });\n    } finally {\n      setImporting(false);\n      setTimeout(() => setUploadProgress(0), 2000);\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"container mx-auto p-6 max-w-4xl\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold\">Importação em Massa de Licenças</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Importe várias licenças AET de uma só vez usando uma planilha CSV\n          </p>\n        </div>\n\n      {/* Instruções */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Info className=\"w-5 h-5\" />\n            Como usar\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">1. Baixe o Template</h4>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Baixe a planilha modelo com as colunas corretas e um exemplo de preenchimento.\n                </p>\n                <Button onClick={downloadTemplate} variant=\"outline\" className=\"w-full\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Baixar Template CSV\n                </Button>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">2. Preencha os Dados</h4>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Complete a planilha com os dados das licenças. Todos os veículos e transportadores devem estar cadastrados.\n                </p>\n                <div className=\"text-xs text-gray-500\">\n                  <p>• Use ponto e vírgula (;) como separador</p>\n                  <p>• Vírgulas decimais podem usar ',' ou '.'</p>\n                  <p>• Estados separados por vírgula (SP,MG,RJ)</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upload de Arquivo */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Upload da Planilha</CardTitle>\n          <CardDescription>\n            Faça upload do arquivo CSV com os dados das licenças\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div \n            className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors\"\n            onDrop={handleDrop}\n            onDragOver={handleDragOver}\n          >\n            {selectedFile ? (\n              <div className=\"space-y-4\">\n                <FileSpreadsheet className=\"w-12 h-12 mx-auto text-green-600\" />\n                <div>\n                  <p className=\"font-semibold\">{selectedFile.name}</p>\n                  <p className=\"text-sm text-gray-600\">\n                    {(selectedFile.size / 1024).toFixed(1)} KB\n                  </p>\n                </div>\n                <div className=\"flex gap-2 justify-center\">\n                  <Button \n                    onClick={() => fileInputRef.current?.click()} \n                    variant=\"outline\"\n                  >\n                    Escolher Outro Arquivo\n                  </Button>\n                  <Button \n                    onClick={importLicenses}\n                    disabled={importing}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    {importing ? (\n                      <>\n                        <div className=\"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                        Importando...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Importar Licenças\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <Upload className=\"w-12 h-12 mx-auto text-gray-400\" />\n                <div>\n                  <p className=\"text-lg font-semibold\">Arraste o arquivo CSV aqui</p>\n                  <p className=\"text-gray-600\">ou clique para selecionar</p>\n                </div>\n                <Button onClick={() => fileInputRef.current?.click()}>\n                  Selecionar Arquivo\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n\n          {importing && uploadProgress > 0 && (\n            <div className=\"mt-4\">\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span>Processando...</span>\n                <span>{uploadProgress}%</span>\n              </div>\n              <Progress value={uploadProgress} className=\"w-full\" />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Resultado da Importação */}\n      {importResult && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              {importResult.success ? (\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              ) : (\n                <XCircle className=\"w-5 h-5 text-red-600\" />\n              )}\n              Resultado da Importação\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Alert className={importResult.success ? \"border-green-200 bg-green-50\" : \"border-red-200 bg-red-50\"}>\n              <AlertDescription>\n                {importResult.message}\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">{importResult.imported || 0}</div>\n                <div className=\"text-sm text-blue-600\">Licenças Importadas</div>\n              </div>\n              \n              {importResult.warnings && importResult.warnings.length > 0 && (\n                <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">{importResult.warnings.length}</div>\n                  <div className=\"text-sm text-yellow-600\">Avisos</div>\n                </div>\n              )}\n              \n              {importResult.errors && importResult.errors.length > 0 && (\n                <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\">{importResult.errors.length}</div>\n                  <div className=\"text-sm text-red-600\">Erros</div>\n                </div>\n              )}\n            </div>\n\n            {((importResult.warnings && importResult.warnings.length > 0) || (importResult.errors && importResult.errors.length > 0)) && (\n              <div className=\"mt-6 space-y-4\">\n                {importResult.warnings && importResult.warnings.length > 0 && (\n                  <div>\n                    <h4 className=\"font-semibold flex items-center gap-2 mb-2\">\n                      <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                      Avisos ({importResult.warnings?.length || 0})\n                    </h4>\n                    <ScrollArea className=\"h-24 w-full border rounded p-2 bg-yellow-50\">\n                      {(importResult.warnings || []).slice(0, 50).map((warning, index) => (\n                        <div key={index} className=\"text-sm text-yellow-700 mb-1\">\n                          {warning}\n                        </div>\n                      ))}\n                      {(importResult.warnings?.length || 0) > 50 && (\n                        <div className=\"text-sm text-yellow-600 mt-2 font-semibold\">\n                          ... e mais {(importResult.warnings?.length || 0) - 50} avisos\n                        </div>\n                      )}\n                    </ScrollArea>\n                  </div>\n                )}\n\n                {importResult.errors && importResult.errors.length > 0 && (\n                  <div>\n                    <h4 className=\"font-semibold flex items-center gap-2 mb-2\">\n                      <XCircle className=\"w-4 h-4 text-red-600\" />\n                      Erros ({importResult.errors?.length || 0})\n                    </h4>\n                    <ScrollArea className=\"h-32 w-full border rounded p-2 bg-red-50\">\n                      {(importResult.errors || []).slice(0, 50).map((error, index) => (\n                        <div key={index} className=\"text-sm text-red-700 mb-1\">\n                          {error}\n                        </div>\n                      ))}\n                      {(importResult.errors?.length || 0) > 50 && (\n                        <div className=\"text-sm text-red-600 mt-2 font-semibold\">\n                          ... e mais {(importResult.errors?.length || 0) - 50} erros\n                        </div>\n                      )}\n                    </ScrollArea>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Informações Importantes */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Informações Importantes</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 text-sm\">\n            <div className=\"flex items-start gap-2\">\n              <Badge variant=\"outline\" className=\"mt-0.5\">Tipos</Badge>\n              <div>\n                <strong>Tipos de conjunto aceitos:</strong> Bitrem 6 eixos, Bitrem 7 eixos, Bitrem 9 eixos, Rodotrem 7 eixos, Rodotrem 9 eixos, Prancha, Romeu e Julieta\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-2\">\n              <Badge variant=\"outline\" className=\"mt-0.5\">Veículos</Badge>\n              <div>\n                <strong>Veículos obrigatórios:</strong> Todos os veículos mencionados na planilha devem estar cadastrados no sistema antes da importação\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-2\">\n              <Badge variant=\"outline\" className=\"mt-0.5\">Validação</Badge>\n              <div>\n                <strong>Verificação de duplicatas:</strong> O sistema verifica automaticamente se já existe licença similar para a mesma combinação de veículos\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-2\">\n              <Badge variant=\"outline\" className=\"mt-0.5\">Estados</Badge>\n              <div>\n                <strong>Estados válidos:</strong> AC, AL, AP, AM, BA, CE, DF, ES, GO, MG, MS, MT, PA, PB, PR, PE, PI, RJ, RN, RS, RO, RR, SC, SE, SP, TO, DNIT, ANTT, PRF\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":15113},"client/src/hooks/use-dashboard-stats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useWebSocketContext } from \"./use-websocket-context\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport type DashboardStats = {\n  issuedLicenses: number;\n  pendingLicenses: number;\n  registeredVehicles: number;\n  activeVehicles: number;\n  expiringLicenses: number;\n  recentLicenses: Array<{\n    id: number;\n    requestNumber: string;\n    type: string;\n    mainVehiclePlate: string;\n    states: string[];\n    status: string;\n    createdAt: string;\n  }>;\n};\n\nexport function useDashboardStats() {\n  const { lastMessage } = useWebSocketContext();\n  \n  const query = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/dashboard/stats\", {\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        throw new Error(\"Erro ao buscar estatísticas do dashboard\");\n      }\n      return res.json();\n    },\n    staleTime: 1000, // Cache por 1 segundo (instantâneo)\n    refetchInterval: 15000, // Refetch a cada 15 segundos (ultra rápido)\n  });\n\n  // TEMPO REAL INSTANTÂNEO: Dashboard atualiza cores imediatamente\n  useEffect(() => {\n    if (lastMessage?.type && (lastMessage.type === 'STATUS_UPDATE' || lastMessage.type === 'LICENSE_UPDATE')) {\n      // Performance: Log removido\n      \n      // FORÇAR RESET E REFETCH IMEDIATO para cores mudarem instantaneamente\n      queryClient.resetQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/dashboard/stats\"], type: 'active' });\n    }\n  }, [lastMessage]);\n\n  return query;\n}\n","size_bytes":1655},"client/src/pages/dashboard-page.tsx":{"content":"import { MainLayout } from \"@/components/layout/main-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { LicenseTable } from \"@/components/dashboard/license-table\";\nimport { StatusChart } from \"@/components/dashboard/status-chart\";\nimport { useDashboardStats } from \"@/hooks/use-dashboard-stats\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useWebSocketContext } from \"@/hooks/use-websocket-context\";\nimport { CheckCircle, Clock, Truck, AlertCircle, Search } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { SkeletonCardGroup } from \"@/components/ui/skeleton-card\";\nimport { PageTransition, FadeIn } from \"@/components/ui/page-transition\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\n\nexport default function DashboardPage() {\n  const { data: stats, isLoading, error } = useDashboardStats();\n  const isMobile = useIsMobile();\n  \n  // Hook para tempo real INSTANTÂNEO\n  const { isConnected } = useWebSocketContext();\n\n  return (\n    <MainLayout>\n      <PageTransition>\n        {/* Header responsivo */}\n        <div className={`${isMobile ? 'mb-4' : 'mb-6'} ${isMobile ? 'flex flex-col gap-3' : 'flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0'}`}>\n          <div>\n            <h1 className={`${isMobile ? 'text-xl' : 'text-2xl'} font-bold text-foreground`}>\n              Dashboard\n            </h1>\n            <div className={`flex items-center gap-2 mt-1 ${isMobile ? 'text-xs' : 'text-sm'}`}>\n              <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${isMobile ? 'text-xs' : 'text-xs'} ${isConnected ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'}`}>\n                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-gray-400'}`}></div>\n                {isConnected ? 'Tempo Real Ativo' : 'Offline'}\n              </div>\n            </div>\n          </div>\n          \n          {/* Barra de pesquisa responsiva */}\n          <div className={`${isMobile ? 'w-full' : 'flex items-center w-full sm:w-auto'}`}>\n            <div className={`relative ${isMobile ? 'w-full' : 'w-full sm:w-64'}`}>\n              <input \n                type=\"text\" \n                placeholder=\"Pesquisar...\" \n                className={`w-full pl-10 pr-4 ${isMobile ? 'py-3 text-base' : 'py-2'} border border-input rounded-lg bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary`}\n              />\n              <Search className={`absolute left-3 ${isMobile ? 'top-3.5' : 'top-2.5'} text-muted-foreground h-5 w-5`} />\n            </div>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className={`${isMobile ? 'mb-4' : 'mb-8'}`}>\n            <SkeletonCardGroup count={3} />\n          </div>\n        ) : error ? (\n          <Card className={`${isMobile ? 'mb-4' : 'mb-8'}`}>\n            <CardContent className={`${isMobile ? 'pt-4 p-4' : 'pt-6'} flex items-center`}>\n              <AlertCircle className={`${isMobile ? 'h-6 w-6' : 'h-8 w-8'} text-red-500 mr-2`} />\n              <p className={`${isMobile ? 'text-sm' : ''}`}>\n                Erro ao carregar estatísticas. Tente novamente.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className={`${isMobile ? 'grid grid-cols-1 gap-3 mb-4' : 'grid grid-cols-1 md:grid-cols-3 gap-6 mb-8'}`}>\n            <StatsCard \n              title=\"Licenças Emitidas\"\n              value={stats?.issuedLicenses || 0}\n              icon={<CheckCircle className={`${isMobile ? 'h-6 w-6' : 'h-8 w-8'}`} />}\n              trend={12}\n              trendText=\"esta semana\"\n              color=\"primary\"\n            />\n            <StatsCard \n              title=\"Licenças Pendentes\"\n              value={stats?.pendingLicenses || 0}\n              icon={<Clock className={`${isMobile ? 'h-6 w-6' : 'h-8 w-8'}`} />}\n              trend={4}\n              trendText=\"em processamento\"\n              color=\"yellow\"\n            />\n            <StatsCard \n              title=\"Veículos Cadastrados\"\n              value={stats?.registeredVehicles || 0}\n              icon={<Truck className={`${isMobile ? 'h-6 w-6' : 'h-8 w-8'}`} />}\n              secondaryText={`${stats?.activeVehicles || 0} ativos`}\n              color=\"blue\"\n            />\n          </div>\n        )}\n\n        <Card className=\"mb-8\">\n          <div className=\"p-6 border-b border-border\">\n            <h2 className=\"text-lg font-medium text-foreground\">Licenças Recentes</h2>\n          </div>\n          <LicenseTable licenses={stats?.recentLicenses || []} isLoading={isLoading} />\n          <div className=\"px-6 py-4 border-t border-border\">\n            <a href=\"/issued-licenses\" className=\"text-sm text-primary hover:text-primary/80 font-medium\">Ver todas as licenças →</a>\n          </div>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card className=\"p-6\">\n            <Tabs defaultValue=\"vehicle-status\">\n              <TabsList className=\"mb-4\">\n                <TabsTrigger value=\"vehicle-status\">Status de Veículos</TabsTrigger>\n                <TabsTrigger value=\"license-states\">Licenças por Estado</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"vehicle-status\">\n                <div className=\"h-64\">\n                  <StatusChart\n                    type=\"vehicle\"\n                    isLoading={isLoading}\n                  />\n                </div>\n              </TabsContent>\n              <TabsContent value=\"license-states\">\n                <div className=\"h-64\">\n                  <StatusChart\n                    type=\"state\"\n                    isLoading={isLoading}\n                  />\n                </div>\n              </TabsContent>\n            </Tabs>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <h2 className=\"text-lg font-medium text-foreground mb-4\">Licenças por Estado</h2>\n            <div className=\"h-64\">\n              <StatusChart\n                type=\"state\"\n                isLoading={isLoading}\n              />\n            </div>\n          </Card>\n        </div>\n      </PageTransition>\n    </MainLayout>\n  );\n}\n","size_bytes":6386},"client/src/hooks/use-websocket-context.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { queryClient } from '@/lib/queryClient';\n\n// Tipos de mensagem WebSocket\nexport interface WebSocketMessage {\n  type: 'STATUS_UPDATE' | 'LICENSE_UPDATE' | 'DASHBOARD_UPDATE' | 'CONNECTED';\n  data?: any;\n  message?: string;\n  timestamp?: string;\n}\n\n// Context para WebSocket\ninterface WebSocketContextType {\n  isConnected: boolean;\n  lastMessage: WebSocketMessage | null;\n  send: (message: any) => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | null>(null);\n\n// Provider do WebSocket\nexport function WebSocketProvider({ children }: { children: ReactNode }) {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n\n  const connect = () => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    \n    ws.onopen = () => {\n      setIsConnected(true);\n      setSocket(ws);\n    };\n    \n    ws.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        setLastMessage(message);\n        \n        // TEMPO REAL INSTANTÂNEO: Processar atualizações imediatamente\n        if (message.type === 'STATUS_UPDATE' || message.type === 'LICENSE_UPDATE') {\n          // FORÇAR ATUALIZAÇÃO IMEDIATA - staleTime = 0 temporariamente\n          queryClient.resetQueries({ queryKey: ['/api/licenses'] });\n          queryClient.resetQueries({ queryKey: ['/api/admin/licenses'] });\n          queryClient.resetQueries({ queryKey: ['/api/dashboard/stats'] });\n          \n          // Refetch forçado para garantir dados frescos\n          Promise.all([\n            queryClient.refetchQueries({ queryKey: ['/api/licenses'], type: 'active' }),\n            queryClient.refetchQueries({ queryKey: ['/api/admin/licenses'], type: 'active' }),\n            queryClient.refetchQueries({ queryKey: ['/api/dashboard/stats'], type: 'active' })\n          ]);\n          \n          // Forçar re-render dos componentes com timestamp único\n          setLastMessage({ ...message, timestamp: new Date().toISOString() });\n        }\n      } catch (error) {\n        console.error('[REALTIME] Erro ao processar mensagem WebSocket:', error);\n      }\n    };\n    \n    ws.onclose = () => {\n      setIsConnected(false);\n      setSocket(null);\n      \n      // Reconectar após 1 segundo\n      setTimeout(connect, 1000);\n    };\n    \n    ws.onerror = (error) => {\n      console.error('[REALTIME] Erro WebSocket:', error);\n    };\n  };\n\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []);\n\n  const send = (message: any) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n    }\n  };\n\n  return (\n    <WebSocketContext.Provider value={{ isConnected, lastMessage, send }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\n// Hook para usar o contexto\nexport function useWebSocketContext() {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocketContext deve ser usado dentro de WebSocketProvider');\n  }\n  return context;\n}","size_bytes":3392},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      // Tentar extrair erro como JSON primeiro se possível\n      const contentType = res.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const errorJson = await res.json();\n        throw new Error(errorJson.message || `${res.status}: ${res.statusText}`);\n      } else {\n        const text = await res.text();\n        throw new Error(text || `${res.status}: ${res.statusText}`);\n      }\n    } catch (e) {\n      // Se não conseguir parsear ou outro erro\n      if (e instanceof Error) {\n        throw e;\n      }\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n  }\n}\n\n/**\n * Função para realizar requisições à API com tratamento de erro padronizado\n */\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n  options?: { \n    headers?: Record<string, string>;\n    isFormData?: boolean;\n  }\n): Promise<Response> {\n  try {\n    // Verifica se é FormData diretamente ou pela flag\n    const isFormData = data instanceof FormData || options?.isFormData === true;\n    const headers = options?.headers || {};\n    \n    // Não definimos Content-Type para FormData, o navegador define automaticamente com o boundary correto\n    if (data && !isFormData && !headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json';\n    }\n    \n    const res = await fetch(url, {\n      method,\n      headers,\n      // Para FormData não usamos JSON.stringify\n      body: isFormData ? (data as BodyInit) : data ? JSON.stringify(data) : undefined,\n      credentials: \"include\",\n    });\n\n    await throwIfResNotOk(res);\n    return res;\n  } catch (error) {\n    console.error(`Erro na requisição ${method} ${url}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Comportamentos possíveis quando ocorre erro 401 (não autenticado)\n */\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\n\n/**\n * Função de query para o TanStack Query com tratamento de erros\n */\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    try {\n      const url = queryKey[0] as string;\n      const res = await fetch(url, {\n        method: 'GET',\n        credentials: \"include\",\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      // Tratamento específico para erros de autenticação\n      if (res.status === 401) {\n        if (unauthorizedBehavior === \"returnNull\") {\n          return null;\n        } else {\n          throw new Error(\"Não autenticado\");\n        }\n      }\n\n      await throwIfResNotOk(res);\n      return await res.json();\n    } catch (error) {\n      console.error(`Erro na consulta:`, error);\n      throw error;\n    }\n  };\n\n/**\n * Cliente de query configurado com os padrões da aplicação\n */\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      // TEMPO REAL INSTANTÂNEO: Cache ultra baixo para cores mudarem instantaneamente\n      staleTime: 1000, // 1 segundo para tempo real\n      gcTime: 30 * 1000, // 30 segundos\n      // FORÇA refetch para tempo real\n      refetchOnWindowFocus: true,\n      refetchOnReconnect: true,\n      refetchOnMount: true,\n      // Retry otimizado para tempo real\n      retry: (failureCount, error: any) => {\n        if (error?.message?.includes('401') || error?.message?.includes('Não autenticado')) {\n          return false;\n        }\n        return failureCount < 2;\n      },\n      retryDelay: 300, // Delay menor para atualizações mais rápidas\n      networkMode: 'online',\n    },\n    mutations: {\n      retry: 1,\n      networkMode: 'online',\n    },\n  },\n});\n","size_bytes":3869},"client/src/pages/meus-boletos.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Download, FileText, Receipt, Search, Filter, DollarSign, Calendar, RefreshCw, Loader2 } from \"lucide-react\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport type { Boleto } from \"@shared/schema\";\nimport { UnifiedLayout } from \"@/components/layout/unified-layout\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocketContext } from \"@/hooks/use-websocket-context\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { usePaginatedList } from \"@/hooks/use-paginated-list\";\nimport { ListPagination, MobileListPagination } from \"@/components/ui/list-pagination\";\n\nconst getStatusBadgeVariant = (status: string) => {\n  switch (status) {\n    case \"pago\":\n      return \"default\";\n    case \"pendente\":\n      return \"secondary\";\n    case \"vencido\":\n      return \"destructive\";\n    case \"cancelado\":\n      return \"outline\";\n    default:\n      return \"secondary\";\n  }\n};\n\nconst getStatusLabel = (status: string) => {\n  switch (status) {\n    case \"pago\":\n      return \"Pago\";\n    case \"pendente\":\n      return \"Aguardando Pagamento\";\n    case \"vencido\":\n      return \"Vencido\";\n    case \"cancelado\":\n      return \"Cancelado\";\n    default:\n      return status;\n  }\n};\n\nexport default function MeusBoletos() {\n  const [filtroStatus, setFiltroStatus] = useState<string>(\"todos\");\n  const [filtroVencimento, setFiltroVencimento] = useState<string>(\"todos\");\n  const [termoBusca, setTermoBusca] = useState(\"\");\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const { toast } = useToast();\n  const { lastMessage } = useWebSocketContext();\n  const isMobile = useIsMobile();\n\n  const { data: boletos = [], isLoading, error, refetch } = useQuery<Boleto[]>({\n    queryKey: [\"/api/meus-boletos\"],\n    refetchInterval: 30000, // Atualiza a cada 30 segundos\n    staleTime: 1000, // 1 segundo para garantir dados frescos\n  });\n\n  // Atualização em tempo real via WebSocket\n  useEffect(() => {\n    if (lastMessage?.type === 'DASHBOARD_UPDATE' || lastMessage?.type === 'USER_UPDATE') {\n      refetch();\n    }\n  }, [lastMessage, refetch]);\n\n  // Função para verificar se boleto está vencido\n  const isVencido = (dataVencimento: string | Date) => {\n    if (!dataVencimento) return false;\n    return new Date(dataVencimento) < new Date();\n  };\n\n  // Aplicar filtros e busca\n  const boletosFiltrados = useMemo(() => {\n    if (!boletos) return [];\n    \n    return boletos.filter((boleto) => {\n      // Filtro por status\n      let matchStatus = true;\n      if (filtroStatus && filtroStatus !== \"todos\") {\n        if (filtroStatus === \"aguardando_pagamento\") {\n          matchStatus = boleto.status === \"pendente\";\n        } else if (filtroStatus === \"vencido\") {\n          matchStatus = isVencido(boleto.dataVencimento);\n        } else {\n          matchStatus = boleto.status === filtroStatus;\n        }\n      }\n      \n      // Filtro por vencimento\n      let matchVencimento = true;\n      if (filtroVencimento && filtroVencimento !== \"todos\") {\n        const hoje = new Date();\n        const vencimento = new Date(boleto.dataVencimento);\n        const seteDiasDepois = new Date();\n        seteDiasDepois.setDate(hoje.getDate() + 7);\n        \n        if (filtroVencimento === \"vencidos\") {\n          matchVencimento = vencimento < hoje;\n        } else if (filtroVencimento === \"vencendo\") {\n          matchVencimento = vencimento >= hoje && vencimento <= seteDiasDepois;\n        } else if (filtroVencimento === \"futuros\") {\n          matchVencimento = vencimento > seteDiasDepois;\n        }\n      }\n      \n      // Filtro de busca\n      const matchBusca = !termoBusca || \n        boleto.numeroBoleto.toLowerCase().includes(termoBusca.toLowerCase()) ||\n        boleto.nomeTransportador.toLowerCase().includes(termoBusca.toLowerCase()) ||\n        boleto.cpfCnpj.includes(termoBusca);\n      \n      return matchStatus && matchVencimento && matchBusca;\n    });\n  }, [boletos, filtroStatus, filtroVencimento, termoBusca]);\n\n  // Implementar paginação\n  const {\n    currentPage,\n    pageSize,\n    paginatedItems: boletosExibidos,\n    totalPages,\n    totalItems,\n    handlePageChange,\n    handlePageSizeChange,\n    goToFirstPage,\n    goToLastPage,\n    goToPreviousPage,\n    goToNextPage,\n    canGoPrevious,\n    canGoNext\n  } = usePaginatedList({\n    items: boletosFiltrados,\n    defaultPageSize: 25,\n    searchTerm: termoBusca\n  });\n\n  // Função para atualizar manualmente\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      await refetch();\n      toast({\n        title: \"Atualizado\",\n        description: \"Lista de boletos atualizada com sucesso\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar boletos\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const handleDownloadFile = (url: string, fileName: string) => {\n    if (!url) {\n      toast({\n        title: \"Erro\",\n        description: \"Arquivo não encontrado\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName;\n    link.target = '_blank';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const exportToCSV = () => {\n    if (!boletosFiltrados || boletosFiltrados.length === 0) {\n      toast({\n        title: \"Nenhum dado para exportar\",\n        description: \"Não há boletos para exportar\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const headers = ['Número', 'Transportador', 'CPF/CNPJ', 'Valor', 'Emissão', 'Vencimento', 'Status'];\n    const csvContent = [\n      headers.join(','),\n      ...boletosFiltrados.map(boleto => [\n        boleto.numeroBoleto,\n        `\"${boleto.nomeTransportador}\"`,\n        boleto.cpfCnpj,\n        boleto.valor,\n        formatDate(boleto.dataEmissao),\n        formatDate(boleto.dataVencimento),\n        getStatusLabel(boleto.status)\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `meus-boletos-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"Exportação concluída\",\n      description: `${boletosFiltrados.length} boletos exportados com sucesso`\n    });\n  };\n\n  // Estatísticas resumidas\n  const totalBoletos = boletosFiltrados.length;\n  const valorTotal = boletosFiltrados.reduce((sum, boleto) => \n    sum + parseFloat(boleto.valor.toString().replace(/[^\\d.,]/g, '').replace(',', '.')), 0\n  );\n  const boletosPendentes = boletosFiltrados.filter(b => b.status === 'pendente').length;\n  const boletosVencidos = boletosFiltrados.filter(b => isVencido(b.dataVencimento)).length;\n\n  if (error) {\n    return (\n      <UnifiedLayout>\n        <div className=\"space-y-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Meus Boletos</h1>\n            <p className=\"text-muted-foreground\">Gerencie seus boletos financeiros</p>\n          </div>\n          <Card>\n            <CardContent className=\"p-6\">\n              <p className=\"text-red-600\">Erro ao carregar boletos. Tente novamente.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </UnifiedLayout>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <UnifiedLayout>\n        <div className=\"space-y-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Meus Boletos</h1>\n            <p className=\"text-muted-foreground\">Gerencie seus boletos financeiros</p>\n          </div>\n          <Card>\n            <CardContent className=\"p-6\">\n              <p>Carregando boletos...</p>\n            </CardContent>\n          </Card>\n        </div>\n      </UnifiedLayout>\n    );\n  }\n\n  return (\n    <UnifiedLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className={`${isMobile ? 'space-y-4' : 'flex justify-between items-center'}`}>\n          <div>\n            <h1 className={`${isMobile ? 'text-2xl' : 'text-3xl'} font-bold`}>Meus Boletos</h1>\n            <p className=\"text-muted-foreground\">Gerencie seus boletos financeiros</p>\n          </div>\n          <div className={`flex gap-2 ${isMobile ? 'w-full' : ''}`}>\n            <Button \n              onClick={handleRefresh} \n              variant=\"outline\"\n              disabled={isRefreshing}\n              className={`${isMobile ? 'flex-1' : ''}`}\n            >\n              {isRefreshing ? (\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n              )}\n              Atualizar\n            </Button>\n            <Button onClick={exportToCSV} className={`${isMobile ? 'flex-1' : ''}`}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Exportar CSV\n            </Button>\n          </div>\n        </div>\n\n        {/* Estatísticas */}\n        <div className={`grid ${isMobile ? 'grid-cols-2' : 'grid-cols-1 md:grid-cols-4'} gap-4`}>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total de Boletos</CardTitle>\n              <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalBoletos}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Valor Total</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(valorTotal)}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pendentes</CardTitle>\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{boletosPendentes}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Vencidos</CardTitle>\n              <Calendar className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{boletosVencidos}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filtros */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"h-5 w-5\" />\n              Filtros\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className={`grid ${isMobile ? 'grid-cols-1 gap-3' : 'grid-cols-1 md:grid-cols-4 gap-4'}`}>\n              <div>\n                <Label htmlFor=\"busca\">Buscar</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"busca\"\n                    placeholder=\"Número ou transportador...\"\n                    value={termoBusca}\n                    onChange={(e) => setTermoBusca(e.target.value)}\n                    className=\"pl-8\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"filtro-status\">Status</Label>\n                <Select value={filtroStatus} onValueChange={setFiltroStatus}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Todos os status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"todos\">Todos os status</SelectItem>\n                    <SelectItem value=\"aguardando_pagamento\">Aguardando Pagamento</SelectItem>\n                    <SelectItem value=\"pago\">Pago</SelectItem>\n                    <SelectItem value=\"vencido\">Vencido</SelectItem>\n                    <SelectItem value=\"pendente\">Pendente</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"filtro-vencimento\">Vencimento</Label>\n                <Select value={filtroVencimento} onValueChange={setFiltroVencimento}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Período de vencimento\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"todos\">Todos</SelectItem>\n                    <SelectItem value=\"vencidos\">Vencidos</SelectItem>\n                    <SelectItem value=\"vencendo\">Vencendo (7 dias)</SelectItem>\n                    <SelectItem value=\"futuros\">Futuros</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setFiltroStatus(\"todos\");\n                    setFiltroVencimento(\"todos\");\n                    setTermoBusca(\"\");\n                  }}\n                  className=\"w-full\"\n                >\n                  Limpar Filtros\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Lista de Boletos - Responsiva */}\n        {boletosFiltrados.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-8\">\n              <div className=\"text-center\">\n                <Receipt className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Nenhum boleto encontrado\n                </h3>\n                <p className=\"text-gray-500\">\n                  {boletos.length === 0 \n                    ? \"Ainda não há boletos cadastrados para você.\"\n                    : \"Nenhum boleto corresponde aos filtros aplicados.\"\n                  }\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : isMobile ? (\n          // Layout Mobile - Cards\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold\">\n                Boletos ({totalItems} total{totalItems !== boletosExibidos.length ? `, ${boletosExibidos.length} exibidos` : ''})\n              </h3>\n            </div>\n            {boletosExibidos.map((boleto: Boleto) => (\n              <Card key={boleto.id} className=\"shadow-sm\">\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-3\">\n                    {/* Header do Card */}\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <p className=\"font-semibold text-base\">{boleto.numeroBoleto}</p>\n                        <p className=\"text-sm text-gray-600\">{boleto.nomeTransportador}</p>\n                      </div>\n                      <Badge variant={getStatusBadgeVariant(boleto.status)}>\n                        {getStatusLabel(boleto.status)}\n                      </Badge>\n                    </div>\n                    \n                    {/* Informações principais */}\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <p className=\"text-gray-500\">CPF/CNPJ</p>\n                        <p className=\"font-medium\">{boleto.cpfCnpj}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-500\">Valor</p>\n                        <p className=\"font-semibold text-green-600\">\n                          {formatCurrency(parseFloat(boleto.valor.toString()))}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-500\">Emissão</p>\n                        <p>{formatDate(boleto.dataEmissao)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-500\">Vencimento</p>\n                        <p className={isVencido(boleto.dataVencimento) ? \"text-red-600 font-medium\" : \"\"}>\n                          {formatDate(boleto.dataVencimento)}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {/* Ações */}\n                    <div className=\"flex gap-2 pt-2\">\n                      {boleto.uploadBoletoUrl && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDownloadFile(boleto.uploadBoletoUrl!, `boleto-${boleto.numeroBoleto}.pdf`)}\n                          className=\"flex-1\"\n                        >\n                          <Receipt className=\"h-3 w-3 mr-1\" />\n                          Boleto\n                        </Button>\n                      )}\n                      {boleto.uploadNfUrl && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDownloadFile(boleto.uploadNfUrl!, `nf-${boleto.numeroBoleto}.pdf`)}\n                          className=\"flex-1\"\n                        >\n                          <FileText className=\"h-3 w-3 mr-1\" />\n                          NF\n                        </Button>\n                      )}\n                      {!boleto.uploadBoletoUrl && !boleto.uploadNfUrl && (\n                        <p className=\"text-sm text-gray-500 text-center w-full py-2\">Sem arquivos</p>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            \n            {/* Paginação Mobile */}\n            {totalItems > 0 && (\n              <MobileListPagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                totalItems={totalItems}\n                pageSize={pageSize}\n                onPageChange={handlePageChange}\n                onPageSizeChange={handlePageSizeChange}\n                goToFirstPage={goToFirstPage}\n                goToLastPage={goToLastPage}\n                goToPreviousPage={goToPreviousPage}\n                goToNextPage={goToNextPage}\n                canGoPrevious={canGoPrevious}\n                canGoNext={canGoNext}\n              />\n            )}\n          </div>\n        ) : (\n          // Layout Desktop - Tabela\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                Boletos ({totalItems} total{totalItems !== boletosExibidos.length ? `, ${boletosExibidos.length} exibidos` : ''})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Número</TableHead>\n                      <TableHead>Transportador</TableHead>\n                      <TableHead>CPF/CNPJ</TableHead>\n                      <TableHead>Valor</TableHead>\n                      <TableHead>Emissão</TableHead>\n                      <TableHead>Vencimento</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Ações</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {boletosExibidos.map((boleto: Boleto) => (\n                      <TableRow key={boleto.id}>\n                        <TableCell className=\"font-medium\">\n                          {boleto.numeroBoleto}\n                        </TableCell>\n                        <TableCell>{boleto.nomeTransportador}</TableCell>\n                        <TableCell>{boleto.cpfCnpj}</TableCell>\n                        <TableCell>{formatCurrency(parseFloat(boleto.valor.toString()))}</TableCell>\n                        <TableCell>\n                          {formatDate(boleto.dataEmissao)}\n                        </TableCell>\n                        <TableCell>\n                          <div className={isVencido(boleto.dataVencimento) ? \"text-red-600\" : \"\"}>\n                            {formatDate(boleto.dataVencimento)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getStatusBadgeVariant(boleto.status)}>\n                            {getStatusLabel(boleto.status)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            {boleto.uploadBoletoUrl && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDownloadFile(boleto.uploadBoletoUrl!, `boleto-${boleto.numeroBoleto}.pdf`)}\n                                title=\"Baixar boleto\"\n                              >\n                                <Receipt className=\"h-3 w-3\" />\n                              </Button>\n                            )}\n                            {boleto.uploadNfUrl && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDownloadFile(boleto.uploadNfUrl!, `nf-${boleto.numeroBoleto}.pdf`)}\n                                title=\"Baixar nota fiscal\"\n                              >\n                                <FileText className=\"h-3 w-3\" />\n                              </Button>\n                            )}\n                            {!boleto.uploadBoletoUrl && !boleto.uploadNfUrl && (\n                              <span className=\"text-sm text-gray-500\">Sem arquivos</span>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n              \n              {/* Paginação Desktop */}\n              {totalItems > 0 && (\n                <div className=\"mt-4 pt-4 border-t\">\n                  <ListPagination\n                    currentPage={currentPage}\n                    totalPages={totalPages}\n                    totalItems={totalItems}\n                    pageSize={pageSize}\n                    onPageChange={handlePageChange}\n                    onPageSizeChange={handlePageSizeChange}\n                    goToFirstPage={goToFirstPage}\n                    goToLastPage={goToLastPage}\n                    goToPreviousPage={goToPreviousPage}\n                    goToNextPage={goToNextPage}\n                    canGoPrevious={canGoPrevious}\n                    canGoNext={canGoNext}\n                  />\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </UnifiedLayout>\n  );\n}","size_bytes":24314},"client/src/pages/admin/boletos-page.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Plus, Edit, Download, FileText, Receipt, Filter, RefreshCw, Loader2, Search } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useCallback, useState as useReactState } from \"react\";\nimport { Upload, X, File, Eye } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { AdminLayout } from \"@/components/layout/admin-layout\";\nimport { exportToCSV, formatDateForCSV, formatCurrencyForCSV } from \"@/lib/csv-export\";\nimport { usePaginatedList } from \"@/hooks/use-paginated-list\";\nimport { ListPagination, MobileListPagination } from \"@/components/ui/list-pagination\";\n\n// Schema de validação para o formulário de boleto\nconst boletoFormSchema = z.object({\n  transportadorId: z.number().min(1, \"Selecione um transportador\"),\n  nomeTransportador: z.string().min(1, \"Nome do transportador é obrigatório\"),\n  cpfCnpj: z.string().min(11, \"CPF/CNPJ é obrigatório\"),\n  numeroBoleto: z.string().min(1, \"Número do boleto é obrigatório\"),\n  valor: z.string().min(1, \"Valor é obrigatório\"),\n  dataEmissao: z.string().min(1, \"Data de emissão é obrigatória\"),\n  dataVencimento: z.string().min(1, \"Data de vencimento é obrigatória\"),\n  status: z.string().min(1, \"Status é obrigatório\"),\n  observacoes: z.string().optional(),\n  uploadBoletoUrl: z.string().optional(),\n  uploadNfUrl: z.string().optional(),\n});\n\ntype BoletoFormData = z.infer<typeof boletoFormSchema>;\n\ninterface Boleto {\n  id: number;\n  transportadorId: number;\n  nomeTransportador: string;\n  cpfCnpj: string;\n  numeroBoleto: string;\n  valor: string;\n  dataEmissao: string;\n  dataVencimento: string;\n  status: string;\n  uploadBoletoUrl?: string;\n  uploadNfUrl?: string;\n  observacoes?: string;\n  criadoEm: string;\n  atualizadoEm: string;\n}\n\nexport default function BoletosPage() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingBoleto, setEditingBoleto] = useState<Boleto | null>(null);\n  const [filtroStatus, setFiltroStatus] = useState<string>(\"todos\");\n  const [filtroVencimento, setFiltroVencimento] = useState<string>(\"todos\");\n  const [termoBusca, setTermoBusca] = useState(\"\");\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: boletos = [], isLoading, error, refetch } = useQuery({\n    queryKey: [\"/api/boletos\"],\n    refetchInterval: 30000, // Atualização automática a cada 30 segundos\n    refetchOnWindowFocus: true,\n    staleTime: 1000, // 1 segundo para garantir dados frescos\n  });\n\n  const { data: transporters = [] } = useQuery({\n    queryKey: [\"/api/admin/transporters\"],\n  });\n\n  // Aplicar filtros e busca\n  const boletosFiltrados = useMemo(() => {\n    if (!boletos) return [];\n    \n    return boletos.filter((boleto) => {\n      // Filtro por status\n      let matchStatus = true;\n      if (filtroStatus && filtroStatus !== \"todos\") {\n        if (filtroStatus === \"aguardando_pagamento\") {\n          matchStatus = boleto.status === \"pendente\";\n        } else if (filtroStatus === \"vencido\") {\n          const hoje = new Date();\n          const vencimento = new Date(boleto.dataVencimento);\n          matchStatus = vencimento < hoje;\n        } else {\n          matchStatus = boleto.status === filtroStatus;\n        }\n      }\n      \n      // Filtro por vencimento\n      let matchVencimento = true;\n      if (filtroVencimento && filtroVencimento !== \"todos\") {\n        const hoje = new Date();\n        const vencimento = new Date(boleto.dataVencimento);\n        const seteDiasDepois = new Date();\n        seteDiasDepois.setDate(hoje.getDate() + 7);\n        \n        if (filtroVencimento === \"vencidos\") {\n          matchVencimento = vencimento < hoje;\n        } else if (filtroVencimento === \"vencendo\") {\n          matchVencimento = vencimento >= hoje && vencimento <= seteDiasDepois;\n        } else if (filtroVencimento === \"futuros\") {\n          matchVencimento = vencimento > seteDiasDepois;\n        }\n      }\n      \n      // Filtro de busca\n      const matchBusca = !termoBusca || \n        boleto.numeroBoleto.toLowerCase().includes(termoBusca.toLowerCase()) ||\n        boleto.nomeTransportador.toLowerCase().includes(termoBusca.toLowerCase()) ||\n        boleto.cpfCnpj.includes(termoBusca);\n      \n      return matchStatus && matchVencimento && matchBusca;\n    });\n  }, [boletos, filtroStatus, filtroVencimento, termoBusca]);\n\n  // Implementar paginação\n  const {\n    currentPage,\n    pageSize,\n    paginatedItems: boletosExibidos,\n    totalPages,\n    totalItems,\n    handlePageChange,\n    handlePageSizeChange,\n    goToFirstPage,\n    goToLastPage,\n    goToPreviousPage,\n    goToNextPage,\n    canGoPrevious,\n    canGoNext\n  } = usePaginatedList({\n    items: boletosFiltrados,\n    defaultPageSize: 25,\n    searchTerm: termoBusca\n  });\n\n  // Estados para controlar uploads\n  const [uploadedBoleto, setUploadedBoleto] = useReactState<File | null>(null);\n  const [uploadedNf, setUploadedNf] = useReactState<File | null>(null);\n  const [uploading, setUploading] = useReactState(false);\n  \n  // Estado para controlar dialog de confirmação de exclusão\n  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; boletoId: number | null }>({\n    open: false,\n    boletoId: null\n  });\n\n  // Configuração do formulário\n  const form = useForm<BoletoFormData>({\n    resolver: zodResolver(boletoFormSchema),\n    defaultValues: {\n      transportadorId: 0,\n      nomeTransportador: \"\",\n      cpfCnpj: \"\",\n      numeroBoleto: \"\",\n      valor: \"\",\n      dataEmissao: new Date().toISOString().split('T')[0],\n      dataVencimento: \"\",\n      status: \"pendente\",\n      observacoes: \"\",\n      uploadBoletoUrl: \"\",\n      uploadNfUrl: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: BoletoFormData) => apiRequest(\"POST\", \"/api/boletos\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/boletos\"] });\n      toast({\n        title: \"Boleto criado\",\n        description: \"Boleto criado com sucesso\",\n      });\n      handleFormClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar boleto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: BoletoFormData }) =>\n      apiRequest(\"PATCH\", `/api/boletos/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/boletos\"] });\n      toast({\n        title: \"Boleto atualizado\",\n        description: \"Boleto atualizado com sucesso\",\n      });\n      handleFormClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar boleto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/boletos/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/boletos\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Boleto excluído com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao excluir boleto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Função para atualizar manualmente\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      await refetch();\n      toast({\n        title: \"Atualizado\",\n        description: \"Lista de boletos atualizada com sucesso\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar boletos\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const handleEdit = (boleto: Boleto) => {\n    setEditingBoleto(boleto);\n    \n    // Preencher o formulário com os dados do boleto\n    form.reset({\n      transportadorId: boleto.transportadorId,\n      nomeTransportador: boleto.nomeTransportador,\n      cpfCnpj: boleto.cpfCnpj,\n      numeroBoleto: boleto.numeroBoleto,\n      valor: boleto.valor,\n      dataEmissao: new Date(boleto.dataEmissao).toISOString().split('T')[0],\n      dataVencimento: new Date(boleto.dataVencimento).toISOString().split('T')[0],\n      status: boleto.status,\n      observacoes: boleto.observacoes || \"\",\n      uploadBoletoUrl: boleto.uploadBoletoUrl || \"\",\n      uploadNfUrl: boleto.uploadNfUrl || \"\",\n    });\n    \n    setIsFormOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    setDeleteDialog({ open: true, boletoId: id });\n  };\n\n  const confirmDelete = () => {\n    if (deleteDialog.boletoId) {\n      deleteMutation.mutate(deleteDialog.boletoId);\n      setDeleteDialog({ open: false, boletoId: null });\n    }\n  };\n\n  const cancelDelete = () => {\n    setDeleteDialog({ open: false, boletoId: null });\n  };\n\n  const handleFormClose = () => {\n    setIsFormOpen(false);\n    setEditingBoleto(null);\n    setUploadedBoleto(null);\n    setUploadedNf(null);\n    form.reset();\n  };\n\n  const handleTransporterChange = (transporterId: string) => {\n    const transporter = transporters.find((t: any) => t.id === parseInt(transporterId));\n    if (transporter) {\n      form.setValue(\"transportadorId\", transporter.id);\n      form.setValue(\"nomeTransportador\", transporter.name);\n      form.setValue(\"cpfCnpj\", transporter.documentNumber);\n    }\n  };\n\n  // Função para upload de arquivos\n  const uploadFile = async (file: File, type: string): Promise<string> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', type);\n\n    const response = await fetch('/api/upload/boleto', {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error('Erro no upload do arquivo');\n    }\n\n    const result = await response.json();\n    return result.url;\n  };\n\n  const handleFileUpload = async (file: File, type: 'boleto' | 'nf') => {\n    // Validar arquivo\n    if (file.type !== 'application/pdf') {\n      toast({\n        title: \"Arquivo inválido\",\n        description: \"Apenas arquivos PDF são aceitos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) { // 10MB\n      toast({\n        title: \"Arquivo muito grande\",\n        description: \"O arquivo deve ter no máximo 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    try {\n      const url = await uploadFile(file, type);\n      \n      if (type === 'boleto') {\n        setUploadedBoleto(file);\n        form.setValue('uploadBoletoUrl', url);\n      } else {\n        setUploadedNf(file);\n        form.setValue('uploadNfUrl', url);\n      }\n\n      toast({\n        title: \"Upload realizado\",\n        description: `${type === 'boleto' ? 'Boleto' : 'Nota Fiscal'} enviado com sucesso`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro no upload\",\n        description: \"Erro ao enviar arquivo. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const onSubmit = async (data: BoletoFormData) => {\n    // Manter as datas como strings ISO para o schema Zod\n    if (editingBoleto) {\n      updateMutation.mutate({ id: editingBoleto.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"pago\":\n        return \"default\";\n      case \"vencido\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"aguardando_pagamento\":\n        return \"Aguardando Pagamento\";\n      case \"pago\":\n        return \"Pago\";\n      case \"vencido\":\n        return \"Vencido\";\n      default:\n        return status;\n    }\n  };\n\n  const isVencido = (dataVencimento: string) => {\n    return new Date(dataVencimento) < new Date();\n  };\n\n  const handleDownloadFile = (url: string, fileName: string) => {\n    if (!url) {\n      toast({\n        title: \"Erro\",\n        description: \"Arquivo não encontrado\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName;\n    link.target = '_blank';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleExportCSV = () => {\n    if (!boletos || boletos.length === 0) {\n      toast({\n        title: \"Nenhum dado para exportar\",\n        description: \"Não há boletos para exportar\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const headers = [\n        \"ID\",\n        \"Transportador\", \n        \"CPF/CNPJ\",\n        \"Número do Boleto\",\n        \"Valor\",\n        \"Data Emissão\",\n        \"Data Vencimento\", \n        \"Status\",\n        \"Observações\",\n        \"Criado em\"\n      ];\n\n      const formattedData = boletos.map(boleto => ({\n        ID: boleto.id,\n        Transportador: boleto.nomeTransportador,\n        \"CPF/CNPJ\": boleto.cpfCnpj,\n        \"Número do Boleto\": boleto.numeroBoleto,\n        Valor: formatCurrencyForCSV(boleto.valor),\n        \"Data Emissão\": formatDateForCSV(boleto.dataEmissao),\n        \"Data Vencimento\": formatDateForCSV(boleto.dataVencimento),\n        Status: boleto.status === \"aguardando_pagamento\" ? \"Aguardando Pagamento\" :\n                boleto.status === \"pago\" ? \"Pago\" :\n                boleto.status === \"vencido\" ? \"Vencido\" : boleto.status,\n        Observações: boleto.observacoes || \"\",\n        \"Criado em\": formatDateForCSV(boleto.criadoEm)\n      }));\n\n      exportToCSV({\n        filename: \"boletos\",\n        headers,\n        data: formattedData\n      });\n\n      toast({\n        title: \"Exportação concluída\",\n        description: `${boletos.length} boletos exportados com sucesso`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro na exportação\",\n        description: \"Ocorreu um erro ao exportar os dados\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <AdminLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Carregando boletos...</div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Módulo Financeiro</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Gerencie boletos e pagamentos dos transportadores\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={handleRefresh} \n            variant=\"outline\"\n            disabled={isRefreshing}\n            size=\"sm\"\n          >\n            {isRefreshing ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            Atualizar\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleExportCSV}\n            disabled={isLoading}\n            title=\"Exportar dados dos boletos\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Exportar\n          </Button>\n          <Button\n            onClick={() => setIsFormOpen(true)}\n            size=\"sm\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Novo Boleto\n          </Button>\n        </div>\n      </div>\n\n      {/* Filtros */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"busca\">Buscar</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"busca\"\n                  placeholder=\"Número ou transportador...\"\n                  value={termoBusca}\n                  onChange={(e) => setTermoBusca(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"filtro-status\">Status</Label>\n              <Select value={filtroStatus} onValueChange={setFiltroStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione um status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"todos\">Todos</SelectItem>\n                  <SelectItem value=\"aguardando_pagamento\">Aguardando Pagamento</SelectItem>\n                  <SelectItem value=\"pago\">Pago</SelectItem>\n                  <SelectItem value=\"vencido\">Vencido</SelectItem>\n                  <SelectItem value=\"pendente\">Pendente</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"filtro-vencimento\">Vencimento</Label>\n              <Select value={filtroVencimento} onValueChange={setFiltroVencimento}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione período\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"todos\">Todos</SelectItem>\n                  <SelectItem value=\"vencidos\">Vencidos</SelectItem>\n                  <SelectItem value=\"vencendo\">Vencendo (7 dias)</SelectItem>\n                  <SelectItem value=\"futuros\">Futuros</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setFiltroStatus(\"todos\");\n                  setFiltroVencimento(\"todos\");\n                  setTermoBusca(\"\");\n                }}\n                className=\"w-full\"\n              >\n                Limpar Filtros\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {boletosFiltrados.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-8\">\n            <div className=\"text-center\">\n              <Receipt className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Nenhum boleto encontrado\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {boletos.length === 0 \n                  ? \"Ainda não há boletos cadastrados no sistema.\"\n                  : \"Nenhum boleto corresponde aos filtros aplicados.\"\n                }\n              </p>\n              {boletos.length === 0 && (\n                <Button onClick={() => setIsFormOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Criar Primeiro Boleto\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              Lista de Boletos ({totalItems} total{totalItems !== boletosExibidos.length ? `, ${boletosExibidos.length} exibidos` : ''})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Número</TableHead>\n                  <TableHead>Transportador</TableHead>\n                  <TableHead>CPF/CNPJ</TableHead>\n                  <TableHead>Valor</TableHead>\n                  <TableHead>Emissão</TableHead>\n                  <TableHead>Vencimento</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Arquivos</TableHead>\n                  <TableHead>Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {boletosExibidos.map((boleto: Boleto) => (\n                  <TableRow key={boleto.id}>\n                    <TableCell className=\"font-medium\">\n                      {boleto.numeroBoleto}\n                    </TableCell>\n                    <TableCell>{boleto.nomeTransportador}</TableCell>\n                    <TableCell>{boleto.cpfCnpj}</TableCell>\n                    <TableCell>{formatCurrency(parseFloat(boleto.valor))}</TableCell>\n                    <TableCell>\n                      {formatDate(boleto.dataEmissao)}\n                    </TableCell>\n                    <TableCell>\n                      <div className={isVencido(boleto.dataVencimento) ? \"text-red-600\" : \"\"}>\n                        {formatDate(boleto.dataVencimento)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={getStatusBadgeVariant(boleto.status)}>\n                        {getStatusLabel(boleto.status)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        {boleto.uploadBoletoUrl && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDownloadFile(boleto.uploadBoletoUrl!, `boleto-${boleto.numeroBoleto}.pdf`)}\n                            title=\"Baixar boleto\"\n                          >\n                            <Receipt className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                        {boleto.uploadNfUrl && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDownloadFile(boleto.uploadNfUrl!, `nf-${boleto.numeroBoleto}.pdf`)}\n                            title=\"Baixar nota fiscal\"\n                          >\n                            <FileText className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                        {!boleto.uploadBoletoUrl && !boleto.uploadNfUrl && (\n                          <span className=\"text-sm text-gray-500\">Sem arquivos</span>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(boleto)}\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(boleto.id)}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n\n            {/* Controles de paginação modernos */}\n            {totalPages > 1 && (\n              <>\n                {/* Desktop */}\n                <div className=\"hidden md:block mt-6\">\n                  <ListPagination \n                    currentPage={currentPage}\n                    totalPages={totalPages}\n                    totalItems={totalItems}\n                    itemsPerPage={pageSize}\n                    hasPrev={canGoPrevious}\n                    hasNext={canGoNext}\n                    startItem={(currentPage - 1) * pageSize + 1}\n                    endItem={Math.min(currentPage * pageSize, totalItems)}\n                    onPageChange={handlePageChange}\n                    onPageSizeChange={handlePageSizeChange}\n                    pageSizeOptions={[10, 25, 50, 100]}\n                  />\n                </div>\n\n                {/* Mobile */}\n                <div className=\"block md:hidden mt-6\">\n                  <MobileListPagination\n                    currentPage={currentPage}\n                    totalPages={totalPages}\n                    totalItems={totalItems}\n                    itemsPerPage={pageSize}\n                    hasPrev={canGoPrevious}\n                    hasNext={canGoNext}\n                    startItem={(currentPage - 1) * pageSize + 1}\n                    endItem={Math.min(currentPage * pageSize, totalItems)}\n                    onPageChange={handlePageChange}\n                  />\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      <Dialog open={isFormOpen} onOpenChange={handleFormClose}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingBoleto ? \"Editar Boleto\" : \"Novo Boleto\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 p-4\">\n              {!editingBoleto && (\n                <FormField\n                  control={form.control}\n                  name=\"transportadorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Transportador</FormLabel>\n                      <Select \n                        onValueChange={handleTransporterChange}\n                        value={field.value ? field.value.toString() : \"\"}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um transportador\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {transporters?.map((transporter: any) => (\n                            <SelectItem key={transporter.id} value={transporter.id.toString()}>\n                              {transporter.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nomeTransportador\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Transportador</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Nome do transportador\" readOnly />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"cpfCnpj\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>CPF/CNPJ</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"CPF/CNPJ\" readOnly />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"numeroBoleto\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Número do Boleto</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Número do boleto\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"valor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Valor</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"R$ 0,00\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"dataEmissao\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data de Emissão</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"dataVencimento\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data de Vencimento</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione o status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"pendente\">Pendente</SelectItem>\n                        <SelectItem value=\"aguardando_pagamento\">Aguardando Pagamento</SelectItem>\n                        <SelectItem value=\"pago\">Pago</SelectItem>\n                        <SelectItem value=\"vencido\">Vencido</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"observacoes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Observações</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        placeholder=\"Observações opcionais\"\n                        rows={3}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Upload de Boleto */}\n              <div className=\"space-y-2\">\n                <Label>Upload do Boleto (PDF)</Label>\n                <div \n                  className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n                    uploading ? 'border-gray-300 bg-gray-50' : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50'\n                  }`}\n                  onDrop={(e) => {\n                    e.preventDefault();\n                    const files = e.dataTransfer.files;\n                    if (files.length > 0) {\n                      handleFileUpload(files[0], 'boleto');\n                    }\n                  }}\n                  onDragOver={(e) => e.preventDefault()}\n                  onDragEnter={(e) => e.preventDefault()}\n                >\n                  {uploadedBoleto ? (\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <File className=\"h-5 w-5 text-red-600\" />\n                        <span className=\"text-sm\">{uploadedBoleto.name}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (form.getValues('uploadBoletoUrl')) {\n                              window.open(form.getValues('uploadBoletoUrl'), '_blank');\n                            }\n                          }}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setUploadedBoleto(null);\n                            form.setValue('uploadBoletoUrl', '');\n                          }}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div>\n                      <Upload className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        Arraste e solte o arquivo do boleto aqui, ou clique para selecionar\n                      </p>\n                      <p className=\"text-xs text-gray-500\">PDF • Máx. 10MB</p>\n                      <Input\n                        type=\"file\"\n                        accept=\".pdf\"\n                        onChange={(e) => {\n                          const files = e.target.files;\n                          if (files && files.length > 0) {\n                            handleFileUpload(files[0], 'boleto');\n                          }\n                        }}\n                        className=\"hidden\"\n                        id=\"boleto-upload\"\n                        disabled={uploading}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => document.getElementById('boleto-upload')?.click()}\n                        disabled={uploading}\n                        className=\"mt-2\"\n                      >\n                        {uploading ? \"Enviando...\" : \"Selecionar Arquivo\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Upload de Nota Fiscal */}\n              <div className=\"space-y-2\">\n                <Label>Upload da Nota Fiscal (PDF)</Label>\n                <div \n                  className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n                    uploading ? 'border-gray-300 bg-gray-50' : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50'\n                  }`}\n                  onDrop={(e) => {\n                    e.preventDefault();\n                    const files = e.dataTransfer.files;\n                    if (files.length > 0) {\n                      handleFileUpload(files[0], 'nf');\n                    }\n                  }}\n                  onDragOver={(e) => e.preventDefault()}\n                  onDragEnter={(e) => e.preventDefault()}\n                >\n                  {uploadedNf ? (\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <File className=\"h-5 w-5 text-red-600\" />\n                        <span className=\"text-sm\">{uploadedNf.name}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (form.getValues('uploadNfUrl')) {\n                              window.open(form.getValues('uploadNfUrl'), '_blank');\n                            }\n                          }}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setUploadedNf(null);\n                            form.setValue('uploadNfUrl', '');\n                          }}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div>\n                      <Upload className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        Arraste e solte o arquivo da nota fiscal aqui, ou clique para selecionar\n                      </p>\n                      <p className=\"text-xs text-gray-500\">PDF • Máx. 10MB</p>\n                      <Input\n                        type=\"file\"\n                        accept=\".pdf\"\n                        onChange={(e) => {\n                          const files = e.target.files;\n                          if (files && files.length > 0) {\n                            handleFileUpload(files[0], 'nf');\n                          }\n                        }}\n                        className=\"hidden\"\n                        id=\"nf-upload\"\n                        disabled={uploading}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => document.getElementById('nf-upload')?.click()}\n                        disabled={uploading}\n                        className=\"mt-2\"\n                      >\n                        {uploading ? \"Enviando...\" : \"Selecionar Arquivo\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleFormClose}>\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {createMutation.isPending || updateMutation.isPending ? \"Salvando...\" : \"Salvar\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Dialog de confirmação de exclusão */}\n      <AlertDialog open={deleteDialog.open} onOpenChange={(open) => !open && cancelDelete()}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir este boleto? Esta ação não pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={cancelDelete}>Cancelar</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              Excluir\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </AdminLayout>\n  );\n}","size_bytes":41541}}}